
DHTTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d28c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000570  0800d3a0  0800d3a0  0001d3a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d910  0800d910  00020350  2**0
                  CONTENTS
  4 .ARM          00000000  0800d910  0800d910  00020350  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d910  0800d910  00020350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d910  0800d910  0001d910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d914  0800d914  0001d914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  0800d918  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000121c  20000350  0800dc68  00020350  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000156c  0800dc68  0002156c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef2b  00000000  00000000  00020379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e60  00000000  00000000  0002f2a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  00032108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf8  00000000  00000000  00032e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a7b2  00000000  00000000  00033a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b0e  00000000  00000000  0004e1f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000884a8  00000000  00000000  0005ed00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e71a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a08  00000000  00000000  000e71f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000350 	.word	0x20000350
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d384 	.word	0x0800d384

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000354 	.word	0x20000354
 800014c:	0800d384 	.word	0x0800d384

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b0a0      	sub	sp, #128	; 0x80
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bde:	f000 fac7 	bl	8001170 <HAL_Init>
  uint8_t receivedData[100];
  char dataMode[20], longitude[1], latitude[1];
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be2:	f000 f847 	bl	8000c74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be6:	f000 f8c9 	bl	8000d7c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000bea:	f007 fa65 	bl	80080b8 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 8000bee:	f000 f89b 	bl	8000d28 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bf8:	481c      	ldr	r0, [pc, #112]	; (8000c6c <main+0x94>)
 8000bfa:	f000 fdad 	bl	8001758 <HAL_GPIO_WritePin>

	  HAL_UART_Receive(&huart2, receivedData, sizeof(receivedData), HAL_MAX_DELAY);
 8000bfe:	f107 011c 	add.w	r1, r7, #28
 8000c02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c06:	2264      	movs	r2, #100	; 0x64
 8000c08:	4819      	ldr	r0, [pc, #100]	; (8000c70 <main+0x98>)
 8000c0a:	f002 ff9e 	bl	8003b4a <HAL_UART_Receive>

	  strcpy(dataMode, strtok(receivedData, ','));
 8000c0e:	f107 031c 	add.w	r3, r7, #28
 8000c12:	212c      	movs	r1, #44	; 0x2c
 8000c14:	4618      	mov	r0, r3
 8000c16:	f009 fbc9 	bl	800a3ac <strtok>
 8000c1a:	4602      	mov	r2, r0
 8000c1c:	f107 0308 	add.w	r3, r7, #8
 8000c20:	4611      	mov	r1, r2
 8000c22:	4618      	mov	r0, r3
 8000c24:	f008 fda8 	bl	8009778 <strcpy>
	  strcpy(latitude, strtok(NULL, ','));
 8000c28:	212c      	movs	r1, #44	; 0x2c
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f009 fbbe 	bl	800a3ac <strtok>
 8000c30:	4602      	mov	r2, r0
 8000c32:	463b      	mov	r3, r7
 8000c34:	4611      	mov	r1, r2
 8000c36:	4618      	mov	r0, r3
 8000c38:	f008 fd9e 	bl	8009778 <strcpy>
	  strcpy(longitude, strtok(NULL, ','));
 8000c3c:	212c      	movs	r1, #44	; 0x2c
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f009 fbb4 	bl	800a3ac <strtok>
 8000c44:	4602      	mov	r2, r0
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	4611      	mov	r1, r2
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f008 fd94 	bl	8009778 <strcpy>

//	  CDC_Transmit_FS((uint8_t *)receivedData, strlen(receivedData));
//	  CDC_Transmit_FS((uint8_t *)dataMode, strlen(dataMode));
	  CDC_Transmit_FS((uint8_t *)latitude, strlen(latitude));
 8000c50:	2200      	movs	r2, #0
 8000c52:	463b      	mov	r3, r7
 8000c54:	4611      	mov	r1, r2
 8000c56:	4618      	mov	r0, r3
 8000c58:	f007 faec 	bl	8008234 <CDC_Transmit_FS>
	  CDC_Transmit_FS((uint8_t *)longitude, strlen(longitude));
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	4611      	mov	r1, r2
 8000c62:	4618      	mov	r0, r3
 8000c64:	f007 fae6 	bl	8008234 <CDC_Transmit_FS>
  {
 8000c68:	e7c3      	b.n	8000bf2 <main+0x1a>
 8000c6a:	bf00      	nop
 8000c6c:	40010c00 	.word	0x40010c00
 8000c70:	2000036c 	.word	0x2000036c

08000c74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b094      	sub	sp, #80	; 0x50
 8000c78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c7e:	2228      	movs	r2, #40	; 0x28
 8000c80:	2100      	movs	r1, #0
 8000c82:	4618      	mov	r0, r3
 8000c84:	f007 fede 	bl	8008a44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ca8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cbe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cc0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000cc4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f002 fa20 	bl	8003110 <HAL_RCC_OscConfig>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000cd6:	f000 f8ab 	bl	8000e30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cda:	230f      	movs	r3, #15
 8000cdc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ce6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cea:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cec:	2300      	movs	r3, #0
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	2102      	movs	r1, #2
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f002 fc8c 	bl	8003614 <HAL_RCC_ClockConfig>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000d02:	f000 f895 	bl	8000e30 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000d06:	2310      	movs	r3, #16
 8000d08:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	4618      	mov	r0, r3
 8000d12:	f002 fe17 	bl	8003944 <HAL_RCCEx_PeriphCLKConfig>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000d1c:	f000 f888 	bl	8000e30 <Error_Handler>
  }
}
 8000d20:	bf00      	nop
 8000d22:	3750      	adds	r7, #80	; 0x50
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d2c:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <MX_USART2_UART_Init+0x4c>)
 8000d2e:	4a12      	ldr	r2, [pc, #72]	; (8000d78 <MX_USART2_UART_Init+0x50>)
 8000d30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d32:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <MX_USART2_UART_Init+0x4c>)
 8000d34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <MX_USART2_UART_Init+0x4c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <MX_USART2_UART_Init+0x4c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d46:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <MX_USART2_UART_Init+0x4c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d4c:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <MX_USART2_UART_Init+0x4c>)
 8000d4e:	220c      	movs	r2, #12
 8000d50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d52:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <MX_USART2_UART_Init+0x4c>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <MX_USART2_UART_Init+0x4c>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d5e:	4805      	ldr	r0, [pc, #20]	; (8000d74 <MX_USART2_UART_Init+0x4c>)
 8000d60:	f002 fea6 	bl	8003ab0 <HAL_UART_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d6a:	f000 f861 	bl	8000e30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	2000036c 	.word	0x2000036c
 8000d78:	40004400 	.word	0x40004400

08000d7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b088      	sub	sp, #32
 8000d80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d82:	f107 0310 	add.w	r3, r7, #16
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	609a      	str	r2, [r3, #8]
 8000d8e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d90:	4b24      	ldr	r3, [pc, #144]	; (8000e24 <MX_GPIO_Init+0xa8>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	4a23      	ldr	r2, [pc, #140]	; (8000e24 <MX_GPIO_Init+0xa8>)
 8000d96:	f043 0320 	orr.w	r3, r3, #32
 8000d9a:	6193      	str	r3, [r2, #24]
 8000d9c:	4b21      	ldr	r3, [pc, #132]	; (8000e24 <MX_GPIO_Init+0xa8>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	f003 0320 	and.w	r3, r3, #32
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da8:	4b1e      	ldr	r3, [pc, #120]	; (8000e24 <MX_GPIO_Init+0xa8>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	4a1d      	ldr	r2, [pc, #116]	; (8000e24 <MX_GPIO_Init+0xa8>)
 8000dae:	f043 0304 	orr.w	r3, r3, #4
 8000db2:	6193      	str	r3, [r2, #24]
 8000db4:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <MX_GPIO_Init+0xa8>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	f003 0304 	and.w	r3, r3, #4
 8000dbc:	60bb      	str	r3, [r7, #8]
 8000dbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc0:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <MX_GPIO_Init+0xa8>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	4a17      	ldr	r2, [pc, #92]	; (8000e24 <MX_GPIO_Init+0xa8>)
 8000dc6:	f043 0308 	orr.w	r3, r3, #8
 8000dca:	6193      	str	r3, [r2, #24]
 8000dcc:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <MX_GPIO_Init+0xa8>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	f003 0308 	and.w	r3, r3, #8
 8000dd4:	607b      	str	r3, [r7, #4]
 8000dd6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000dde:	4812      	ldr	r0, [pc, #72]	; (8000e28 <MX_GPIO_Init+0xac>)
 8000de0:	f000 fcba 	bl	8001758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000de4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000de8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 0310 	add.w	r3, r7, #16
 8000df6:	4619      	mov	r1, r3
 8000df8:	480c      	ldr	r0, [pc, #48]	; (8000e2c <MX_GPIO_Init+0xb0>)
 8000dfa:	f000 fb29 	bl	8001450 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dfe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e04:	2301      	movs	r3, #1
 8000e06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e10:	f107 0310 	add.w	r3, r7, #16
 8000e14:	4619      	mov	r1, r3
 8000e16:	4804      	ldr	r0, [pc, #16]	; (8000e28 <MX_GPIO_Init+0xac>)
 8000e18:	f000 fb1a 	bl	8001450 <HAL_GPIO_Init>

}
 8000e1c:	bf00      	nop
 8000e1e:	3720      	adds	r7, #32
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40021000 	.word	0x40021000
 8000e28:	40010c00 	.word	0x40010c00
 8000e2c:	40010800 	.word	0x40010800

08000e30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e34:	b672      	cpsid	i
}
 8000e36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <Error_Handler+0x8>
	...

08000e3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e42:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <HAL_MspInit+0x5c>)
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	4a14      	ldr	r2, [pc, #80]	; (8000e98 <HAL_MspInit+0x5c>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6193      	str	r3, [r2, #24]
 8000e4e:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <HAL_MspInit+0x5c>)
 8000e50:	699b      	ldr	r3, [r3, #24]
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	60bb      	str	r3, [r7, #8]
 8000e58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5a:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <HAL_MspInit+0x5c>)
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	4a0e      	ldr	r2, [pc, #56]	; (8000e98 <HAL_MspInit+0x5c>)
 8000e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e64:	61d3      	str	r3, [r2, #28]
 8000e66:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <HAL_MspInit+0x5c>)
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <HAL_MspInit+0x60>)
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	4a04      	ldr	r2, [pc, #16]	; (8000e9c <HAL_MspInit+0x60>)
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	3714      	adds	r7, #20
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	40010000 	.word	0x40010000

08000ea0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b088      	sub	sp, #32
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 0310 	add.w	r3, r7, #16
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a1b      	ldr	r2, [pc, #108]	; (8000f28 <HAL_UART_MspInit+0x88>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d12f      	bne.n	8000f20 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ec0:	4b1a      	ldr	r3, [pc, #104]	; (8000f2c <HAL_UART_MspInit+0x8c>)
 8000ec2:	69db      	ldr	r3, [r3, #28]
 8000ec4:	4a19      	ldr	r2, [pc, #100]	; (8000f2c <HAL_UART_MspInit+0x8c>)
 8000ec6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eca:	61d3      	str	r3, [r2, #28]
 8000ecc:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <HAL_UART_MspInit+0x8c>)
 8000ece:	69db      	ldr	r3, [r3, #28]
 8000ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed8:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <HAL_UART_MspInit+0x8c>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	4a13      	ldr	r2, [pc, #76]	; (8000f2c <HAL_UART_MspInit+0x8c>)
 8000ede:	f043 0304 	orr.w	r3, r3, #4
 8000ee2:	6193      	str	r3, [r2, #24]
 8000ee4:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <HAL_UART_MspInit+0x8c>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	f003 0304 	and.w	r3, r3, #4
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ef0:	2304      	movs	r3, #4
 8000ef2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efc:	f107 0310 	add.w	r3, r7, #16
 8000f00:	4619      	mov	r1, r3
 8000f02:	480b      	ldr	r0, [pc, #44]	; (8000f30 <HAL_UART_MspInit+0x90>)
 8000f04:	f000 faa4 	bl	8001450 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f08:	2308      	movs	r3, #8
 8000f0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f14:	f107 0310 	add.w	r3, r7, #16
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4805      	ldr	r0, [pc, #20]	; (8000f30 <HAL_UART_MspInit+0x90>)
 8000f1c:	f000 fa98 	bl	8001450 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f20:	bf00      	nop
 8000f22:	3720      	adds	r7, #32
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40004400 	.word	0x40004400
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	40010800 	.word	0x40010800

08000f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <NMI_Handler+0x4>

08000f3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f3e:	e7fe      	b.n	8000f3e <HardFault_Handler+0x4>

08000f40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <MemManage_Handler+0x4>

08000f46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f4a:	e7fe      	b.n	8000f4a <BusFault_Handler+0x4>

08000f4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <UsageFault_Handler+0x4>

08000f52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr

08000f5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bc80      	pop	{r7}
 8000f68:	4770      	bx	lr

08000f6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc80      	pop	{r7}
 8000f74:	4770      	bx	lr

08000f76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f7a:	f000 f93f 	bl	80011fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000f88:	4802      	ldr	r0, [pc, #8]	; (8000f94 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000f8a:	f000 fd2e 	bl	80019ea <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20001050 	.word	0x20001050

08000f98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
	return 1;
 8000f9c:	2301      	movs	r3, #1
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr

08000fa6 <_kill>:

int _kill(int pid, int sig)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
 8000fae:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000fb0:	f007 fd1e 	bl	80089f0 <__errno>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2216      	movs	r2, #22
 8000fb8:	601a      	str	r2, [r3, #0]
	return -1;
 8000fba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <_exit>:

void _exit (int status)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000fce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff ffe7 	bl	8000fa6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000fd8:	e7fe      	b.n	8000fd8 <_exit+0x12>

08000fda <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b086      	sub	sp, #24
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	60f8      	str	r0, [r7, #12]
 8000fe2:	60b9      	str	r1, [r7, #8]
 8000fe4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	e00a      	b.n	8001002 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fec:	f3af 8000 	nop.w
 8000ff0:	4601      	mov	r1, r0
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	1c5a      	adds	r2, r3, #1
 8000ff6:	60ba      	str	r2, [r7, #8]
 8000ff8:	b2ca      	uxtb	r2, r1
 8000ffa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	3301      	adds	r3, #1
 8001000:	617b      	str	r3, [r7, #20]
 8001002:	697a      	ldr	r2, [r7, #20]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	429a      	cmp	r2, r3
 8001008:	dbf0      	blt.n	8000fec <_read+0x12>
	}

return len;
 800100a:	687b      	ldr	r3, [r7, #4]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]
 8001024:	e009      	b.n	800103a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	1c5a      	adds	r2, r3, #1
 800102a:	60ba      	str	r2, [r7, #8]
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	4618      	mov	r0, r3
 8001030:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	3301      	adds	r3, #1
 8001038:	617b      	str	r3, [r7, #20]
 800103a:	697a      	ldr	r2, [r7, #20]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	429a      	cmp	r2, r3
 8001040:	dbf1      	blt.n	8001026 <_write+0x12>
	}
	return len;
 8001042:	687b      	ldr	r3, [r7, #4]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <_close>:

int _close(int file)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	return -1;
 8001054:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001058:	4618      	mov	r0, r3
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	bc80      	pop	{r7}
 8001060:	4770      	bx	lr

08001062 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
 800106a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001072:	605a      	str	r2, [r3, #4]
	return 0;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr

08001080 <_isatty>:

int _isatty(int file)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	return 1;
 8001088:	2301      	movs	r3, #1
}
 800108a:	4618      	mov	r0, r3
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	bc80      	pop	{r7}
 8001092:	4770      	bx	lr

08001094 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
	return 0;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr

080010ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010b4:	4a14      	ldr	r2, [pc, #80]	; (8001108 <_sbrk+0x5c>)
 80010b6:	4b15      	ldr	r3, [pc, #84]	; (800110c <_sbrk+0x60>)
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010c0:	4b13      	ldr	r3, [pc, #76]	; (8001110 <_sbrk+0x64>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d102      	bne.n	80010ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010c8:	4b11      	ldr	r3, [pc, #68]	; (8001110 <_sbrk+0x64>)
 80010ca:	4a12      	ldr	r2, [pc, #72]	; (8001114 <_sbrk+0x68>)
 80010cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ce:	4b10      	ldr	r3, [pc, #64]	; (8001110 <_sbrk+0x64>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d207      	bcs.n	80010ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010dc:	f007 fc88 	bl	80089f0 <__errno>
 80010e0:	4603      	mov	r3, r0
 80010e2:	220c      	movs	r2, #12
 80010e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010ea:	e009      	b.n	8001100 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010ec:	4b08      	ldr	r3, [pc, #32]	; (8001110 <_sbrk+0x64>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010f2:	4b07      	ldr	r3, [pc, #28]	; (8001110 <_sbrk+0x64>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4413      	add	r3, r2
 80010fa:	4a05      	ldr	r2, [pc, #20]	; (8001110 <_sbrk+0x64>)
 80010fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010fe:	68fb      	ldr	r3, [r7, #12]
}
 8001100:	4618      	mov	r0, r3
 8001102:	3718      	adds	r7, #24
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20005000 	.word	0x20005000
 800110c:	00000400 	.word	0x00000400
 8001110:	200003b0 	.word	0x200003b0
 8001114:	20001570 	.word	0x20001570

08001118 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr

08001124 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001124:	480c      	ldr	r0, [pc, #48]	; (8001158 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001126:	490d      	ldr	r1, [pc, #52]	; (800115c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001128:	4a0d      	ldr	r2, [pc, #52]	; (8001160 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800112c:	e002      	b.n	8001134 <LoopCopyDataInit>

0800112e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001132:	3304      	adds	r3, #4

08001134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001138:	d3f9      	bcc.n	800112e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113a:	4a0a      	ldr	r2, [pc, #40]	; (8001164 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800113c:	4c0a      	ldr	r4, [pc, #40]	; (8001168 <LoopFillZerobss+0x22>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001140:	e001      	b.n	8001146 <LoopFillZerobss>

08001142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001144:	3204      	adds	r2, #4

08001146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001148:	d3fb      	bcc.n	8001142 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800114a:	f7ff ffe5 	bl	8001118 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800114e:	f007 fc55 	bl	80089fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001152:	f7ff fd41 	bl	8000bd8 <main>
  bx lr
 8001156:	4770      	bx	lr
  ldr r0, =_sdata
 8001158:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800115c:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8001160:	0800d918 	.word	0x0800d918
  ldr r2, =_sbss
 8001164:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 8001168:	2000156c 	.word	0x2000156c

0800116c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800116c:	e7fe      	b.n	800116c <ADC1_2_IRQHandler>
	...

08001170 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001174:	4b08      	ldr	r3, [pc, #32]	; (8001198 <HAL_Init+0x28>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a07      	ldr	r2, [pc, #28]	; (8001198 <HAL_Init+0x28>)
 800117a:	f043 0310 	orr.w	r3, r3, #16
 800117e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001180:	2003      	movs	r0, #3
 8001182:	f000 f923 	bl	80013cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001186:	200f      	movs	r0, #15
 8001188:	f000 f808 	bl	800119c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800118c:	f7ff fe56 	bl	8000e3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40022000 	.word	0x40022000

0800119c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a4:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <HAL_InitTick+0x54>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <HAL_InitTick+0x58>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	4619      	mov	r1, r3
 80011ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 f93b 	bl	8001436 <HAL_SYSTICK_Config>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e00e      	b.n	80011e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b0f      	cmp	r3, #15
 80011ce:	d80a      	bhi.n	80011e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d0:	2200      	movs	r2, #0
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011d8:	f000 f903 	bl	80013e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011dc:	4a06      	ldr	r2, [pc, #24]	; (80011f8 <HAL_InitTick+0x5c>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011e2:	2300      	movs	r3, #0
 80011e4:	e000      	b.n	80011e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000000 	.word	0x20000000
 80011f4:	20000008 	.word	0x20000008
 80011f8:	20000004 	.word	0x20000004

080011fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <HAL_IncTick+0x1c>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	461a      	mov	r2, r3
 8001206:	4b05      	ldr	r3, [pc, #20]	; (800121c <HAL_IncTick+0x20>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4413      	add	r3, r2
 800120c:	4a03      	ldr	r2, [pc, #12]	; (800121c <HAL_IncTick+0x20>)
 800120e:	6013      	str	r3, [r2, #0]
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr
 8001218:	20000008 	.word	0x20000008
 800121c:	200003b4 	.word	0x200003b4

08001220 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  return uwTick;
 8001224:	4b02      	ldr	r3, [pc, #8]	; (8001230 <HAL_GetTick+0x10>)
 8001226:	681b      	ldr	r3, [r3, #0]
}
 8001228:	4618      	mov	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr
 8001230:	200003b4 	.word	0x200003b4

08001234 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <__NVIC_SetPriorityGrouping+0x44>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001250:	4013      	ands	r3, r2
 8001252:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800125c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001266:	4a04      	ldr	r2, [pc, #16]	; (8001278 <__NVIC_SetPriorityGrouping+0x44>)
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	60d3      	str	r3, [r2, #12]
}
 800126c:	bf00      	nop
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001280:	4b04      	ldr	r3, [pc, #16]	; (8001294 <__NVIC_GetPriorityGrouping+0x18>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	0a1b      	lsrs	r3, r3, #8
 8001286:	f003 0307 	and.w	r3, r3, #7
}
 800128a:	4618      	mov	r0, r3
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	db0b      	blt.n	80012c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	f003 021f 	and.w	r2, r3, #31
 80012b0:	4906      	ldr	r1, [pc, #24]	; (80012cc <__NVIC_EnableIRQ+0x34>)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	095b      	lsrs	r3, r3, #5
 80012b8:	2001      	movs	r0, #1
 80012ba:	fa00 f202 	lsl.w	r2, r0, r2
 80012be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr
 80012cc:	e000e100 	.word	0xe000e100

080012d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	6039      	str	r1, [r7, #0]
 80012da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	db0a      	blt.n	80012fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	490c      	ldr	r1, [pc, #48]	; (800131c <__NVIC_SetPriority+0x4c>)
 80012ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ee:	0112      	lsls	r2, r2, #4
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	440b      	add	r3, r1
 80012f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012f8:	e00a      	b.n	8001310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	4908      	ldr	r1, [pc, #32]	; (8001320 <__NVIC_SetPriority+0x50>)
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	f003 030f 	and.w	r3, r3, #15
 8001306:	3b04      	subs	r3, #4
 8001308:	0112      	lsls	r2, r2, #4
 800130a:	b2d2      	uxtb	r2, r2
 800130c:	440b      	add	r3, r1
 800130e:	761a      	strb	r2, [r3, #24]
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000e100 	.word	0xe000e100
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001324:	b480      	push	{r7}
 8001326:	b089      	sub	sp, #36	; 0x24
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	f1c3 0307 	rsb	r3, r3, #7
 800133e:	2b04      	cmp	r3, #4
 8001340:	bf28      	it	cs
 8001342:	2304      	movcs	r3, #4
 8001344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3304      	adds	r3, #4
 800134a:	2b06      	cmp	r3, #6
 800134c:	d902      	bls.n	8001354 <NVIC_EncodePriority+0x30>
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3b03      	subs	r3, #3
 8001352:	e000      	b.n	8001356 <NVIC_EncodePriority+0x32>
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001358:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43da      	mvns	r2, r3
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	401a      	ands	r2, r3
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800136c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	fa01 f303 	lsl.w	r3, r1, r3
 8001376:	43d9      	mvns	r1, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800137c:	4313      	orrs	r3, r2
         );
}
 800137e:	4618      	mov	r0, r3
 8001380:	3724      	adds	r7, #36	; 0x24
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr

08001388 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3b01      	subs	r3, #1
 8001394:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001398:	d301      	bcc.n	800139e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800139a:	2301      	movs	r3, #1
 800139c:	e00f      	b.n	80013be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800139e:	4a0a      	ldr	r2, [pc, #40]	; (80013c8 <SysTick_Config+0x40>)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013a6:	210f      	movs	r1, #15
 80013a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013ac:	f7ff ff90 	bl	80012d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b0:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <SysTick_Config+0x40>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013b6:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <SysTick_Config+0x40>)
 80013b8:	2207      	movs	r2, #7
 80013ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	e000e010 	.word	0xe000e010

080013cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff ff2d 	bl	8001234 <__NVIC_SetPriorityGrouping>
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b086      	sub	sp, #24
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	4603      	mov	r3, r0
 80013ea:	60b9      	str	r1, [r7, #8]
 80013ec:	607a      	str	r2, [r7, #4]
 80013ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013f4:	f7ff ff42 	bl	800127c <__NVIC_GetPriorityGrouping>
 80013f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	68b9      	ldr	r1, [r7, #8]
 80013fe:	6978      	ldr	r0, [r7, #20]
 8001400:	f7ff ff90 	bl	8001324 <NVIC_EncodePriority>
 8001404:	4602      	mov	r2, r0
 8001406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800140a:	4611      	mov	r1, r2
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff ff5f 	bl	80012d0 <__NVIC_SetPriority>
}
 8001412:	bf00      	nop
 8001414:	3718      	adds	r7, #24
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	4603      	mov	r3, r0
 8001422:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff ff35 	bl	8001298 <__NVIC_EnableIRQ>
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff ffa2 	bl	8001388 <SysTick_Config>
 8001444:	4603      	mov	r3, r0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001450:	b480      	push	{r7}
 8001452:	b08b      	sub	sp, #44	; 0x2c
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800145a:	2300      	movs	r3, #0
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800145e:	2300      	movs	r3, #0
 8001460:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001462:	e169      	b.n	8001738 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001464:	2201      	movs	r2, #1
 8001466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	69fa      	ldr	r2, [r7, #28]
 8001474:	4013      	ands	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	429a      	cmp	r2, r3
 800147e:	f040 8158 	bne.w	8001732 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	4a9a      	ldr	r2, [pc, #616]	; (80016f0 <HAL_GPIO_Init+0x2a0>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d05e      	beq.n	800154a <HAL_GPIO_Init+0xfa>
 800148c:	4a98      	ldr	r2, [pc, #608]	; (80016f0 <HAL_GPIO_Init+0x2a0>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d875      	bhi.n	800157e <HAL_GPIO_Init+0x12e>
 8001492:	4a98      	ldr	r2, [pc, #608]	; (80016f4 <HAL_GPIO_Init+0x2a4>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d058      	beq.n	800154a <HAL_GPIO_Init+0xfa>
 8001498:	4a96      	ldr	r2, [pc, #600]	; (80016f4 <HAL_GPIO_Init+0x2a4>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d86f      	bhi.n	800157e <HAL_GPIO_Init+0x12e>
 800149e:	4a96      	ldr	r2, [pc, #600]	; (80016f8 <HAL_GPIO_Init+0x2a8>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d052      	beq.n	800154a <HAL_GPIO_Init+0xfa>
 80014a4:	4a94      	ldr	r2, [pc, #592]	; (80016f8 <HAL_GPIO_Init+0x2a8>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d869      	bhi.n	800157e <HAL_GPIO_Init+0x12e>
 80014aa:	4a94      	ldr	r2, [pc, #592]	; (80016fc <HAL_GPIO_Init+0x2ac>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d04c      	beq.n	800154a <HAL_GPIO_Init+0xfa>
 80014b0:	4a92      	ldr	r2, [pc, #584]	; (80016fc <HAL_GPIO_Init+0x2ac>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d863      	bhi.n	800157e <HAL_GPIO_Init+0x12e>
 80014b6:	4a92      	ldr	r2, [pc, #584]	; (8001700 <HAL_GPIO_Init+0x2b0>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d046      	beq.n	800154a <HAL_GPIO_Init+0xfa>
 80014bc:	4a90      	ldr	r2, [pc, #576]	; (8001700 <HAL_GPIO_Init+0x2b0>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d85d      	bhi.n	800157e <HAL_GPIO_Init+0x12e>
 80014c2:	2b12      	cmp	r3, #18
 80014c4:	d82a      	bhi.n	800151c <HAL_GPIO_Init+0xcc>
 80014c6:	2b12      	cmp	r3, #18
 80014c8:	d859      	bhi.n	800157e <HAL_GPIO_Init+0x12e>
 80014ca:	a201      	add	r2, pc, #4	; (adr r2, 80014d0 <HAL_GPIO_Init+0x80>)
 80014cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d0:	0800154b 	.word	0x0800154b
 80014d4:	08001525 	.word	0x08001525
 80014d8:	08001537 	.word	0x08001537
 80014dc:	08001579 	.word	0x08001579
 80014e0:	0800157f 	.word	0x0800157f
 80014e4:	0800157f 	.word	0x0800157f
 80014e8:	0800157f 	.word	0x0800157f
 80014ec:	0800157f 	.word	0x0800157f
 80014f0:	0800157f 	.word	0x0800157f
 80014f4:	0800157f 	.word	0x0800157f
 80014f8:	0800157f 	.word	0x0800157f
 80014fc:	0800157f 	.word	0x0800157f
 8001500:	0800157f 	.word	0x0800157f
 8001504:	0800157f 	.word	0x0800157f
 8001508:	0800157f 	.word	0x0800157f
 800150c:	0800157f 	.word	0x0800157f
 8001510:	0800157f 	.word	0x0800157f
 8001514:	0800152d 	.word	0x0800152d
 8001518:	08001541 	.word	0x08001541
 800151c:	4a79      	ldr	r2, [pc, #484]	; (8001704 <HAL_GPIO_Init+0x2b4>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d013      	beq.n	800154a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001522:	e02c      	b.n	800157e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	623b      	str	r3, [r7, #32]
          break;
 800152a:	e029      	b.n	8001580 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	3304      	adds	r3, #4
 8001532:	623b      	str	r3, [r7, #32]
          break;
 8001534:	e024      	b.n	8001580 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	3308      	adds	r3, #8
 800153c:	623b      	str	r3, [r7, #32]
          break;
 800153e:	e01f      	b.n	8001580 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	330c      	adds	r3, #12
 8001546:	623b      	str	r3, [r7, #32]
          break;
 8001548:	e01a      	b.n	8001580 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d102      	bne.n	8001558 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001552:	2304      	movs	r3, #4
 8001554:	623b      	str	r3, [r7, #32]
          break;
 8001556:	e013      	b.n	8001580 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d105      	bne.n	800156c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001560:	2308      	movs	r3, #8
 8001562:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69fa      	ldr	r2, [r7, #28]
 8001568:	611a      	str	r2, [r3, #16]
          break;
 800156a:	e009      	b.n	8001580 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800156c:	2308      	movs	r3, #8
 800156e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	69fa      	ldr	r2, [r7, #28]
 8001574:	615a      	str	r2, [r3, #20]
          break;
 8001576:	e003      	b.n	8001580 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001578:	2300      	movs	r3, #0
 800157a:	623b      	str	r3, [r7, #32]
          break;
 800157c:	e000      	b.n	8001580 <HAL_GPIO_Init+0x130>
          break;
 800157e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	2bff      	cmp	r3, #255	; 0xff
 8001584:	d801      	bhi.n	800158a <HAL_GPIO_Init+0x13a>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	e001      	b.n	800158e <HAL_GPIO_Init+0x13e>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	3304      	adds	r3, #4
 800158e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	2bff      	cmp	r3, #255	; 0xff
 8001594:	d802      	bhi.n	800159c <HAL_GPIO_Init+0x14c>
 8001596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	e002      	b.n	80015a2 <HAL_GPIO_Init+0x152>
 800159c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159e:	3b08      	subs	r3, #8
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	210f      	movs	r1, #15
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	fa01 f303 	lsl.w	r3, r1, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	401a      	ands	r2, r3
 80015b4:	6a39      	ldr	r1, [r7, #32]
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	fa01 f303 	lsl.w	r3, r1, r3
 80015bc:	431a      	orrs	r2, r3
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f000 80b1 	beq.w	8001732 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015d0:	4b4d      	ldr	r3, [pc, #308]	; (8001708 <HAL_GPIO_Init+0x2b8>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	4a4c      	ldr	r2, [pc, #304]	; (8001708 <HAL_GPIO_Init+0x2b8>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	6193      	str	r3, [r2, #24]
 80015dc:	4b4a      	ldr	r3, [pc, #296]	; (8001708 <HAL_GPIO_Init+0x2b8>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015e8:	4a48      	ldr	r2, [pc, #288]	; (800170c <HAL_GPIO_Init+0x2bc>)
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	089b      	lsrs	r3, r3, #2
 80015ee:	3302      	adds	r3, #2
 80015f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f8:	f003 0303 	and.w	r3, r3, #3
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	220f      	movs	r2, #15
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	4013      	ands	r3, r2
 800160a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a40      	ldr	r2, [pc, #256]	; (8001710 <HAL_GPIO_Init+0x2c0>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d013      	beq.n	800163c <HAL_GPIO_Init+0x1ec>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a3f      	ldr	r2, [pc, #252]	; (8001714 <HAL_GPIO_Init+0x2c4>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d00d      	beq.n	8001638 <HAL_GPIO_Init+0x1e8>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a3e      	ldr	r2, [pc, #248]	; (8001718 <HAL_GPIO_Init+0x2c8>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d007      	beq.n	8001634 <HAL_GPIO_Init+0x1e4>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a3d      	ldr	r2, [pc, #244]	; (800171c <HAL_GPIO_Init+0x2cc>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d101      	bne.n	8001630 <HAL_GPIO_Init+0x1e0>
 800162c:	2303      	movs	r3, #3
 800162e:	e006      	b.n	800163e <HAL_GPIO_Init+0x1ee>
 8001630:	2304      	movs	r3, #4
 8001632:	e004      	b.n	800163e <HAL_GPIO_Init+0x1ee>
 8001634:	2302      	movs	r3, #2
 8001636:	e002      	b.n	800163e <HAL_GPIO_Init+0x1ee>
 8001638:	2301      	movs	r3, #1
 800163a:	e000      	b.n	800163e <HAL_GPIO_Init+0x1ee>
 800163c:	2300      	movs	r3, #0
 800163e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001640:	f002 0203 	and.w	r2, r2, #3
 8001644:	0092      	lsls	r2, r2, #2
 8001646:	4093      	lsls	r3, r2
 8001648:	68fa      	ldr	r2, [r7, #12]
 800164a:	4313      	orrs	r3, r2
 800164c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800164e:	492f      	ldr	r1, [pc, #188]	; (800170c <HAL_GPIO_Init+0x2bc>)
 8001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001652:	089b      	lsrs	r3, r3, #2
 8001654:	3302      	adds	r3, #2
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d006      	beq.n	8001676 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001668:	4b2d      	ldr	r3, [pc, #180]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	492c      	ldr	r1, [pc, #176]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	4313      	orrs	r3, r2
 8001672:	600b      	str	r3, [r1, #0]
 8001674:	e006      	b.n	8001684 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001676:	4b2a      	ldr	r3, [pc, #168]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	43db      	mvns	r3, r3
 800167e:	4928      	ldr	r1, [pc, #160]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 8001680:	4013      	ands	r3, r2
 8001682:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d006      	beq.n	800169e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001690:	4b23      	ldr	r3, [pc, #140]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 8001692:	685a      	ldr	r2, [r3, #4]
 8001694:	4922      	ldr	r1, [pc, #136]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	4313      	orrs	r3, r2
 800169a:	604b      	str	r3, [r1, #4]
 800169c:	e006      	b.n	80016ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800169e:	4b20      	ldr	r3, [pc, #128]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	43db      	mvns	r3, r3
 80016a6:	491e      	ldr	r1, [pc, #120]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 80016a8:	4013      	ands	r3, r2
 80016aa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d006      	beq.n	80016c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016b8:	4b19      	ldr	r3, [pc, #100]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 80016ba:	689a      	ldr	r2, [r3, #8]
 80016bc:	4918      	ldr	r1, [pc, #96]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	608b      	str	r3, [r1, #8]
 80016c4:	e006      	b.n	80016d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016c6:	4b16      	ldr	r3, [pc, #88]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 80016c8:	689a      	ldr	r2, [r3, #8]
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	43db      	mvns	r3, r3
 80016ce:	4914      	ldr	r1, [pc, #80]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 80016d0:	4013      	ands	r3, r2
 80016d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d021      	beq.n	8001724 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016e0:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 80016e2:	68da      	ldr	r2, [r3, #12]
 80016e4:	490e      	ldr	r1, [pc, #56]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	60cb      	str	r3, [r1, #12]
 80016ec:	e021      	b.n	8001732 <HAL_GPIO_Init+0x2e2>
 80016ee:	bf00      	nop
 80016f0:	10320000 	.word	0x10320000
 80016f4:	10310000 	.word	0x10310000
 80016f8:	10220000 	.word	0x10220000
 80016fc:	10210000 	.word	0x10210000
 8001700:	10120000 	.word	0x10120000
 8001704:	10110000 	.word	0x10110000
 8001708:	40021000 	.word	0x40021000
 800170c:	40010000 	.word	0x40010000
 8001710:	40010800 	.word	0x40010800
 8001714:	40010c00 	.word	0x40010c00
 8001718:	40011000 	.word	0x40011000
 800171c:	40011400 	.word	0x40011400
 8001720:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001724:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <HAL_GPIO_Init+0x304>)
 8001726:	68da      	ldr	r2, [r3, #12]
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	43db      	mvns	r3, r3
 800172c:	4909      	ldr	r1, [pc, #36]	; (8001754 <HAL_GPIO_Init+0x304>)
 800172e:	4013      	ands	r3, r2
 8001730:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001734:	3301      	adds	r3, #1
 8001736:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173e:	fa22 f303 	lsr.w	r3, r2, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	f47f ae8e 	bne.w	8001464 <HAL_GPIO_Init+0x14>
  }
}
 8001748:	bf00      	nop
 800174a:	bf00      	nop
 800174c:	372c      	adds	r7, #44	; 0x2c
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr
 8001754:	40010400 	.word	0x40010400

08001758 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	460b      	mov	r3, r1
 8001762:	807b      	strh	r3, [r7, #2]
 8001764:	4613      	mov	r3, r2
 8001766:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001768:	787b      	ldrb	r3, [r7, #1]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800176e:	887a      	ldrh	r2, [r7, #2]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001774:	e003      	b.n	800177e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001776:	887b      	ldrh	r3, [r7, #2]
 8001778:	041a      	lsls	r2, r3, #16
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	611a      	str	r2, [r3, #16]
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr

08001788 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800178a:	b08b      	sub	sp, #44	; 0x2c
 800178c:	af06      	add	r7, sp, #24
 800178e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e0fd      	b.n	8001996 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d106      	bne.n	80017b4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f006 fe74 	bl	800849c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2203      	movs	r2, #3
 80017b8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f002 fb63 	bl	8003e8c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	603b      	str	r3, [r7, #0]
 80017cc:	687e      	ldr	r6, [r7, #4]
 80017ce:	466d      	mov	r5, sp
 80017d0:	f106 0410 	add.w	r4, r6, #16
 80017d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017d8:	6823      	ldr	r3, [r4, #0]
 80017da:	602b      	str	r3, [r5, #0]
 80017dc:	1d33      	adds	r3, r6, #4
 80017de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017e0:	6838      	ldr	r0, [r7, #0]
 80017e2:	f002 fb2d 	bl	8003e40 <USB_CoreInit>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d005      	beq.n	80017f8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2202      	movs	r2, #2
 80017f0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e0ce      	b.n	8001996 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2100      	movs	r1, #0
 80017fe:	4618      	mov	r0, r3
 8001800:	f002 fb5e 	bl	8003ec0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001804:	2300      	movs	r3, #0
 8001806:	73fb      	strb	r3, [r7, #15]
 8001808:	e04c      	b.n	80018a4 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800180a:	7bfb      	ldrb	r3, [r7, #15]
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	1c5a      	adds	r2, r3, #1
 8001810:	4613      	mov	r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	4413      	add	r3, r2
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	440b      	add	r3, r1
 800181a:	3301      	adds	r3, #1
 800181c:	2201      	movs	r2, #1
 800181e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001820:	7bfb      	ldrb	r3, [r7, #15]
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	1c5a      	adds	r2, r3, #1
 8001826:	4613      	mov	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4413      	add	r3, r2
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	440b      	add	r3, r1
 8001830:	7bfa      	ldrb	r2, [r7, #15]
 8001832:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001834:	7bfa      	ldrb	r2, [r7, #15]
 8001836:	7bfb      	ldrb	r3, [r7, #15]
 8001838:	b298      	uxth	r0, r3
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	4613      	mov	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	440b      	add	r3, r1
 8001846:	3336      	adds	r3, #54	; 0x36
 8001848:	4602      	mov	r2, r0
 800184a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800184c:	7bfb      	ldrb	r3, [r7, #15]
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	1c5a      	adds	r2, r3, #1
 8001852:	4613      	mov	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	440b      	add	r3, r1
 800185c:	3303      	adds	r3, #3
 800185e:	2200      	movs	r2, #0
 8001860:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001862:	7bfa      	ldrb	r2, [r7, #15]
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	440b      	add	r3, r1
 8001870:	3338      	adds	r3, #56	; 0x38
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001876:	7bfa      	ldrb	r2, [r7, #15]
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	4613      	mov	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	4413      	add	r3, r2
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	440b      	add	r3, r1
 8001884:	333c      	adds	r3, #60	; 0x3c
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800188a:	7bfa      	ldrb	r2, [r7, #15]
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	4613      	mov	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	440b      	add	r3, r1
 8001898:	3340      	adds	r3, #64	; 0x40
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800189e:	7bfb      	ldrb	r3, [r7, #15]
 80018a0:	3301      	adds	r3, #1
 80018a2:	73fb      	strb	r3, [r7, #15]
 80018a4:	7bfa      	ldrb	r2, [r7, #15]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d3ad      	bcc.n	800180a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018ae:	2300      	movs	r3, #0
 80018b0:	73fb      	strb	r3, [r7, #15]
 80018b2:	e044      	b.n	800193e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80018b4:	7bfa      	ldrb	r2, [r7, #15]
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	4613      	mov	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	440b      	add	r3, r1
 80018c2:	f203 1369 	addw	r3, r3, #361	; 0x169
 80018c6:	2200      	movs	r2, #0
 80018c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80018ca:	7bfa      	ldrb	r2, [r7, #15]
 80018cc:	6879      	ldr	r1, [r7, #4]
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	440b      	add	r3, r1
 80018d8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018dc:	7bfa      	ldrb	r2, [r7, #15]
 80018de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018e0:	7bfa      	ldrb	r2, [r7, #15]
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	4613      	mov	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	440b      	add	r3, r1
 80018ee:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80018f2:	2200      	movs	r2, #0
 80018f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018f6:	7bfa      	ldrb	r2, [r7, #15]
 80018f8:	6879      	ldr	r1, [r7, #4]
 80018fa:	4613      	mov	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	440b      	add	r3, r1
 8001904:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800190c:	7bfa      	ldrb	r2, [r7, #15]
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	4613      	mov	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	440b      	add	r3, r1
 800191a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001922:	7bfa      	ldrb	r2, [r7, #15]
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	4613      	mov	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4413      	add	r3, r2
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	440b      	add	r3, r1
 8001930:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001938:	7bfb      	ldrb	r3, [r7, #15]
 800193a:	3301      	adds	r3, #1
 800193c:	73fb      	strb	r3, [r7, #15]
 800193e:	7bfa      	ldrb	r2, [r7, #15]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	429a      	cmp	r2, r3
 8001946:	d3b5      	bcc.n	80018b4 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	603b      	str	r3, [r7, #0]
 800194e:	687e      	ldr	r6, [r7, #4]
 8001950:	466d      	mov	r5, sp
 8001952:	f106 0410 	add.w	r4, r6, #16
 8001956:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001958:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800195a:	6823      	ldr	r3, [r4, #0]
 800195c:	602b      	str	r3, [r5, #0]
 800195e:	1d33      	adds	r3, r6, #4
 8001960:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001962:	6838      	ldr	r0, [r7, #0]
 8001964:	f002 fab8 	bl	8003ed8 <USB_DevInit>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d005      	beq.n	800197a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2202      	movs	r2, #2
 8001972:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e00d      	b.n	8001996 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2201      	movs	r2, #1
 8001986:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f004 ff6a 	bl	8006868 <USB_DevDisconnect>

  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3714      	adds	r7, #20
 800199a:	46bd      	mov	sp, r7
 800199c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800199e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d101      	bne.n	80019b4 <HAL_PCD_Start+0x16>
 80019b0:	2302      	movs	r3, #2
 80019b2:	e016      	b.n	80019e2 <HAL_PCD_Start+0x44>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f002 fa4d 	bl	8003e60 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80019c6:	2101      	movs	r1, #1
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f006 ffda 	bl	8008982 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f004 ff3e 	bl	8006854 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b088      	sub	sp, #32
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f004 ff40 	bl	800687c <USB_ReadInterrupts>
 80019fc:	4603      	mov	r3, r0
 80019fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a06:	d102      	bne.n	8001a0e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f000 fb5f 	bl	80020cc <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f004 ff32 	bl	800687c <USB_ReadInterrupts>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a22:	d112      	bne.n	8001a4a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a2c:	b29a      	uxth	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a36:	b292      	uxth	r2, r2
 8001a38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f006 fda8 	bl	8008592 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001a42:	2100      	movs	r1, #0
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f000 f923 	bl	8001c90 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f004 ff14 	bl	800687c <USB_ReadInterrupts>
 8001a54:	4603      	mov	r3, r0
 8001a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a5e:	d10b      	bne.n	8001a78 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001a72:	b292      	uxth	r2, r2
 8001a74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f004 fefd 	bl	800687c <USB_ReadInterrupts>
 8001a82:	4603      	mov	r3, r0
 8001a84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a8c:	d10b      	bne.n	8001aa6 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001aa0:	b292      	uxth	r2, r2
 8001aa2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f004 fee6 	bl	800687c <USB_ReadInterrupts>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001aba:	d126      	bne.n	8001b0a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f022 0204 	bic.w	r2, r2, #4
 8001ace:	b292      	uxth	r2, r2
 8001ad0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f022 0208 	bic.w	r2, r2, #8
 8001ae6:	b292      	uxth	r2, r2
 8001ae8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f006 fd89 	bl	8008604 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b04:	b292      	uxth	r2, r2
 8001b06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f004 feb4 	bl	800687c <USB_ReadInterrupts>
 8001b14:	4603      	mov	r3, r0
 8001b16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b1e:	f040 8082 	bne.w	8001c26 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001b22:	2300      	movs	r3, #0
 8001b24:	77fb      	strb	r3, [r7, #31]
 8001b26:	e010      	b.n	8001b4a <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	7ffb      	ldrb	r3, [r7, #31]
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	441a      	add	r2, r3
 8001b34:	7ffb      	ldrb	r3, [r7, #31]
 8001b36:	8812      	ldrh	r2, [r2, #0]
 8001b38:	b292      	uxth	r2, r2
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	3320      	adds	r3, #32
 8001b3e:	443b      	add	r3, r7
 8001b40:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001b44:	7ffb      	ldrb	r3, [r7, #31]
 8001b46:	3301      	adds	r3, #1
 8001b48:	77fb      	strb	r3, [r7, #31]
 8001b4a:	7ffb      	ldrb	r3, [r7, #31]
 8001b4c:	2b07      	cmp	r3, #7
 8001b4e:	d9eb      	bls.n	8001b28 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f042 0201 	orr.w	r2, r2, #1
 8001b62:	b292      	uxth	r2, r2
 8001b64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f022 0201 	bic.w	r2, r2, #1
 8001b7a:	b292      	uxth	r2, r2
 8001b7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001b80:	bf00      	nop
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d0f6      	beq.n	8001b82 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ba6:	b292      	uxth	r2, r2
 8001ba8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001bac:	2300      	movs	r3, #0
 8001bae:	77fb      	strb	r3, [r7, #31]
 8001bb0:	e00f      	b.n	8001bd2 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001bb2:	7ffb      	ldrb	r3, [r7, #31]
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	6812      	ldr	r2, [r2, #0]
 8001bb8:	4611      	mov	r1, r2
 8001bba:	7ffa      	ldrb	r2, [r7, #31]
 8001bbc:	0092      	lsls	r2, r2, #2
 8001bbe:	440a      	add	r2, r1
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	3320      	adds	r3, #32
 8001bc4:	443b      	add	r3, r7
 8001bc6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001bca:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001bcc:	7ffb      	ldrb	r3, [r7, #31]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	77fb      	strb	r3, [r7, #31]
 8001bd2:	7ffb      	ldrb	r3, [r7, #31]
 8001bd4:	2b07      	cmp	r3, #7
 8001bd6:	d9ec      	bls.n	8001bb2 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f042 0208 	orr.w	r2, r2, #8
 8001bea:	b292      	uxth	r2, r2
 8001bec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c02:	b292      	uxth	r2, r2
 8001c04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 0204 	orr.w	r2, r2, #4
 8001c1a:	b292      	uxth	r2, r2
 8001c1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f006 fcd5 	bl	80085d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f004 fe26 	bl	800687c <USB_ReadInterrupts>
 8001c30:	4603      	mov	r3, r0
 8001c32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c3a:	d10e      	bne.n	8001c5a <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c4e:	b292      	uxth	r2, r2
 8001c50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f006 fc8e 	bl	8008576 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f004 fe0c 	bl	800687c <USB_ReadInterrupts>
 8001c64:	4603      	mov	r3, r0
 8001c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c6e:	d10b      	bne.n	8001c88 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c82:	b292      	uxth	r2, r2
 8001c84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001c88:	bf00      	nop
 8001c8a:	3720      	adds	r7, #32
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d101      	bne.n	8001caa <HAL_PCD_SetAddress+0x1a>
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	e013      	b.n	8001cd2 <HAL_PCD_SetAddress+0x42>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	78fa      	ldrb	r2, [r7, #3]
 8001cb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	78fa      	ldrb	r2, [r7, #3]
 8001cc0:	4611      	mov	r1, r2
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f004 fdb3 	bl	800682e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b084      	sub	sp, #16
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	4608      	mov	r0, r1
 8001ce4:	4611      	mov	r1, r2
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	4603      	mov	r3, r0
 8001cea:	70fb      	strb	r3, [r7, #3]
 8001cec:	460b      	mov	r3, r1
 8001cee:	803b      	strh	r3, [r7, #0]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cf8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	da0e      	bge.n	8001d1e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d00:	78fb      	ldrb	r3, [r7, #3]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	1c5a      	adds	r2, r3, #1
 8001d08:	4613      	mov	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	4413      	add	r3, r2
 8001d14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	705a      	strb	r2, [r3, #1]
 8001d1c:	e00e      	b.n	8001d3c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d1e:	78fb      	ldrb	r3, [r7, #3]
 8001d20:	f003 0207 	and.w	r2, r3, #7
 8001d24:	4613      	mov	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	4413      	add	r3, r2
 8001d34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d3c:	78fb      	ldrb	r3, [r7, #3]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d48:	883a      	ldrh	r2, [r7, #0]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	78ba      	ldrb	r2, [r7, #2]
 8001d52:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	785b      	ldrb	r3, [r3, #1]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d004      	beq.n	8001d66 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d66:	78bb      	ldrb	r3, [r7, #2]
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d102      	bne.n	8001d72 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d101      	bne.n	8001d80 <HAL_PCD_EP_Open+0xa6>
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	e00e      	b.n	8001d9e <HAL_PCD_EP_Open+0xc4>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68f9      	ldr	r1, [r7, #12]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f002 f8c2 	bl	8003f18 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001d9c:	7afb      	ldrb	r3, [r7, #11]
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b084      	sub	sp, #16
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
 8001dae:	460b      	mov	r3, r1
 8001db0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001db2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	da0e      	bge.n	8001dd8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dba:	78fb      	ldrb	r3, [r7, #3]
 8001dbc:	f003 0307 	and.w	r3, r3, #7
 8001dc0:	1c5a      	adds	r2, r3, #1
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	4413      	add	r3, r2
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	4413      	add	r3, r2
 8001dce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	705a      	strb	r2, [r3, #1]
 8001dd6:	e00e      	b.n	8001df6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dd8:	78fb      	ldrb	r3, [r7, #3]
 8001dda:	f003 0207 	and.w	r2, r3, #7
 8001dde:	4613      	mov	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4413      	add	r3, r2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001df6:	78fb      	ldrb	r3, [r7, #3]
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d101      	bne.n	8001e10 <HAL_PCD_EP_Close+0x6a>
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	e00e      	b.n	8001e2e <HAL_PCD_EP_Close+0x88>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68f9      	ldr	r1, [r7, #12]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f002 fbe4 	bl	80045ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b086      	sub	sp, #24
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	60f8      	str	r0, [r7, #12]
 8001e3e:	607a      	str	r2, [r7, #4]
 8001e40:	603b      	str	r3, [r7, #0]
 8001e42:	460b      	mov	r3, r1
 8001e44:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e46:	7afb      	ldrb	r3, [r7, #11]
 8001e48:	f003 0207 	and.w	r2, r3, #7
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	2200      	movs	r2, #0
 8001e74:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e76:	7afb      	ldrb	r3, [r7, #11]
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e82:	7afb      	ldrb	r3, [r7, #11]
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d106      	bne.n	8001e9a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6979      	ldr	r1, [r7, #20]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f002 fd96 	bl	80049c4 <USB_EPStartXfer>
 8001e98:	e005      	b.n	8001ea6 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	6979      	ldr	r1, [r7, #20]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f002 fd8f 	bl	80049c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3718      	adds	r7, #24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001ebc:	78fb      	ldrb	r3, [r7, #3]
 8001ebe:	f003 0207 	and.w	r2, r3, #7
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	440b      	add	r3, r1
 8001ece:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001ed2:	681b      	ldr	r3, [r3, #0]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bc80      	pop	{r7}
 8001edc:	4770      	bx	lr

08001ede <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b086      	sub	sp, #24
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	60f8      	str	r0, [r7, #12]
 8001ee6:	607a      	str	r2, [r7, #4]
 8001ee8:	603b      	str	r3, [r7, #0]
 8001eea:	460b      	mov	r3, r1
 8001eec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eee:	7afb      	ldrb	r3, [r7, #11]
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	1c5a      	adds	r2, r3, #1
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4413      	add	r3, r2
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	4413      	add	r3, r2
 8001f02:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	2200      	movs	r2, #0
 8001f22:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	2201      	movs	r2, #1
 8001f28:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f2a:	7afb      	ldrb	r3, [r7, #11]
 8001f2c:	f003 0307 	and.w	r3, r3, #7
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f36:	7afb      	ldrb	r3, [r7, #11]
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d106      	bne.n	8001f4e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6979      	ldr	r1, [r7, #20]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f002 fd3c 	bl	80049c4 <USB_EPStartXfer>
 8001f4c:	e005      	b.n	8001f5a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6979      	ldr	r1, [r7, #20]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f002 fd35 	bl	80049c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f70:	78fb      	ldrb	r3, [r7, #3]
 8001f72:	f003 0207 	and.w	r2, r3, #7
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d901      	bls.n	8001f82 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e04c      	b.n	800201c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	da0e      	bge.n	8001fa8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f8a:	78fb      	ldrb	r3, [r7, #3]
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	1c5a      	adds	r2, r3, #1
 8001f92:	4613      	mov	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	705a      	strb	r2, [r3, #1]
 8001fa6:	e00c      	b.n	8001fc2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001fa8:	78fa      	ldrb	r2, [r7, #3]
 8001faa:	4613      	mov	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	4413      	add	r3, r2
 8001fba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d101      	bne.n	8001fe2 <HAL_PCD_EP_SetStall+0x7e>
 8001fde:	2302      	movs	r3, #2
 8001fe0:	e01c      	b.n	800201c <HAL_PCD_EP_SetStall+0xb8>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68f9      	ldr	r1, [r7, #12]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f004 fb1f 	bl	8006634 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ff6:	78fb      	ldrb	r3, [r7, #3]
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d108      	bne.n	8002012 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800200a:	4619      	mov	r1, r3
 800200c:	4610      	mov	r0, r2
 800200e:	f004 fc44 	bl	800689a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002030:	78fb      	ldrb	r3, [r7, #3]
 8002032:	f003 020f 	and.w	r2, r3, #15
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	429a      	cmp	r2, r3
 800203c:	d901      	bls.n	8002042 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e040      	b.n	80020c4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002042:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002046:	2b00      	cmp	r3, #0
 8002048:	da0e      	bge.n	8002068 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800204a:	78fb      	ldrb	r3, [r7, #3]
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	1c5a      	adds	r2, r3, #1
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	4413      	add	r3, r2
 800205e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2201      	movs	r2, #1
 8002064:	705a      	strb	r2, [r3, #1]
 8002066:	e00e      	b.n	8002086 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002068:	78fb      	ldrb	r3, [r7, #3]
 800206a:	f003 0207 	and.w	r2, r3, #7
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	4413      	add	r3, r2
 800207e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800208c:	78fb      	ldrb	r3, [r7, #3]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	b2da      	uxtb	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d101      	bne.n	80020a6 <HAL_PCD_EP_ClrStall+0x82>
 80020a2:	2302      	movs	r3, #2
 80020a4:	e00e      	b.n	80020c4 <HAL_PCD_EP_ClrStall+0xa0>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68f9      	ldr	r1, [r7, #12]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f004 fb0d 	bl	80066d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b08e      	sub	sp, #56	; 0x38
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80020d4:	e2ec      	b.n	80026b0 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020de:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80020e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	f003 030f 	and.w	r3, r3, #15
 80020e8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80020ec:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f040 8161 	bne.w	80023b8 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80020f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020f8:	f003 0310 	and.w	r3, r3, #16
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d152      	bne.n	80021a6 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	881b      	ldrh	r3, [r3, #0]
 8002106:	b29b      	uxth	r3, r3
 8002108:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800210c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002110:	81fb      	strh	r3, [r7, #14]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	89fb      	ldrh	r3, [r7, #14]
 8002118:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800211c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002120:	b29b      	uxth	r3, r3
 8002122:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3328      	adds	r3, #40	; 0x28
 8002128:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002132:	b29b      	uxth	r3, r3
 8002134:	461a      	mov	r2, r3
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	4413      	add	r3, r2
 800213e:	3302      	adds	r3, #2
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	6812      	ldr	r2, [r2, #0]
 8002146:	4413      	add	r3, r2
 8002148:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800214c:	881b      	ldrh	r3, [r3, #0]
 800214e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002158:	695a      	ldr	r2, [r3, #20]
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	441a      	add	r2, r3
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002162:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002164:	2100      	movs	r1, #0
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f006 f9eb 	bl	8008542 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b00      	cmp	r3, #0
 8002176:	f000 829b 	beq.w	80026b0 <PCD_EP_ISR_Handler+0x5e4>
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	2b00      	cmp	r3, #0
 8002180:	f040 8296 	bne.w	80026b0 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800218a:	b2db      	uxtb	r3, r3
 800218c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002190:	b2da      	uxtb	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	b292      	uxth	r2, r2
 8002198:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80021a4:	e284      	b.n	80026b0 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	881b      	ldrh	r3, [r3, #0]
 80021b4:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80021b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80021b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d034      	beq.n	800222a <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	461a      	mov	r2, r3
 80021cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	4413      	add	r3, r2
 80021d4:	3306      	adds	r3, #6
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	6812      	ldr	r2, [r2, #0]
 80021dc:	4413      	add	r3, r2
 80021de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021e2:	881b      	ldrh	r3, [r3, #0]
 80021e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ea:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6818      	ldr	r0, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80021fe:	b29b      	uxth	r3, r3
 8002200:	f004 fb9b 	bl	800693a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	881b      	ldrh	r3, [r3, #0]
 800220a:	b29a      	uxth	r2, r3
 800220c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002210:	4013      	ands	r3, r2
 8002212:	823b      	strh	r3, [r7, #16]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	8a3a      	ldrh	r2, [r7, #16]
 800221a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800221e:	b292      	uxth	r2, r2
 8002220:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f006 f960 	bl	80084e8 <HAL_PCD_SetupStageCallback>
 8002228:	e242      	b.n	80026b0 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800222a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800222e:	2b00      	cmp	r3, #0
 8002230:	f280 823e 	bge.w	80026b0 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	b29a      	uxth	r2, r3
 800223c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002240:	4013      	ands	r3, r2
 8002242:	83bb      	strh	r3, [r7, #28]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	8bba      	ldrh	r2, [r7, #28]
 800224a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800224e:	b292      	uxth	r2, r2
 8002250:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800225a:	b29b      	uxth	r3, r3
 800225c:	461a      	mov	r2, r3
 800225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	4413      	add	r3, r2
 8002266:	3306      	adds	r3, #6
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	6812      	ldr	r2, [r2, #0]
 800226e:	4413      	add	r3, r2
 8002270:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002274:	881b      	ldrh	r3, [r3, #0]
 8002276:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d019      	beq.n	80022ba <PCD_EP_ISR_Handler+0x1ee>
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d015      	beq.n	80022ba <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6818      	ldr	r0, [r3, #0]
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	6959      	ldr	r1, [r3, #20]
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800229e:	b29b      	uxth	r3, r3
 80022a0:	f004 fb4b 	bl	800693a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80022a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a6:	695a      	ldr	r2, [r3, #20]
 80022a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022aa:	69db      	ldr	r3, [r3, #28]
 80022ac:	441a      	add	r2, r3
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80022b2:	2100      	movs	r1, #0
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f006 f929 	bl	800850c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	881b      	ldrh	r3, [r3, #0]
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f040 81f2 	bne.w	80026b0 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	61bb      	str	r3, [r7, #24]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022da:	b29b      	uxth	r3, r3
 80022dc:	461a      	mov	r2, r3
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	4413      	add	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80022ea:	617b      	str	r3, [r7, #20]
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d112      	bne.n	800231a <PCD_EP_ISR_Handler+0x24e>
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	881b      	ldrh	r3, [r3, #0]
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80022fe:	b29a      	uxth	r2, r3
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	801a      	strh	r2, [r3, #0]
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	881b      	ldrh	r3, [r3, #0]
 8002308:	b29b      	uxth	r3, r3
 800230a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800230e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002312:	b29a      	uxth	r2, r3
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	801a      	strh	r2, [r3, #0]
 8002318:	e02f      	b.n	800237a <PCD_EP_ISR_Handler+0x2ae>
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	2b3e      	cmp	r3, #62	; 0x3e
 8002320:	d813      	bhi.n	800234a <PCD_EP_ISR_Handler+0x27e>
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	085b      	lsrs	r3, r3, #1
 8002328:	633b      	str	r3, [r7, #48]	; 0x30
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b00      	cmp	r3, #0
 8002334:	d002      	beq.n	800233c <PCD_EP_ISR_Handler+0x270>
 8002336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002338:	3301      	adds	r3, #1
 800233a:	633b      	str	r3, [r7, #48]	; 0x30
 800233c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800233e:	b29b      	uxth	r3, r3
 8002340:	029b      	lsls	r3, r3, #10
 8002342:	b29a      	uxth	r2, r3
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	801a      	strh	r2, [r3, #0]
 8002348:	e017      	b.n	800237a <PCD_EP_ISR_Handler+0x2ae>
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	095b      	lsrs	r3, r3, #5
 8002350:	633b      	str	r3, [r7, #48]	; 0x30
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	f003 031f 	and.w	r3, r3, #31
 800235a:	2b00      	cmp	r3, #0
 800235c:	d102      	bne.n	8002364 <PCD_EP_ISR_Handler+0x298>
 800235e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002360:	3b01      	subs	r3, #1
 8002362:	633b      	str	r3, [r7, #48]	; 0x30
 8002364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002366:	b29b      	uxth	r3, r3
 8002368:	029b      	lsls	r3, r3, #10
 800236a:	b29b      	uxth	r3, r3
 800236c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002370:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002374:	b29a      	uxth	r2, r3
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	b29b      	uxth	r3, r3
 8002382:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800238a:	827b      	strh	r3, [r7, #18]
 800238c:	8a7b      	ldrh	r3, [r7, #18]
 800238e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002392:	827b      	strh	r3, [r7, #18]
 8002394:	8a7b      	ldrh	r3, [r7, #18]
 8002396:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800239a:	827b      	strh	r3, [r7, #18]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	8a7b      	ldrh	r3, [r7, #18]
 80023a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	8013      	strh	r3, [r2, #0]
 80023b6:	e17b      	b.n	80026b0 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	461a      	mov	r2, r3
 80023be:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80023ca:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f280 80ea 	bge.w	80025a8 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	461a      	mov	r2, r3
 80023da:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80023ea:	4013      	ands	r3, r2
 80023ec:	853b      	strh	r3, [r7, #40]	; 0x28
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	461a      	mov	r2, r3
 80023f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80023fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002402:	b292      	uxth	r2, r2
 8002404:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002406:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800240a:	4613      	mov	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	4413      	add	r3, r2
 800241a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	7b1b      	ldrb	r3, [r3, #12]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d122      	bne.n	800246a <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800242c:	b29b      	uxth	r3, r3
 800242e:	461a      	mov	r2, r3
 8002430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	4413      	add	r3, r2
 8002438:	3306      	adds	r3, #6
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	6812      	ldr	r2, [r2, #0]
 8002440:	4413      	add	r3, r2
 8002442:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800244c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800244e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 8087 	beq.w	8002564 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6818      	ldr	r0, [r3, #0]
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	6959      	ldr	r1, [r3, #20]
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	88da      	ldrh	r2, [r3, #6]
 8002462:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002464:	f004 fa69 	bl	800693a <USB_ReadPMA>
 8002468:	e07c      	b.n	8002564 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	78db      	ldrb	r3, [r3, #3]
 800246e:	2b02      	cmp	r3, #2
 8002470:	d108      	bne.n	8002484 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002472:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002474:	461a      	mov	r2, r3
 8002476:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 f927 	bl	80026cc <HAL_PCD_EP_DB_Receive>
 800247e:	4603      	mov	r3, r0
 8002480:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002482:	e06f      	b.n	8002564 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	461a      	mov	r2, r3
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	881b      	ldrh	r3, [r3, #0]
 8002494:	b29b      	uxth	r3, r3
 8002496:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800249a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800249e:	847b      	strh	r3, [r7, #34]	; 0x22
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	461a      	mov	r2, r3
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	441a      	add	r2, r3
 80024ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80024b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	461a      	mov	r2, r3
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	881b      	ldrh	r3, [r3, #0]
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d021      	beq.n	8002522 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	461a      	mov	r2, r3
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	4413      	add	r3, r2
 80024f2:	3302      	adds	r3, #2
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	6812      	ldr	r2, [r2, #0]
 80024fa:	4413      	add	r3, r2
 80024fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002500:	881b      	ldrh	r3, [r3, #0]
 8002502:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002506:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002508:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800250a:	2b00      	cmp	r3, #0
 800250c:	d02a      	beq.n	8002564 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6818      	ldr	r0, [r3, #0]
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	6959      	ldr	r1, [r3, #20]
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	891a      	ldrh	r2, [r3, #8]
 800251a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800251c:	f004 fa0d 	bl	800693a <USB_ReadPMA>
 8002520:	e020      	b.n	8002564 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800252a:	b29b      	uxth	r3, r3
 800252c:	461a      	mov	r2, r3
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	4413      	add	r3, r2
 8002536:	3306      	adds	r3, #6
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	6812      	ldr	r2, [r2, #0]
 800253e:	4413      	add	r3, r2
 8002540:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002544:	881b      	ldrh	r3, [r3, #0]
 8002546:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800254a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800254c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800254e:	2b00      	cmp	r3, #0
 8002550:	d008      	beq.n	8002564 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6818      	ldr	r0, [r3, #0]
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	6959      	ldr	r1, [r3, #20]
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	895a      	ldrh	r2, [r3, #10]
 800255e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002560:	f004 f9eb 	bl	800693a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	69da      	ldr	r2, [r3, #28]
 8002568:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800256a:	441a      	add	r2, r3
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	695a      	ldr	r2, [r3, #20]
 8002574:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002576:	441a      	add	r2, r3
 8002578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d004      	beq.n	800258e <PCD_EP_ISR_Handler+0x4c2>
 8002584:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	429a      	cmp	r2, r3
 800258c:	d206      	bcs.n	800259c <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	4619      	mov	r1, r3
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f005 ffb9 	bl	800850c <HAL_PCD_DataOutStageCallback>
 800259a:	e005      	b.n	80025a8 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025a2:	4618      	mov	r0, r3
 80025a4:	f002 fa0e 	bl	80049c4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80025a8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80025aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d07e      	beq.n	80026b0 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80025b2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025b6:	1c5a      	adds	r2, r3, #1
 80025b8:	4613      	mov	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4413      	add	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	4413      	add	r3, r2
 80025c4:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	461a      	mov	r2, r3
 80025cc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80025dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025e0:	843b      	strh	r3, [r7, #32]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	461a      	mov	r2, r3
 80025e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	441a      	add	r2, r3
 80025f0:	8c3b      	ldrh	r3, [r7, #32]
 80025f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	78db      	ldrb	r3, [r3, #3]
 8002602:	2b03      	cmp	r3, #3
 8002604:	d00c      	beq.n	8002620 <PCD_EP_ISR_Handler+0x554>
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	78db      	ldrb	r3, [r3, #3]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d008      	beq.n	8002620 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002612:	2b02      	cmp	r3, #2
 8002614:	d146      	bne.n	80026a4 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002616:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261c:	2b00      	cmp	r3, #0
 800261e:	d141      	bne.n	80026a4 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002628:	b29b      	uxth	r3, r3
 800262a:	461a      	mov	r2, r3
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	4413      	add	r3, r2
 8002634:	3302      	adds	r3, #2
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6812      	ldr	r2, [r2, #0]
 800263c:	4413      	add	r3, r2
 800263e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002642:	881b      	ldrh	r3, [r3, #0]
 8002644:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002648:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	699a      	ldr	r2, [r3, #24]
 800264e:	8bfb      	ldrh	r3, [r7, #30]
 8002650:	429a      	cmp	r2, r3
 8002652:	d906      	bls.n	8002662 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	699a      	ldr	r2, [r3, #24]
 8002658:	8bfb      	ldrh	r3, [r7, #30]
 800265a:	1ad2      	subs	r2, r2, r3
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	619a      	str	r2, [r3, #24]
 8002660:	e002      	b.n	8002668 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	2200      	movs	r2, #0
 8002666:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d106      	bne.n	800267e <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	4619      	mov	r1, r3
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f005 ff63 	bl	8008542 <HAL_PCD_DataInStageCallback>
 800267c:	e018      	b.n	80026b0 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	695a      	ldr	r2, [r3, #20]
 8002682:	8bfb      	ldrh	r3, [r7, #30]
 8002684:	441a      	add	r2, r3
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	69da      	ldr	r2, [r3, #28]
 800268e:	8bfb      	ldrh	r3, [r7, #30]
 8002690:	441a      	add	r2, r3
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800269c:	4618      	mov	r0, r3
 800269e:	f002 f991 	bl	80049c4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80026a2:	e005      	b.n	80026b0 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80026a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026a6:	461a      	mov	r2, r3
 80026a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f91b 	bl	80028e6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	b21b      	sxth	r3, r3
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f6ff ad0a 	blt.w	80020d6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3738      	adds	r7, #56	; 0x38
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b088      	sub	sp, #32
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	4613      	mov	r3, r2
 80026d8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80026da:	88fb      	ldrh	r3, [r7, #6]
 80026dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d07e      	beq.n	80027e2 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	461a      	mov	r2, r3
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	4413      	add	r3, r2
 80026f8:	3302      	adds	r3, #2
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	6812      	ldr	r2, [r2, #0]
 8002700:	4413      	add	r3, r2
 8002702:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002706:	881b      	ldrh	r3, [r3, #0]
 8002708:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800270c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	699a      	ldr	r2, [r3, #24]
 8002712:	8b7b      	ldrh	r3, [r7, #26]
 8002714:	429a      	cmp	r2, r3
 8002716:	d306      	bcc.n	8002726 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	699a      	ldr	r2, [r3, #24]
 800271c:	8b7b      	ldrh	r3, [r7, #26]
 800271e:	1ad2      	subs	r2, r2, r3
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	619a      	str	r2, [r3, #24]
 8002724:	e002      	b.n	800272c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	2200      	movs	r2, #0
 800272a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d123      	bne.n	800277c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	461a      	mov	r2, r3
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4413      	add	r3, r2
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	b29b      	uxth	r3, r3
 8002746:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800274a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800274e:	833b      	strh	r3, [r7, #24]
 8002750:	8b3b      	ldrh	r3, [r7, #24]
 8002752:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002756:	833b      	strh	r3, [r7, #24]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	461a      	mov	r2, r3
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	441a      	add	r2, r3
 8002766:	8b3b      	ldrh	r3, [r7, #24]
 8002768:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800276c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002770:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002778:	b29b      	uxth	r3, r3
 800277a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800277c:	88fb      	ldrh	r3, [r7, #6]
 800277e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002782:	2b00      	cmp	r3, #0
 8002784:	d01f      	beq.n	80027c6 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	461a      	mov	r2, r3
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4413      	add	r3, r2
 8002794:	881b      	ldrh	r3, [r3, #0]
 8002796:	b29b      	uxth	r3, r3
 8002798:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800279c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027a0:	82fb      	strh	r3, [r7, #22]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	461a      	mov	r2, r3
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	441a      	add	r2, r3
 80027b0:	8afb      	ldrh	r3, [r7, #22]
 80027b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80027c6:	8b7b      	ldrh	r3, [r7, #26]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f000 8087 	beq.w	80028dc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6818      	ldr	r0, [r3, #0]
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	6959      	ldr	r1, [r3, #20]
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	891a      	ldrh	r2, [r3, #8]
 80027da:	8b7b      	ldrh	r3, [r7, #26]
 80027dc:	f004 f8ad 	bl	800693a <USB_ReadPMA>
 80027e0:	e07c      	b.n	80028dc <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	461a      	mov	r2, r3
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	4413      	add	r3, r2
 80027f6:	3306      	adds	r3, #6
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	6812      	ldr	r2, [r2, #0]
 80027fe:	4413      	add	r3, r2
 8002800:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002804:	881b      	ldrh	r3, [r3, #0]
 8002806:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800280a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	699a      	ldr	r2, [r3, #24]
 8002810:	8b7b      	ldrh	r3, [r7, #26]
 8002812:	429a      	cmp	r2, r3
 8002814:	d306      	bcc.n	8002824 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	699a      	ldr	r2, [r3, #24]
 800281a:	8b7b      	ldrh	r3, [r7, #26]
 800281c:	1ad2      	subs	r2, r2, r3
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	619a      	str	r2, [r3, #24]
 8002822:	e002      	b.n	800282a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	2200      	movs	r2, #0
 8002828:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d123      	bne.n	800287a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	461a      	mov	r2, r3
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	881b      	ldrh	r3, [r3, #0]
 8002842:	b29b      	uxth	r3, r3
 8002844:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800284c:	83fb      	strh	r3, [r7, #30]
 800284e:	8bfb      	ldrh	r3, [r7, #30]
 8002850:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002854:	83fb      	strh	r3, [r7, #30]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	461a      	mov	r2, r3
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	441a      	add	r2, r3
 8002864:	8bfb      	ldrh	r3, [r7, #30]
 8002866:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800286a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800286e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002876:	b29b      	uxth	r3, r3
 8002878:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800287a:	88fb      	ldrh	r3, [r7, #6]
 800287c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002880:	2b00      	cmp	r3, #0
 8002882:	d11f      	bne.n	80028c4 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	461a      	mov	r2, r3
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	881b      	ldrh	r3, [r3, #0]
 8002894:	b29b      	uxth	r3, r3
 8002896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800289a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800289e:	83bb      	strh	r3, [r7, #28]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	461a      	mov	r2, r3
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	441a      	add	r2, r3
 80028ae:	8bbb      	ldrh	r3, [r7, #28]
 80028b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80028c4:	8b7b      	ldrh	r3, [r7, #26]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d008      	beq.n	80028dc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6818      	ldr	r0, [r3, #0]
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	6959      	ldr	r1, [r3, #20]
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	895a      	ldrh	r2, [r3, #10]
 80028d6:	8b7b      	ldrh	r3, [r7, #26]
 80028d8:	f004 f82f 	bl	800693a <USB_ReadPMA>
    }
  }

  return count;
 80028dc:	8b7b      	ldrh	r3, [r7, #26]
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3720      	adds	r7, #32
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b0a2      	sub	sp, #136	; 0x88
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	60f8      	str	r0, [r7, #12]
 80028ee:	60b9      	str	r1, [r7, #8]
 80028f0:	4613      	mov	r3, r2
 80028f2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80028f4:	88fb      	ldrh	r3, [r7, #6]
 80028f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f000 81c7 	beq.w	8002c8e <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002908:	b29b      	uxth	r3, r3
 800290a:	461a      	mov	r2, r3
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	4413      	add	r3, r2
 8002914:	3302      	adds	r3, #2
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	6812      	ldr	r2, [r2, #0]
 800291c:	4413      	add	r3, r2
 800291e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002922:	881b      	ldrh	r3, [r3, #0]
 8002924:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002928:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	699a      	ldr	r2, [r3, #24]
 8002930:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002934:	429a      	cmp	r2, r3
 8002936:	d907      	bls.n	8002948 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	699a      	ldr	r2, [r3, #24]
 800293c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002940:	1ad2      	subs	r2, r2, r3
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	619a      	str	r2, [r3, #24]
 8002946:	e002      	b.n	800294e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	2200      	movs	r2, #0
 800294c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	2b00      	cmp	r3, #0
 8002954:	f040 80b9 	bne.w	8002aca <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	785b      	ldrb	r3, [r3, #1]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d126      	bne.n	80029ae <HAL_PCD_EP_DB_Transmit+0xc8>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	62bb      	str	r3, [r7, #40]	; 0x28
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800296e:	b29b      	uxth	r3, r3
 8002970:	461a      	mov	r2, r3
 8002972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002974:	4413      	add	r3, r2
 8002976:	62bb      	str	r3, [r7, #40]	; 0x28
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	011a      	lsls	r2, r3, #4
 800297e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002980:	4413      	add	r3, r2
 8002982:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002986:	627b      	str	r3, [r7, #36]	; 0x24
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	881b      	ldrh	r3, [r3, #0]
 800298c:	b29b      	uxth	r3, r3
 800298e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002992:	b29a      	uxth	r2, r3
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	801a      	strh	r2, [r3, #0]
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	881b      	ldrh	r3, [r3, #0]
 800299c:	b29b      	uxth	r3, r3
 800299e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	801a      	strh	r2, [r3, #0]
 80029ac:	e01a      	b.n	80029e4 <HAL_PCD_EP_DB_Transmit+0xfe>
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	785b      	ldrb	r3, [r3, #1]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d116      	bne.n	80029e4 <HAL_PCD_EP_DB_Transmit+0xfe>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	633b      	str	r3, [r7, #48]	; 0x30
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	461a      	mov	r2, r3
 80029c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ca:	4413      	add	r3, r2
 80029cc:	633b      	str	r3, [r7, #48]	; 0x30
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	011a      	lsls	r2, r3, #4
 80029d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d6:	4413      	add	r3, r2
 80029d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80029dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e0:	2200      	movs	r2, #0
 80029e2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	623b      	str	r3, [r7, #32]
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	785b      	ldrb	r3, [r3, #1]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d126      	bne.n	8002a40 <HAL_PCD_EP_DB_Transmit+0x15a>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	61bb      	str	r3, [r7, #24]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	461a      	mov	r2, r3
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	4413      	add	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	011a      	lsls	r2, r3, #4
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	4413      	add	r3, r2
 8002a14:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a18:	617b      	str	r3, [r7, #20]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	881b      	ldrh	r3, [r3, #0]
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	801a      	strh	r2, [r3, #0]
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	881b      	ldrh	r3, [r3, #0]
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	801a      	strh	r2, [r3, #0]
 8002a3e:	e017      	b.n	8002a70 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	785b      	ldrb	r3, [r3, #1]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d113      	bne.n	8002a70 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	461a      	mov	r2, r3
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	4413      	add	r3, r2
 8002a58:	623b      	str	r3, [r7, #32]
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	011a      	lsls	r2, r3, #4
 8002a60:	6a3b      	ldr	r3, [r7, #32]
 8002a62:	4413      	add	r3, r2
 8002a64:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a68:	61fb      	str	r3, [r7, #28]
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	4619      	mov	r1, r3
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f005 fd63 	bl	8008542 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a7c:	88fb      	ldrh	r3, [r7, #6]
 8002a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f000 82d4 	beq.w	8003030 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	881b      	ldrh	r3, [r3, #0]
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aa2:	827b      	strh	r3, [r7, #18]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	441a      	add	r2, r3
 8002ab2:	8a7b      	ldrh	r3, [r7, #18]
 8002ab4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ab8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002abc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	8013      	strh	r3, [r2, #0]
 8002ac8:	e2b2      	b.n	8003030 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002aca:	88fb      	ldrh	r3, [r7, #6]
 8002acc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d021      	beq.n	8002b18 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	881b      	ldrh	r3, [r3, #0]
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aee:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	461a      	mov	r2, r3
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	441a      	add	r2, r3
 8002b00:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002b04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	f040 8286 	bne.w	8003030 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	695a      	ldr	r2, [r3, #20]
 8002b28:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b2c:	441a      	add	r2, r3
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	69da      	ldr	r2, [r3, #28]
 8002b36:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b3a:	441a      	add	r2, r3
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	6a1a      	ldr	r2, [r3, #32]
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d309      	bcc.n	8002b60 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	6a1a      	ldr	r2, [r3, #32]
 8002b56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b58:	1ad2      	subs	r2, r2, r3
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	621a      	str	r2, [r3, #32]
 8002b5e:	e015      	b.n	8002b8c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d107      	bne.n	8002b78 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002b68:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b6c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002b76:	e009      	b.n	8002b8c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	785b      	ldrb	r3, [r3, #1]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d155      	bne.n	8002c40 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba8:	4413      	add	r3, r2
 8002baa:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	011a      	lsls	r2, r3, #4
 8002bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb4:	4413      	add	r3, r2
 8002bb6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002bba:	637b      	str	r3, [r7, #52]	; 0x34
 8002bbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d112      	bne.n	8002be8 <HAL_PCD_EP_DB_Transmit+0x302>
 8002bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc4:	881b      	ldrh	r3, [r3, #0]
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd0:	801a      	strh	r2, [r3, #0]
 8002bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd4:	881b      	ldrh	r3, [r3, #0]
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be4:	801a      	strh	r2, [r3, #0]
 8002be6:	e047      	b.n	8002c78 <HAL_PCD_EP_DB_Transmit+0x392>
 8002be8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bea:	2b3e      	cmp	r3, #62	; 0x3e
 8002bec:	d811      	bhi.n	8002c12 <HAL_PCD_EP_DB_Transmit+0x32c>
 8002bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bf0:	085b      	lsrs	r3, r3, #1
 8002bf2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d002      	beq.n	8002c04 <HAL_PCD_EP_DB_Transmit+0x31e>
 8002bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c00:	3301      	adds	r3, #1
 8002c02:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	029b      	lsls	r3, r3, #10
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c0e:	801a      	strh	r2, [r3, #0]
 8002c10:	e032      	b.n	8002c78 <HAL_PCD_EP_DB_Transmit+0x392>
 8002c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c14:	095b      	lsrs	r3, r3, #5
 8002c16:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c1a:	f003 031f 	and.w	r3, r3, #31
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d102      	bne.n	8002c28 <HAL_PCD_EP_DB_Transmit+0x342>
 8002c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c24:	3b01      	subs	r3, #1
 8002c26:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	029b      	lsls	r3, r3, #10
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c3c:	801a      	strh	r2, [r3, #0]
 8002c3e:	e01b      	b.n	8002c78 <HAL_PCD_EP_DB_Transmit+0x392>
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	785b      	ldrb	r3, [r3, #1]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d117      	bne.n	8002c78 <HAL_PCD_EP_DB_Transmit+0x392>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	643b      	str	r3, [r7, #64]	; 0x40
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	461a      	mov	r2, r3
 8002c5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c5c:	4413      	add	r3, r2
 8002c5e:	643b      	str	r3, [r7, #64]	; 0x40
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	011a      	lsls	r2, r3, #4
 8002c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c68:	4413      	add	r3, r2
 8002c6a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c76:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6818      	ldr	r0, [r3, #0]
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	6959      	ldr	r1, [r3, #20]
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	891a      	ldrh	r2, [r3, #8]
 8002c84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	f003 fe12 	bl	80068b0 <USB_WritePMA>
 8002c8c:	e1d0      	b.n	8003030 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	461a      	mov	r2, r3
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	4413      	add	r3, r2
 8002ca2:	3306      	adds	r3, #6
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	6812      	ldr	r2, [r2, #0]
 8002caa:	4413      	add	r3, r2
 8002cac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cb0:	881b      	ldrh	r3, [r3, #0]
 8002cb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cb6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	699a      	ldr	r2, [r3, #24]
 8002cbe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d307      	bcc.n	8002cd6 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	699a      	ldr	r2, [r3, #24]
 8002cca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cce:	1ad2      	subs	r2, r2, r3
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	619a      	str	r2, [r3, #24]
 8002cd4:	e002      	b.n	8002cdc <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f040 80c4 	bne.w	8002e6e <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	785b      	ldrb	r3, [r3, #1]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d126      	bne.n	8002d3c <HAL_PCD_EP_DB_Transmit+0x456>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	461a      	mov	r2, r3
 8002d00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d02:	4413      	add	r3, r2
 8002d04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	011a      	lsls	r2, r3, #4
 8002d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d0e:	4413      	add	r3, r2
 8002d10:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d14:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d18:	881b      	ldrh	r3, [r3, #0]
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d24:	801a      	strh	r2, [r3, #0]
 8002d26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d28:	881b      	ldrh	r3, [r3, #0]
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d38:	801a      	strh	r2, [r3, #0]
 8002d3a:	e01a      	b.n	8002d72 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	785b      	ldrb	r3, [r3, #1]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d116      	bne.n	8002d72 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	677b      	str	r3, [r7, #116]	; 0x74
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	461a      	mov	r2, r3
 8002d56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d58:	4413      	add	r3, r2
 8002d5a:	677b      	str	r3, [r7, #116]	; 0x74
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	011a      	lsls	r2, r3, #4
 8002d62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d64:	4413      	add	r3, r2
 8002d66:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d6a:	673b      	str	r3, [r7, #112]	; 0x70
 8002d6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d6e:	2200      	movs	r2, #0
 8002d70:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	785b      	ldrb	r3, [r3, #1]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d12f      	bne.n	8002de0 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	461a      	mov	r2, r3
 8002d94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d98:	4413      	add	r3, r2
 8002d9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	011a      	lsls	r2, r3, #4
 8002da4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002da8:	4413      	add	r3, r2
 8002daa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002dae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002db2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002db6:	881b      	ldrh	r3, [r3, #0]
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dc4:	801a      	strh	r2, [r3, #0]
 8002dc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ddc:	801a      	strh	r2, [r3, #0]
 8002dde:	e017      	b.n	8002e10 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	785b      	ldrb	r3, [r3, #1]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d113      	bne.n	8002e10 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	461a      	mov	r2, r3
 8002df4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002df6:	4413      	add	r3, r2
 8002df8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	011a      	lsls	r2, r3, #4
 8002e00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e02:	4413      	add	r3, r2
 8002e04:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e08:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	4619      	mov	r1, r3
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f005 fb93 	bl	8008542 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e1c:	88fb      	ldrh	r3, [r7, #6]
 8002e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f040 8104 	bne.w	8003030 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	4413      	add	r3, r2
 8002e36:	881b      	ldrh	r3, [r3, #0]
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e42:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	441a      	add	r2, r3
 8002e54:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002e58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	8013      	strh	r3, [r2, #0]
 8002e6c:	e0e0      	b.n	8003030 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e6e:	88fb      	ldrh	r3, [r7, #6]
 8002e70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d121      	bne.n	8002ebc <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4413      	add	r3, r2
 8002e86:	881b      	ldrh	r3, [r3, #0]
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e92:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	441a      	add	r2, r3
 8002ea4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002ea8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002eac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	f040 80b4 	bne.w	8003030 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	695a      	ldr	r2, [r3, #20]
 8002ecc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ed0:	441a      	add	r2, r3
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	69da      	ldr	r2, [r3, #28]
 8002eda:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ede:	441a      	add	r2, r3
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	6a1a      	ldr	r2, [r3, #32]
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d309      	bcc.n	8002f04 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	6a1a      	ldr	r2, [r3, #32]
 8002efa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002efc:	1ad2      	subs	r2, r2, r3
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	621a      	str	r2, [r3, #32]
 8002f02:	e015      	b.n	8002f30 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d107      	bne.n	8002f1c <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002f0c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f10:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002f1a:	e009      	b.n	8002f30 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	2200      	movs	r2, #0
 8002f26:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	667b      	str	r3, [r7, #100]	; 0x64
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	785b      	ldrb	r3, [r3, #1]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d155      	bne.n	8002fea <HAL_PCD_EP_DB_Transmit+0x704>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	461a      	mov	r2, r3
 8002f50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f52:	4413      	add	r3, r2
 8002f54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	011a      	lsls	r2, r3, #4
 8002f5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f5e:	4413      	add	r3, r2
 8002f60:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f64:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d112      	bne.n	8002f92 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002f6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f6e:	881b      	ldrh	r3, [r3, #0]
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f7a:	801a      	strh	r2, [r3, #0]
 8002f7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f7e:	881b      	ldrh	r3, [r3, #0]
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f8e:	801a      	strh	r2, [r3, #0]
 8002f90:	e044      	b.n	800301c <HAL_PCD_EP_DB_Transmit+0x736>
 8002f92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f94:	2b3e      	cmp	r3, #62	; 0x3e
 8002f96:	d811      	bhi.n	8002fbc <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002f98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f9a:	085b      	lsrs	r3, r3, #1
 8002f9c:	657b      	str	r3, [r7, #84]	; 0x54
 8002f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d002      	beq.n	8002fae <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002fa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002faa:	3301      	adds	r3, #1
 8002fac:	657b      	str	r3, [r7, #84]	; 0x54
 8002fae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	029b      	lsls	r3, r3, #10
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fb8:	801a      	strh	r2, [r3, #0]
 8002fba:	e02f      	b.n	800301c <HAL_PCD_EP_DB_Transmit+0x736>
 8002fbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fbe:	095b      	lsrs	r3, r3, #5
 8002fc0:	657b      	str	r3, [r7, #84]	; 0x54
 8002fc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fc4:	f003 031f 	and.w	r3, r3, #31
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d102      	bne.n	8002fd2 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002fcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	657b      	str	r3, [r7, #84]	; 0x54
 8002fd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	029b      	lsls	r3, r3, #10
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fe6:	801a      	strh	r2, [r3, #0]
 8002fe8:	e018      	b.n	800301c <HAL_PCD_EP_DB_Transmit+0x736>
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	785b      	ldrb	r3, [r3, #1]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d114      	bne.n	800301c <HAL_PCD_EP_DB_Transmit+0x736>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003000:	4413      	add	r3, r2
 8003002:	667b      	str	r3, [r7, #100]	; 0x64
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	011a      	lsls	r2, r3, #4
 800300a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800300c:	4413      	add	r3, r2
 800300e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003012:	663b      	str	r3, [r7, #96]	; 0x60
 8003014:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003016:	b29a      	uxth	r2, r3
 8003018:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800301a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6818      	ldr	r0, [r3, #0]
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	6959      	ldr	r1, [r3, #20]
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	895a      	ldrh	r2, [r3, #10]
 8003028:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800302a:	b29b      	uxth	r3, r3
 800302c:	f003 fc40 	bl	80068b0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	461a      	mov	r2, r3
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	881b      	ldrh	r3, [r3, #0]
 8003040:	b29b      	uxth	r3, r3
 8003042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003046:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800304a:	823b      	strh	r3, [r7, #16]
 800304c:	8a3b      	ldrh	r3, [r7, #16]
 800304e:	f083 0310 	eor.w	r3, r3, #16
 8003052:	823b      	strh	r3, [r7, #16]
 8003054:	8a3b      	ldrh	r3, [r7, #16]
 8003056:	f083 0320 	eor.w	r3, r3, #32
 800305a:	823b      	strh	r3, [r7, #16]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	461a      	mov	r2, r3
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	441a      	add	r2, r3
 800306a:	8a3b      	ldrh	r3, [r7, #16]
 800306c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003070:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003074:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800307c:	b29b      	uxth	r3, r3
 800307e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3788      	adds	r7, #136	; 0x88
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800308a:	b480      	push	{r7}
 800308c:	b087      	sub	sp, #28
 800308e:	af00      	add	r7, sp, #0
 8003090:	60f8      	str	r0, [r7, #12]
 8003092:	607b      	str	r3, [r7, #4]
 8003094:	460b      	mov	r3, r1
 8003096:	817b      	strh	r3, [r7, #10]
 8003098:	4613      	mov	r3, r2
 800309a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800309c:	897b      	ldrh	r3, [r7, #10]
 800309e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00b      	beq.n	80030c0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030a8:	897b      	ldrh	r3, [r7, #10]
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	1c5a      	adds	r2, r3, #1
 80030b0:	4613      	mov	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	4413      	add	r3, r2
 80030bc:	617b      	str	r3, [r7, #20]
 80030be:	e009      	b.n	80030d4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030c0:	897a      	ldrh	r2, [r7, #10]
 80030c2:	4613      	mov	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4413      	add	r3, r2
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	4413      	add	r3, r2
 80030d2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80030d4:	893b      	ldrh	r3, [r7, #8]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d107      	bne.n	80030ea <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2200      	movs	r2, #0
 80030de:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	80da      	strh	r2, [r3, #6]
 80030e8:	e00b      	b.n	8003102 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	2201      	movs	r2, #1
 80030ee:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	0c1b      	lsrs	r3, r3, #16
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	371c      	adds	r7, #28
 8003108:	46bd      	mov	sp, r7
 800310a:	bc80      	pop	{r7}
 800310c:	4770      	bx	lr
	...

08003110 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e272      	b.n	8003608 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	f000 8087 	beq.w	800323e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003130:	4b92      	ldr	r3, [pc, #584]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f003 030c 	and.w	r3, r3, #12
 8003138:	2b04      	cmp	r3, #4
 800313a:	d00c      	beq.n	8003156 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800313c:	4b8f      	ldr	r3, [pc, #572]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f003 030c 	and.w	r3, r3, #12
 8003144:	2b08      	cmp	r3, #8
 8003146:	d112      	bne.n	800316e <HAL_RCC_OscConfig+0x5e>
 8003148:	4b8c      	ldr	r3, [pc, #560]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003154:	d10b      	bne.n	800316e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003156:	4b89      	ldr	r3, [pc, #548]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d06c      	beq.n	800323c <HAL_RCC_OscConfig+0x12c>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d168      	bne.n	800323c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e24c      	b.n	8003608 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003176:	d106      	bne.n	8003186 <HAL_RCC_OscConfig+0x76>
 8003178:	4b80      	ldr	r3, [pc, #512]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a7f      	ldr	r2, [pc, #508]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 800317e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003182:	6013      	str	r3, [r2, #0]
 8003184:	e02e      	b.n	80031e4 <HAL_RCC_OscConfig+0xd4>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10c      	bne.n	80031a8 <HAL_RCC_OscConfig+0x98>
 800318e:	4b7b      	ldr	r3, [pc, #492]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a7a      	ldr	r2, [pc, #488]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003194:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003198:	6013      	str	r3, [r2, #0]
 800319a:	4b78      	ldr	r3, [pc, #480]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a77      	ldr	r2, [pc, #476]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 80031a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031a4:	6013      	str	r3, [r2, #0]
 80031a6:	e01d      	b.n	80031e4 <HAL_RCC_OscConfig+0xd4>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031b0:	d10c      	bne.n	80031cc <HAL_RCC_OscConfig+0xbc>
 80031b2:	4b72      	ldr	r3, [pc, #456]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a71      	ldr	r2, [pc, #452]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 80031b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	4b6f      	ldr	r3, [pc, #444]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a6e      	ldr	r2, [pc, #440]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 80031c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	e00b      	b.n	80031e4 <HAL_RCC_OscConfig+0xd4>
 80031cc:	4b6b      	ldr	r3, [pc, #428]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a6a      	ldr	r2, [pc, #424]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 80031d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031d6:	6013      	str	r3, [r2, #0]
 80031d8:	4b68      	ldr	r3, [pc, #416]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a67      	ldr	r2, [pc, #412]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 80031de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d013      	beq.n	8003214 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ec:	f7fe f818 	bl	8001220 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031f4:	f7fe f814 	bl	8001220 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b64      	cmp	r3, #100	; 0x64
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e200      	b.n	8003608 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003206:	4b5d      	ldr	r3, [pc, #372]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d0f0      	beq.n	80031f4 <HAL_RCC_OscConfig+0xe4>
 8003212:	e014      	b.n	800323e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003214:	f7fe f804 	bl	8001220 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800321c:	f7fe f800 	bl	8001220 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b64      	cmp	r3, #100	; 0x64
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e1ec      	b.n	8003608 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800322e:	4b53      	ldr	r3, [pc, #332]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1f0      	bne.n	800321c <HAL_RCC_OscConfig+0x10c>
 800323a:	e000      	b.n	800323e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800323c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d063      	beq.n	8003312 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800324a:	4b4c      	ldr	r3, [pc, #304]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f003 030c 	and.w	r3, r3, #12
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00b      	beq.n	800326e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003256:	4b49      	ldr	r3, [pc, #292]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f003 030c 	and.w	r3, r3, #12
 800325e:	2b08      	cmp	r3, #8
 8003260:	d11c      	bne.n	800329c <HAL_RCC_OscConfig+0x18c>
 8003262:	4b46      	ldr	r3, [pc, #280]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d116      	bne.n	800329c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800326e:	4b43      	ldr	r3, [pc, #268]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d005      	beq.n	8003286 <HAL_RCC_OscConfig+0x176>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d001      	beq.n	8003286 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e1c0      	b.n	8003608 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003286:	4b3d      	ldr	r3, [pc, #244]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	4939      	ldr	r1, [pc, #228]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003296:	4313      	orrs	r3, r2
 8003298:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800329a:	e03a      	b.n	8003312 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d020      	beq.n	80032e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032a4:	4b36      	ldr	r3, [pc, #216]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 80032a6:	2201      	movs	r2, #1
 80032a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032aa:	f7fd ffb9 	bl	8001220 <HAL_GetTick>
 80032ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032b0:	e008      	b.n	80032c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032b2:	f7fd ffb5 	bl	8001220 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e1a1      	b.n	8003608 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c4:	4b2d      	ldr	r3, [pc, #180]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0f0      	beq.n	80032b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d0:	4b2a      	ldr	r3, [pc, #168]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	4927      	ldr	r1, [pc, #156]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	600b      	str	r3, [r1, #0]
 80032e4:	e015      	b.n	8003312 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032e6:	4b26      	ldr	r3, [pc, #152]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ec:	f7fd ff98 	bl	8001220 <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032f4:	f7fd ff94 	bl	8001220 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e180      	b.n	8003608 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003306:	4b1d      	ldr	r3, [pc, #116]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1f0      	bne.n	80032f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0308 	and.w	r3, r3, #8
 800331a:	2b00      	cmp	r3, #0
 800331c:	d03a      	beq.n	8003394 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d019      	beq.n	800335a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003326:	4b17      	ldr	r3, [pc, #92]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 8003328:	2201      	movs	r2, #1
 800332a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800332c:	f7fd ff78 	bl	8001220 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003334:	f7fd ff74 	bl	8001220 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e160      	b.n	8003608 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003346:	4b0d      	ldr	r3, [pc, #52]	; (800337c <HAL_RCC_OscConfig+0x26c>)
 8003348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d0f0      	beq.n	8003334 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003352:	2001      	movs	r0, #1
 8003354:	f000 fad8 	bl	8003908 <RCC_Delay>
 8003358:	e01c      	b.n	8003394 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800335a:	4b0a      	ldr	r3, [pc, #40]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003360:	f7fd ff5e 	bl	8001220 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003366:	e00f      	b.n	8003388 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003368:	f7fd ff5a 	bl	8001220 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d908      	bls.n	8003388 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e146      	b.n	8003608 <HAL_RCC_OscConfig+0x4f8>
 800337a:	bf00      	nop
 800337c:	40021000 	.word	0x40021000
 8003380:	42420000 	.word	0x42420000
 8003384:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003388:	4b92      	ldr	r3, [pc, #584]	; (80035d4 <HAL_RCC_OscConfig+0x4c4>)
 800338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1e9      	bne.n	8003368 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 80a6 	beq.w	80034ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033a2:	2300      	movs	r3, #0
 80033a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033a6:	4b8b      	ldr	r3, [pc, #556]	; (80035d4 <HAL_RCC_OscConfig+0x4c4>)
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10d      	bne.n	80033ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033b2:	4b88      	ldr	r3, [pc, #544]	; (80035d4 <HAL_RCC_OscConfig+0x4c4>)
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	4a87      	ldr	r2, [pc, #540]	; (80035d4 <HAL_RCC_OscConfig+0x4c4>)
 80033b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033bc:	61d3      	str	r3, [r2, #28]
 80033be:	4b85      	ldr	r3, [pc, #532]	; (80035d4 <HAL_RCC_OscConfig+0x4c4>)
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c6:	60bb      	str	r3, [r7, #8]
 80033c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ca:	2301      	movs	r3, #1
 80033cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ce:	4b82      	ldr	r3, [pc, #520]	; (80035d8 <HAL_RCC_OscConfig+0x4c8>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d118      	bne.n	800340c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033da:	4b7f      	ldr	r3, [pc, #508]	; (80035d8 <HAL_RCC_OscConfig+0x4c8>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a7e      	ldr	r2, [pc, #504]	; (80035d8 <HAL_RCC_OscConfig+0x4c8>)
 80033e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033e6:	f7fd ff1b 	bl	8001220 <HAL_GetTick>
 80033ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ec:	e008      	b.n	8003400 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ee:	f7fd ff17 	bl	8001220 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b64      	cmp	r3, #100	; 0x64
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e103      	b.n	8003608 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003400:	4b75      	ldr	r3, [pc, #468]	; (80035d8 <HAL_RCC_OscConfig+0x4c8>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003408:	2b00      	cmp	r3, #0
 800340a:	d0f0      	beq.n	80033ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d106      	bne.n	8003422 <HAL_RCC_OscConfig+0x312>
 8003414:	4b6f      	ldr	r3, [pc, #444]	; (80035d4 <HAL_RCC_OscConfig+0x4c4>)
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	4a6e      	ldr	r2, [pc, #440]	; (80035d4 <HAL_RCC_OscConfig+0x4c4>)
 800341a:	f043 0301 	orr.w	r3, r3, #1
 800341e:	6213      	str	r3, [r2, #32]
 8003420:	e02d      	b.n	800347e <HAL_RCC_OscConfig+0x36e>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10c      	bne.n	8003444 <HAL_RCC_OscConfig+0x334>
 800342a:	4b6a      	ldr	r3, [pc, #424]	; (80035d4 <HAL_RCC_OscConfig+0x4c4>)
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	4a69      	ldr	r2, [pc, #420]	; (80035d4 <HAL_RCC_OscConfig+0x4c4>)
 8003430:	f023 0301 	bic.w	r3, r3, #1
 8003434:	6213      	str	r3, [r2, #32]
 8003436:	4b67      	ldr	r3, [pc, #412]	; (80035d4 <HAL_RCC_OscConfig+0x4c4>)
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	4a66      	ldr	r2, [pc, #408]	; (80035d4 <HAL_RCC_OscConfig+0x4c4>)
 800343c:	f023 0304 	bic.w	r3, r3, #4
 8003440:	6213      	str	r3, [r2, #32]
 8003442:	e01c      	b.n	800347e <HAL_RCC_OscConfig+0x36e>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	2b05      	cmp	r3, #5
 800344a:	d10c      	bne.n	8003466 <HAL_RCC_OscConfig+0x356>
 800344c:	4b61      	ldr	r3, [pc, #388]	; (80035d4 <HAL_RCC_OscConfig+0x4c4>)
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	4a60      	ldr	r2, [pc, #384]	; (80035d4 <HAL_RCC_OscConfig+0x4c4>)
 8003452:	f043 0304 	orr.w	r3, r3, #4
 8003456:	6213      	str	r3, [r2, #32]
 8003458:	4b5e      	ldr	r3, [pc, #376]	; (80035d4 <HAL_RCC_OscConfig+0x4c4>)
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	4a5d      	ldr	r2, [pc, #372]	; (80035d4 <HAL_RCC_OscConfig+0x4c4>)
 800345e:	f043 0301 	orr.w	r3, r3, #1
 8003462:	6213      	str	r3, [r2, #32]
 8003464:	e00b      	b.n	800347e <HAL_RCC_OscConfig+0x36e>
 8003466:	4b5b      	ldr	r3, [pc, #364]	; (80035d4 <HAL_RCC_OscConfig+0x4c4>)
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	4a5a      	ldr	r2, [pc, #360]	; (80035d4 <HAL_RCC_OscConfig+0x4c4>)
 800346c:	f023 0301 	bic.w	r3, r3, #1
 8003470:	6213      	str	r3, [r2, #32]
 8003472:	4b58      	ldr	r3, [pc, #352]	; (80035d4 <HAL_RCC_OscConfig+0x4c4>)
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	4a57      	ldr	r2, [pc, #348]	; (80035d4 <HAL_RCC_OscConfig+0x4c4>)
 8003478:	f023 0304 	bic.w	r3, r3, #4
 800347c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d015      	beq.n	80034b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003486:	f7fd fecb 	bl	8001220 <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800348c:	e00a      	b.n	80034a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800348e:	f7fd fec7 	bl	8001220 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	f241 3288 	movw	r2, #5000	; 0x1388
 800349c:	4293      	cmp	r3, r2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e0b1      	b.n	8003608 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a4:	4b4b      	ldr	r3, [pc, #300]	; (80035d4 <HAL_RCC_OscConfig+0x4c4>)
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d0ee      	beq.n	800348e <HAL_RCC_OscConfig+0x37e>
 80034b0:	e014      	b.n	80034dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034b2:	f7fd feb5 	bl	8001220 <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034b8:	e00a      	b.n	80034d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ba:	f7fd feb1 	bl	8001220 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e09b      	b.n	8003608 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034d0:	4b40      	ldr	r3, [pc, #256]	; (80035d4 <HAL_RCC_OscConfig+0x4c4>)
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1ee      	bne.n	80034ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034dc:	7dfb      	ldrb	r3, [r7, #23]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d105      	bne.n	80034ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034e2:	4b3c      	ldr	r3, [pc, #240]	; (80035d4 <HAL_RCC_OscConfig+0x4c4>)
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	4a3b      	ldr	r2, [pc, #236]	; (80035d4 <HAL_RCC_OscConfig+0x4c4>)
 80034e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 8087 	beq.w	8003606 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034f8:	4b36      	ldr	r3, [pc, #216]	; (80035d4 <HAL_RCC_OscConfig+0x4c4>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f003 030c 	and.w	r3, r3, #12
 8003500:	2b08      	cmp	r3, #8
 8003502:	d061      	beq.n	80035c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	69db      	ldr	r3, [r3, #28]
 8003508:	2b02      	cmp	r3, #2
 800350a:	d146      	bne.n	800359a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800350c:	4b33      	ldr	r3, [pc, #204]	; (80035dc <HAL_RCC_OscConfig+0x4cc>)
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003512:	f7fd fe85 	bl	8001220 <HAL_GetTick>
 8003516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003518:	e008      	b.n	800352c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800351a:	f7fd fe81 	bl	8001220 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e06d      	b.n	8003608 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800352c:	4b29      	ldr	r3, [pc, #164]	; (80035d4 <HAL_RCC_OscConfig+0x4c4>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1f0      	bne.n	800351a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003540:	d108      	bne.n	8003554 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003542:	4b24      	ldr	r3, [pc, #144]	; (80035d4 <HAL_RCC_OscConfig+0x4c4>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	4921      	ldr	r1, [pc, #132]	; (80035d4 <HAL_RCC_OscConfig+0x4c4>)
 8003550:	4313      	orrs	r3, r2
 8003552:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003554:	4b1f      	ldr	r3, [pc, #124]	; (80035d4 <HAL_RCC_OscConfig+0x4c4>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a19      	ldr	r1, [r3, #32]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	430b      	orrs	r3, r1
 8003566:	491b      	ldr	r1, [pc, #108]	; (80035d4 <HAL_RCC_OscConfig+0x4c4>)
 8003568:	4313      	orrs	r3, r2
 800356a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800356c:	4b1b      	ldr	r3, [pc, #108]	; (80035dc <HAL_RCC_OscConfig+0x4cc>)
 800356e:	2201      	movs	r2, #1
 8003570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003572:	f7fd fe55 	bl	8001220 <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800357a:	f7fd fe51 	bl	8001220 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e03d      	b.n	8003608 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800358c:	4b11      	ldr	r3, [pc, #68]	; (80035d4 <HAL_RCC_OscConfig+0x4c4>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0f0      	beq.n	800357a <HAL_RCC_OscConfig+0x46a>
 8003598:	e035      	b.n	8003606 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800359a:	4b10      	ldr	r3, [pc, #64]	; (80035dc <HAL_RCC_OscConfig+0x4cc>)
 800359c:	2200      	movs	r2, #0
 800359e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a0:	f7fd fe3e 	bl	8001220 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035a8:	f7fd fe3a 	bl	8001220 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e026      	b.n	8003608 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035ba:	4b06      	ldr	r3, [pc, #24]	; (80035d4 <HAL_RCC_OscConfig+0x4c4>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1f0      	bne.n	80035a8 <HAL_RCC_OscConfig+0x498>
 80035c6:	e01e      	b.n	8003606 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	69db      	ldr	r3, [r3, #28]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d107      	bne.n	80035e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e019      	b.n	8003608 <HAL_RCC_OscConfig+0x4f8>
 80035d4:	40021000 	.word	0x40021000
 80035d8:	40007000 	.word	0x40007000
 80035dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035e0:	4b0b      	ldr	r3, [pc, #44]	; (8003610 <HAL_RCC_OscConfig+0x500>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d106      	bne.n	8003602 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035fe:	429a      	cmp	r2, r3
 8003600:	d001      	beq.n	8003606 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e000      	b.n	8003608 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3718      	adds	r7, #24
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	40021000 	.word	0x40021000

08003614 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e0d0      	b.n	80037ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003628:	4b6a      	ldr	r3, [pc, #424]	; (80037d4 <HAL_RCC_ClockConfig+0x1c0>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	429a      	cmp	r2, r3
 8003634:	d910      	bls.n	8003658 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003636:	4b67      	ldr	r3, [pc, #412]	; (80037d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f023 0207 	bic.w	r2, r3, #7
 800363e:	4965      	ldr	r1, [pc, #404]	; (80037d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	4313      	orrs	r3, r2
 8003644:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003646:	4b63      	ldr	r3, [pc, #396]	; (80037d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	429a      	cmp	r2, r3
 8003652:	d001      	beq.n	8003658 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e0b8      	b.n	80037ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d020      	beq.n	80036a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b00      	cmp	r3, #0
 800366e:	d005      	beq.n	800367c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003670:	4b59      	ldr	r3, [pc, #356]	; (80037d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	4a58      	ldr	r2, [pc, #352]	; (80037d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003676:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800367a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0308 	and.w	r3, r3, #8
 8003684:	2b00      	cmp	r3, #0
 8003686:	d005      	beq.n	8003694 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003688:	4b53      	ldr	r3, [pc, #332]	; (80037d8 <HAL_RCC_ClockConfig+0x1c4>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	4a52      	ldr	r2, [pc, #328]	; (80037d8 <HAL_RCC_ClockConfig+0x1c4>)
 800368e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003692:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003694:	4b50      	ldr	r3, [pc, #320]	; (80037d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	494d      	ldr	r1, [pc, #308]	; (80037d8 <HAL_RCC_ClockConfig+0x1c4>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d040      	beq.n	8003734 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d107      	bne.n	80036ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ba:	4b47      	ldr	r3, [pc, #284]	; (80037d8 <HAL_RCC_ClockConfig+0x1c4>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d115      	bne.n	80036f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e07f      	b.n	80037ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d107      	bne.n	80036e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036d2:	4b41      	ldr	r3, [pc, #260]	; (80037d8 <HAL_RCC_ClockConfig+0x1c4>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d109      	bne.n	80036f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e073      	b.n	80037ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036e2:	4b3d      	ldr	r3, [pc, #244]	; (80037d8 <HAL_RCC_ClockConfig+0x1c4>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e06b      	b.n	80037ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036f2:	4b39      	ldr	r3, [pc, #228]	; (80037d8 <HAL_RCC_ClockConfig+0x1c4>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f023 0203 	bic.w	r2, r3, #3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	4936      	ldr	r1, [pc, #216]	; (80037d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003700:	4313      	orrs	r3, r2
 8003702:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003704:	f7fd fd8c 	bl	8001220 <HAL_GetTick>
 8003708:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800370a:	e00a      	b.n	8003722 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800370c:	f7fd fd88 	bl	8001220 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	f241 3288 	movw	r2, #5000	; 0x1388
 800371a:	4293      	cmp	r3, r2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e053      	b.n	80037ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003722:	4b2d      	ldr	r3, [pc, #180]	; (80037d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f003 020c 	and.w	r2, r3, #12
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	429a      	cmp	r2, r3
 8003732:	d1eb      	bne.n	800370c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003734:	4b27      	ldr	r3, [pc, #156]	; (80037d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0307 	and.w	r3, r3, #7
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	429a      	cmp	r2, r3
 8003740:	d210      	bcs.n	8003764 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003742:	4b24      	ldr	r3, [pc, #144]	; (80037d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f023 0207 	bic.w	r2, r3, #7
 800374a:	4922      	ldr	r1, [pc, #136]	; (80037d4 <HAL_RCC_ClockConfig+0x1c0>)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	4313      	orrs	r3, r2
 8003750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003752:	4b20      	ldr	r3, [pc, #128]	; (80037d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0307 	and.w	r3, r3, #7
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	429a      	cmp	r2, r3
 800375e:	d001      	beq.n	8003764 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e032      	b.n	80037ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b00      	cmp	r3, #0
 800376e:	d008      	beq.n	8003782 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003770:	4b19      	ldr	r3, [pc, #100]	; (80037d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	4916      	ldr	r1, [pc, #88]	; (80037d8 <HAL_RCC_ClockConfig+0x1c4>)
 800377e:	4313      	orrs	r3, r2
 8003780:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0308 	and.w	r3, r3, #8
 800378a:	2b00      	cmp	r3, #0
 800378c:	d009      	beq.n	80037a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800378e:	4b12      	ldr	r3, [pc, #72]	; (80037d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	490e      	ldr	r1, [pc, #56]	; (80037d8 <HAL_RCC_ClockConfig+0x1c4>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037a2:	f000 f821 	bl	80037e8 <HAL_RCC_GetSysClockFreq>
 80037a6:	4602      	mov	r2, r0
 80037a8:	4b0b      	ldr	r3, [pc, #44]	; (80037d8 <HAL_RCC_ClockConfig+0x1c4>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	091b      	lsrs	r3, r3, #4
 80037ae:	f003 030f 	and.w	r3, r3, #15
 80037b2:	490a      	ldr	r1, [pc, #40]	; (80037dc <HAL_RCC_ClockConfig+0x1c8>)
 80037b4:	5ccb      	ldrb	r3, [r1, r3]
 80037b6:	fa22 f303 	lsr.w	r3, r2, r3
 80037ba:	4a09      	ldr	r2, [pc, #36]	; (80037e0 <HAL_RCC_ClockConfig+0x1cc>)
 80037bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037be:	4b09      	ldr	r3, [pc, #36]	; (80037e4 <HAL_RCC_ClockConfig+0x1d0>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7fd fcea 	bl	800119c <HAL_InitTick>

  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	40022000 	.word	0x40022000
 80037d8:	40021000 	.word	0x40021000
 80037dc:	0800d3f8 	.word	0x0800d3f8
 80037e0:	20000000 	.word	0x20000000
 80037e4:	20000004 	.word	0x20000004

080037e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037e8:	b490      	push	{r4, r7}
 80037ea:	b08a      	sub	sp, #40	; 0x28
 80037ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80037ee:	4b29      	ldr	r3, [pc, #164]	; (8003894 <HAL_RCC_GetSysClockFreq+0xac>)
 80037f0:	1d3c      	adds	r4, r7, #4
 80037f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80037f8:	f240 2301 	movw	r3, #513	; 0x201
 80037fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037fe:	2300      	movs	r3, #0
 8003800:	61fb      	str	r3, [r7, #28]
 8003802:	2300      	movs	r3, #0
 8003804:	61bb      	str	r3, [r7, #24]
 8003806:	2300      	movs	r3, #0
 8003808:	627b      	str	r3, [r7, #36]	; 0x24
 800380a:	2300      	movs	r3, #0
 800380c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800380e:	2300      	movs	r3, #0
 8003810:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003812:	4b21      	ldr	r3, [pc, #132]	; (8003898 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	f003 030c 	and.w	r3, r3, #12
 800381e:	2b04      	cmp	r3, #4
 8003820:	d002      	beq.n	8003828 <HAL_RCC_GetSysClockFreq+0x40>
 8003822:	2b08      	cmp	r3, #8
 8003824:	d003      	beq.n	800382e <HAL_RCC_GetSysClockFreq+0x46>
 8003826:	e02b      	b.n	8003880 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003828:	4b1c      	ldr	r3, [pc, #112]	; (800389c <HAL_RCC_GetSysClockFreq+0xb4>)
 800382a:	623b      	str	r3, [r7, #32]
      break;
 800382c:	e02b      	b.n	8003886 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	0c9b      	lsrs	r3, r3, #18
 8003832:	f003 030f 	and.w	r3, r3, #15
 8003836:	3328      	adds	r3, #40	; 0x28
 8003838:	443b      	add	r3, r7
 800383a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800383e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d012      	beq.n	8003870 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800384a:	4b13      	ldr	r3, [pc, #76]	; (8003898 <HAL_RCC_GetSysClockFreq+0xb0>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	0c5b      	lsrs	r3, r3, #17
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	3328      	adds	r3, #40	; 0x28
 8003856:	443b      	add	r3, r7
 8003858:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800385c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	4a0e      	ldr	r2, [pc, #56]	; (800389c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003862:	fb03 f202 	mul.w	r2, r3, r2
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	fbb2 f3f3 	udiv	r3, r2, r3
 800386c:	627b      	str	r3, [r7, #36]	; 0x24
 800386e:	e004      	b.n	800387a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	4a0b      	ldr	r2, [pc, #44]	; (80038a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003874:	fb02 f303 	mul.w	r3, r2, r3
 8003878:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387c:	623b      	str	r3, [r7, #32]
      break;
 800387e:	e002      	b.n	8003886 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003880:	4b06      	ldr	r3, [pc, #24]	; (800389c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003882:	623b      	str	r3, [r7, #32]
      break;
 8003884:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003886:	6a3b      	ldr	r3, [r7, #32]
}
 8003888:	4618      	mov	r0, r3
 800388a:	3728      	adds	r7, #40	; 0x28
 800388c:	46bd      	mov	sp, r7
 800388e:	bc90      	pop	{r4, r7}
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	0800d3a0 	.word	0x0800d3a0
 8003898:	40021000 	.word	0x40021000
 800389c:	007a1200 	.word	0x007a1200
 80038a0:	003d0900 	.word	0x003d0900

080038a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038a8:	4b02      	ldr	r3, [pc, #8]	; (80038b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80038aa:	681b      	ldr	r3, [r3, #0]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr
 80038b4:	20000000 	.word	0x20000000

080038b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038bc:	f7ff fff2 	bl	80038a4 <HAL_RCC_GetHCLKFreq>
 80038c0:	4602      	mov	r2, r0
 80038c2:	4b05      	ldr	r3, [pc, #20]	; (80038d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	0a1b      	lsrs	r3, r3, #8
 80038c8:	f003 0307 	and.w	r3, r3, #7
 80038cc:	4903      	ldr	r1, [pc, #12]	; (80038dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80038ce:	5ccb      	ldrb	r3, [r1, r3]
 80038d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40021000 	.word	0x40021000
 80038dc:	0800d408 	.word	0x0800d408

080038e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038e4:	f7ff ffde 	bl	80038a4 <HAL_RCC_GetHCLKFreq>
 80038e8:	4602      	mov	r2, r0
 80038ea:	4b05      	ldr	r3, [pc, #20]	; (8003900 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	0adb      	lsrs	r3, r3, #11
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	4903      	ldr	r1, [pc, #12]	; (8003904 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038f6:	5ccb      	ldrb	r3, [r1, r3]
 80038f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	40021000 	.word	0x40021000
 8003904:	0800d408 	.word	0x0800d408

08003908 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003910:	4b0a      	ldr	r3, [pc, #40]	; (800393c <RCC_Delay+0x34>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a0a      	ldr	r2, [pc, #40]	; (8003940 <RCC_Delay+0x38>)
 8003916:	fba2 2303 	umull	r2, r3, r2, r3
 800391a:	0a5b      	lsrs	r3, r3, #9
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	fb02 f303 	mul.w	r3, r2, r3
 8003922:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003924:	bf00      	nop
  }
  while (Delay --);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	1e5a      	subs	r2, r3, #1
 800392a:	60fa      	str	r2, [r7, #12]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1f9      	bne.n	8003924 <RCC_Delay+0x1c>
}
 8003930:	bf00      	nop
 8003932:	bf00      	nop
 8003934:	3714      	adds	r7, #20
 8003936:	46bd      	mov	sp, r7
 8003938:	bc80      	pop	{r7}
 800393a:	4770      	bx	lr
 800393c:	20000000 	.word	0x20000000
 8003940:	10624dd3 	.word	0x10624dd3

08003944 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800394c:	2300      	movs	r3, #0
 800394e:	613b      	str	r3, [r7, #16]
 8003950:	2300      	movs	r3, #0
 8003952:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b00      	cmp	r3, #0
 800395e:	d07d      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003960:	2300      	movs	r3, #0
 8003962:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003964:	4b4f      	ldr	r3, [pc, #316]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003966:	69db      	ldr	r3, [r3, #28]
 8003968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10d      	bne.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003970:	4b4c      	ldr	r3, [pc, #304]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003972:	69db      	ldr	r3, [r3, #28]
 8003974:	4a4b      	ldr	r2, [pc, #300]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800397a:	61d3      	str	r3, [r2, #28]
 800397c:	4b49      	ldr	r3, [pc, #292]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800397e:	69db      	ldr	r3, [r3, #28]
 8003980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003984:	60bb      	str	r3, [r7, #8]
 8003986:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003988:	2301      	movs	r3, #1
 800398a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800398c:	4b46      	ldr	r3, [pc, #280]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003994:	2b00      	cmp	r3, #0
 8003996:	d118      	bne.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003998:	4b43      	ldr	r3, [pc, #268]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a42      	ldr	r2, [pc, #264]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800399e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039a4:	f7fd fc3c 	bl	8001220 <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039aa:	e008      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ac:	f7fd fc38 	bl	8001220 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b64      	cmp	r3, #100	; 0x64
 80039b8:	d901      	bls.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e06d      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039be:	4b3a      	ldr	r3, [pc, #232]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0f0      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039ca:	4b36      	ldr	r3, [pc, #216]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039d2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d02e      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d027      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039e8:	4b2e      	ldr	r3, [pc, #184]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039f0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039f2:	4b2e      	ldr	r3, [pc, #184]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039f4:	2201      	movs	r2, #1
 80039f6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039f8:	4b2c      	ldr	r3, [pc, #176]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80039fe:	4a29      	ldr	r2, [pc, #164]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d014      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0e:	f7fd fc07 	bl	8001220 <HAL_GetTick>
 8003a12:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a14:	e00a      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a16:	f7fd fc03 	bl	8001220 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d901      	bls.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e036      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a2c:	4b1d      	ldr	r3, [pc, #116]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d0ee      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a38:	4b1a      	ldr	r3, [pc, #104]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	4917      	ldr	r1, [pc, #92]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a4a:	7dfb      	ldrb	r3, [r7, #23]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d105      	bne.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a50:	4b14      	ldr	r3, [pc, #80]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a52:	69db      	ldr	r3, [r3, #28]
 8003a54:	4a13      	ldr	r2, [pc, #76]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a5a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d008      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a68:	4b0e      	ldr	r3, [pc, #56]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	490b      	ldr	r1, [pc, #44]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0310 	and.w	r3, r3, #16
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d008      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a86:	4b07      	ldr	r3, [pc, #28]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	4904      	ldr	r1, [pc, #16]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3718      	adds	r7, #24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	40007000 	.word	0x40007000
 8003aac:	42420440 	.word	0x42420440

08003ab0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e03f      	b.n	8003b42 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d106      	bne.n	8003adc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7fd f9e2 	bl	8000ea0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2224      	movs	r2, #36	; 0x24
 8003ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68da      	ldr	r2, [r3, #12]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003af2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 f915 	bl	8003d24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	691a      	ldr	r2, [r3, #16]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	695a      	ldr	r2, [r3, #20]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68da      	ldr	r2, [r3, #12]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2220      	movs	r2, #32
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b08a      	sub	sp, #40	; 0x28
 8003b4e:	af02      	add	r7, sp, #8
 8003b50:	60f8      	str	r0, [r7, #12]
 8003b52:	60b9      	str	r1, [r7, #8]
 8003b54:	603b      	str	r3, [r7, #0]
 8003b56:	4613      	mov	r3, r2
 8003b58:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b20      	cmp	r3, #32
 8003b68:	f040 808c 	bne.w	8003c84 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d002      	beq.n	8003b78 <HAL_UART_Receive+0x2e>
 8003b72:	88fb      	ldrh	r3, [r7, #6]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e084      	b.n	8003c86 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d101      	bne.n	8003b8a <HAL_UART_Receive+0x40>
 8003b86:	2302      	movs	r3, #2
 8003b88:	e07d      	b.n	8003c86 <HAL_UART_Receive+0x13c>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2222      	movs	r2, #34	; 0x22
 8003b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ba6:	f7fd fb3b 	bl	8001220 <HAL_GetTick>
 8003baa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	88fa      	ldrh	r2, [r7, #6]
 8003bb0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	88fa      	ldrh	r2, [r7, #6]
 8003bb6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc0:	d108      	bne.n	8003bd4 <HAL_UART_Receive+0x8a>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d104      	bne.n	8003bd4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	61bb      	str	r3, [r7, #24]
 8003bd2:	e003      	b.n	8003bdc <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003be4:	e043      	b.n	8003c6e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	2200      	movs	r2, #0
 8003bee:	2120      	movs	r1, #32
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f000 f84c 	bl	8003c8e <UART_WaitOnFlagUntilTimeout>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d001      	beq.n	8003c00 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e042      	b.n	8003c86 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10c      	bne.n	8003c20 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	3302      	adds	r3, #2
 8003c1c:	61bb      	str	r3, [r7, #24]
 8003c1e:	e01f      	b.n	8003c60 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c28:	d007      	beq.n	8003c3a <HAL_UART_Receive+0xf0>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10a      	bne.n	8003c48 <HAL_UART_Receive+0xfe>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d106      	bne.n	8003c48 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	701a      	strb	r2, [r3, #0]
 8003c46:	e008      	b.n	8003c5a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c54:	b2da      	uxtb	r2, r3
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	3b01      	subs	r3, #1
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1b6      	bne.n	8003be6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003c80:	2300      	movs	r3, #0
 8003c82:	e000      	b.n	8003c86 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003c84:	2302      	movs	r3, #2
  }
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3720      	adds	r7, #32
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b084      	sub	sp, #16
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	60f8      	str	r0, [r7, #12]
 8003c96:	60b9      	str	r1, [r7, #8]
 8003c98:	603b      	str	r3, [r7, #0]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c9e:	e02c      	b.n	8003cfa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ca6:	d028      	beq.n	8003cfa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d007      	beq.n	8003cbe <UART_WaitOnFlagUntilTimeout+0x30>
 8003cae:	f7fd fab7 	bl	8001220 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d21d      	bcs.n	8003cfa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68da      	ldr	r2, [r3, #12]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ccc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	695a      	ldr	r2, [r3, #20]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 0201 	bic.w	r2, r2, #1
 8003cdc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2220      	movs	r2, #32
 8003cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e00f      	b.n	8003d1a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	4013      	ands	r3, r2
 8003d04:	68ba      	ldr	r2, [r7, #8]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	bf0c      	ite	eq
 8003d0a:	2301      	moveq	r3, #1
 8003d0c:	2300      	movne	r3, #0
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	461a      	mov	r2, r3
 8003d12:	79fb      	ldrb	r3, [r7, #7]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d0c3      	beq.n	8003ca0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
	...

08003d24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	68da      	ldr	r2, [r3, #12]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	689a      	ldr	r2, [r3, #8]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003d5e:	f023 030c 	bic.w	r3, r3, #12
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	6812      	ldr	r2, [r2, #0]
 8003d66:	68b9      	ldr	r1, [r7, #8]
 8003d68:	430b      	orrs	r3, r1
 8003d6a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	699a      	ldr	r2, [r3, #24]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a2c      	ldr	r2, [pc, #176]	; (8003e38 <UART_SetConfig+0x114>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d103      	bne.n	8003d94 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003d8c:	f7ff fda8 	bl	80038e0 <HAL_RCC_GetPCLK2Freq>
 8003d90:	60f8      	str	r0, [r7, #12]
 8003d92:	e002      	b.n	8003d9a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003d94:	f7ff fd90 	bl	80038b8 <HAL_RCC_GetPCLK1Freq>
 8003d98:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	4413      	add	r3, r2
 8003da2:	009a      	lsls	r2, r3, #2
 8003da4:	441a      	add	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db0:	4a22      	ldr	r2, [pc, #136]	; (8003e3c <UART_SetConfig+0x118>)
 8003db2:	fba2 2303 	umull	r2, r3, r2, r3
 8003db6:	095b      	lsrs	r3, r3, #5
 8003db8:	0119      	lsls	r1, r3, #4
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	4413      	add	r3, r2
 8003dc2:	009a      	lsls	r2, r3, #2
 8003dc4:	441a      	add	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dd0:	4b1a      	ldr	r3, [pc, #104]	; (8003e3c <UART_SetConfig+0x118>)
 8003dd2:	fba3 0302 	umull	r0, r3, r3, r2
 8003dd6:	095b      	lsrs	r3, r3, #5
 8003dd8:	2064      	movs	r0, #100	; 0x64
 8003dda:	fb00 f303 	mul.w	r3, r0, r3
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	3332      	adds	r3, #50	; 0x32
 8003de4:	4a15      	ldr	r2, [pc, #84]	; (8003e3c <UART_SetConfig+0x118>)
 8003de6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dea:	095b      	lsrs	r3, r3, #5
 8003dec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003df0:	4419      	add	r1, r3
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	4613      	mov	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4413      	add	r3, r2
 8003dfa:	009a      	lsls	r2, r3, #2
 8003dfc:	441a      	add	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e08:	4b0c      	ldr	r3, [pc, #48]	; (8003e3c <UART_SetConfig+0x118>)
 8003e0a:	fba3 0302 	umull	r0, r3, r3, r2
 8003e0e:	095b      	lsrs	r3, r3, #5
 8003e10:	2064      	movs	r0, #100	; 0x64
 8003e12:	fb00 f303 	mul.w	r3, r0, r3
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	011b      	lsls	r3, r3, #4
 8003e1a:	3332      	adds	r3, #50	; 0x32
 8003e1c:	4a07      	ldr	r2, [pc, #28]	; (8003e3c <UART_SetConfig+0x118>)
 8003e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e22:	095b      	lsrs	r3, r3, #5
 8003e24:	f003 020f 	and.w	r2, r3, #15
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	440a      	add	r2, r1
 8003e2e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003e30:	bf00      	nop
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	40013800 	.word	0x40013800
 8003e3c:	51eb851f 	.word	0x51eb851f

08003e40 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003e40:	b084      	sub	sp, #16
 8003e42:	b480      	push	{r7}
 8003e44:	b083      	sub	sp, #12
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
 8003e4a:	f107 0014 	add.w	r0, r7, #20
 8003e4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bc80      	pop	{r7}
 8003e5c:	b004      	add	sp, #16
 8003e5e:	4770      	bx	lr

08003e60 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003e70:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003e74:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3714      	adds	r7, #20
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bc80      	pop	{r7}
 8003e8a:	4770      	bx	lr

08003e8c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003e94:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003e98:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	43db      	mvns	r3, r3
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	4013      	ands	r3, r2
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3714      	adds	r7, #20
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bc80      	pop	{r7}
 8003ebe:	4770      	bx	lr

08003ec0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	460b      	mov	r3, r1
 8003eca:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bc80      	pop	{r7}
 8003ed6:	4770      	bx	lr

08003ed8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003ed8:	b084      	sub	sp, #16
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
 8003ee2:	f107 0014 	add.w	r0, r7, #20
 8003ee6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bc80      	pop	{r7}
 8003f14:	b004      	add	sp, #16
 8003f16:	4770      	bx	lr

08003f18 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b09b      	sub	sp, #108	; 0x6c
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003f22:	2300      	movs	r3, #0
 8003f24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	881b      	ldrh	r3, [r3, #0]
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f3e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	78db      	ldrb	r3, [r3, #3]
 8003f46:	2b03      	cmp	r3, #3
 8003f48:	d81f      	bhi.n	8003f8a <USB_ActivateEndpoint+0x72>
 8003f4a:	a201      	add	r2, pc, #4	; (adr r2, 8003f50 <USB_ActivateEndpoint+0x38>)
 8003f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f50:	08003f61 	.word	0x08003f61
 8003f54:	08003f7d 	.word	0x08003f7d
 8003f58:	08003f93 	.word	0x08003f93
 8003f5c:	08003f6f 	.word	0x08003f6f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003f60:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003f64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f68:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003f6c:	e012      	b.n	8003f94 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003f6e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003f72:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003f76:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003f7a:	e00b      	b.n	8003f94 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003f7c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003f80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f84:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003f88:	e004      	b.n	8003f94 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003f90:	e000      	b.n	8003f94 <USB_ActivateEndpoint+0x7c>
      break;
 8003f92:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	441a      	add	r2, r3
 8003f9e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003fa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003faa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4413      	add	r3, r2
 8003fc0:	881b      	ldrh	r3, [r3, #0]
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	441a      	add	r2, r3
 8003fe4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003fe8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ff0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	7b1b      	ldrb	r3, [r3, #12]
 8004000:	2b00      	cmp	r3, #0
 8004002:	f040 8149 	bne.w	8004298 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	785b      	ldrb	r3, [r3, #1]
 800400a:	2b00      	cmp	r3, #0
 800400c:	f000 8084 	beq.w	8004118 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	617b      	str	r3, [r7, #20]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800401a:	b29b      	uxth	r3, r3
 800401c:	461a      	mov	r2, r3
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	4413      	add	r3, r2
 8004022:	617b      	str	r3, [r7, #20]
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	011a      	lsls	r2, r3, #4
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	4413      	add	r3, r2
 800402e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004032:	613b      	str	r3, [r7, #16]
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	88db      	ldrh	r3, [r3, #6]
 8004038:	085b      	lsrs	r3, r3, #1
 800403a:	b29b      	uxth	r3, r3
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	b29a      	uxth	r2, r3
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4413      	add	r3, r2
 800404e:	881b      	ldrh	r3, [r3, #0]
 8004050:	81fb      	strh	r3, [r7, #14]
 8004052:	89fb      	ldrh	r3, [r7, #14]
 8004054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004058:	2b00      	cmp	r3, #0
 800405a:	d01b      	beq.n	8004094 <USB_ActivateEndpoint+0x17c>
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	881b      	ldrh	r3, [r3, #0]
 8004068:	b29b      	uxth	r3, r3
 800406a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800406e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004072:	81bb      	strh	r3, [r7, #12]
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	441a      	add	r2, r3
 800407e:	89bb      	ldrh	r3, [r7, #12]
 8004080:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004084:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004088:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800408c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004090:	b29b      	uxth	r3, r3
 8004092:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	78db      	ldrb	r3, [r3, #3]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d020      	beq.n	80040de <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	881b      	ldrh	r3, [r3, #0]
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040b2:	813b      	strh	r3, [r7, #8]
 80040b4:	893b      	ldrh	r3, [r7, #8]
 80040b6:	f083 0320 	eor.w	r3, r3, #32
 80040ba:	813b      	strh	r3, [r7, #8]
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	441a      	add	r2, r3
 80040c6:	893b      	ldrh	r3, [r7, #8]
 80040c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040d8:	b29b      	uxth	r3, r3
 80040da:	8013      	strh	r3, [r2, #0]
 80040dc:	e27f      	b.n	80045de <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	4413      	add	r3, r2
 80040e8:	881b      	ldrh	r3, [r3, #0]
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040f4:	817b      	strh	r3, [r7, #10]
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	441a      	add	r2, r3
 8004100:	897b      	ldrh	r3, [r7, #10]
 8004102:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004106:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800410a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800410e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004112:	b29b      	uxth	r3, r3
 8004114:	8013      	strh	r3, [r2, #0]
 8004116:	e262      	b.n	80045de <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004122:	b29b      	uxth	r3, r3
 8004124:	461a      	mov	r2, r3
 8004126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004128:	4413      	add	r3, r2
 800412a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	011a      	lsls	r2, r3, #4
 8004132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004134:	4413      	add	r3, r2
 8004136:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800413a:	62bb      	str	r3, [r7, #40]	; 0x28
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	88db      	ldrh	r3, [r3, #6]
 8004140:	085b      	lsrs	r3, r3, #1
 8004142:	b29b      	uxth	r3, r3
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	b29a      	uxth	r2, r3
 8004148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	627b      	str	r3, [r7, #36]	; 0x24
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004156:	b29b      	uxth	r3, r3
 8004158:	461a      	mov	r2, r3
 800415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415c:	4413      	add	r3, r2
 800415e:	627b      	str	r3, [r7, #36]	; 0x24
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	011a      	lsls	r2, r3, #4
 8004166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004168:	4413      	add	r3, r2
 800416a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800416e:	623b      	str	r3, [r7, #32]
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d112      	bne.n	800419e <USB_ActivateEndpoint+0x286>
 8004178:	6a3b      	ldr	r3, [r7, #32]
 800417a:	881b      	ldrh	r3, [r3, #0]
 800417c:	b29b      	uxth	r3, r3
 800417e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004182:	b29a      	uxth	r2, r3
 8004184:	6a3b      	ldr	r3, [r7, #32]
 8004186:	801a      	strh	r2, [r3, #0]
 8004188:	6a3b      	ldr	r3, [r7, #32]
 800418a:	881b      	ldrh	r3, [r3, #0]
 800418c:	b29b      	uxth	r3, r3
 800418e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004192:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004196:	b29a      	uxth	r2, r3
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	801a      	strh	r2, [r3, #0]
 800419c:	e02f      	b.n	80041fe <USB_ActivateEndpoint+0x2e6>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	2b3e      	cmp	r3, #62	; 0x3e
 80041a4:	d813      	bhi.n	80041ce <USB_ActivateEndpoint+0x2b6>
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	085b      	lsrs	r3, r3, #1
 80041ac:	663b      	str	r3, [r7, #96]	; 0x60
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d002      	beq.n	80041c0 <USB_ActivateEndpoint+0x2a8>
 80041ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041bc:	3301      	adds	r3, #1
 80041be:	663b      	str	r3, [r7, #96]	; 0x60
 80041c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	029b      	lsls	r3, r3, #10
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	6a3b      	ldr	r3, [r7, #32]
 80041ca:	801a      	strh	r2, [r3, #0]
 80041cc:	e017      	b.n	80041fe <USB_ActivateEndpoint+0x2e6>
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	095b      	lsrs	r3, r3, #5
 80041d4:	663b      	str	r3, [r7, #96]	; 0x60
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	f003 031f 	and.w	r3, r3, #31
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d102      	bne.n	80041e8 <USB_ActivateEndpoint+0x2d0>
 80041e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041e4:	3b01      	subs	r3, #1
 80041e6:	663b      	str	r3, [r7, #96]	; 0x60
 80041e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	029b      	lsls	r3, r3, #10
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	6a3b      	ldr	r3, [r7, #32]
 80041fc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	4413      	add	r3, r2
 8004208:	881b      	ldrh	r3, [r3, #0]
 800420a:	83fb      	strh	r3, [r7, #30]
 800420c:	8bfb      	ldrh	r3, [r7, #30]
 800420e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d01b      	beq.n	800424e <USB_ActivateEndpoint+0x336>
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4413      	add	r3, r2
 8004220:	881b      	ldrh	r3, [r3, #0]
 8004222:	b29b      	uxth	r3, r3
 8004224:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004228:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800422c:	83bb      	strh	r3, [r7, #28]
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	441a      	add	r2, r3
 8004238:	8bbb      	ldrh	r3, [r7, #28]
 800423a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800423e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004242:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800424a:	b29b      	uxth	r3, r3
 800424c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	881b      	ldrh	r3, [r3, #0]
 800425a:	b29b      	uxth	r3, r3
 800425c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004264:	837b      	strh	r3, [r7, #26]
 8004266:	8b7b      	ldrh	r3, [r7, #26]
 8004268:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800426c:	837b      	strh	r3, [r7, #26]
 800426e:	8b7b      	ldrh	r3, [r7, #26]
 8004270:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004274:	837b      	strh	r3, [r7, #26]
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	441a      	add	r2, r3
 8004280:	8b7b      	ldrh	r3, [r7, #26]
 8004282:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004286:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800428a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800428e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004292:	b29b      	uxth	r3, r3
 8004294:	8013      	strh	r3, [r2, #0]
 8004296:	e1a2      	b.n	80045de <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	4413      	add	r3, r2
 80042a2:	881b      	ldrh	r3, [r3, #0]
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ae:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	441a      	add	r2, r3
 80042bc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80042c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042c8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80042cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042de:	b29b      	uxth	r3, r3
 80042e0:	461a      	mov	r2, r3
 80042e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042e4:	4413      	add	r3, r2
 80042e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	011a      	lsls	r2, r3, #4
 80042ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042f0:	4413      	add	r3, r2
 80042f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042f6:	657b      	str	r3, [r7, #84]	; 0x54
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	891b      	ldrh	r3, [r3, #8]
 80042fc:	085b      	lsrs	r3, r3, #1
 80042fe:	b29b      	uxth	r3, r3
 8004300:	005b      	lsls	r3, r3, #1
 8004302:	b29a      	uxth	r2, r3
 8004304:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004306:	801a      	strh	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	653b      	str	r3, [r7, #80]	; 0x50
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004312:	b29b      	uxth	r3, r3
 8004314:	461a      	mov	r2, r3
 8004316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004318:	4413      	add	r3, r2
 800431a:	653b      	str	r3, [r7, #80]	; 0x50
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	011a      	lsls	r2, r3, #4
 8004322:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004324:	4413      	add	r3, r2
 8004326:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800432a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	895b      	ldrh	r3, [r3, #10]
 8004330:	085b      	lsrs	r3, r3, #1
 8004332:	b29b      	uxth	r3, r3
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	b29a      	uxth	r2, r3
 8004338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800433a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	785b      	ldrb	r3, [r3, #1]
 8004340:	2b00      	cmp	r3, #0
 8004342:	f040 8091 	bne.w	8004468 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	4413      	add	r3, r2
 8004350:	881b      	ldrh	r3, [r3, #0]
 8004352:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004354:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004356:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d01b      	beq.n	8004396 <USB_ActivateEndpoint+0x47e>
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	4413      	add	r3, r2
 8004368:	881b      	ldrh	r3, [r3, #0]
 800436a:	b29b      	uxth	r3, r3
 800436c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004374:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	441a      	add	r2, r3
 8004380:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004382:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004386:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800438a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800438e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004392:	b29b      	uxth	r3, r3
 8004394:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	4413      	add	r3, r2
 80043a0:	881b      	ldrh	r3, [r3, #0]
 80043a2:	873b      	strh	r3, [r7, #56]	; 0x38
 80043a4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80043a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d01b      	beq.n	80043e6 <USB_ActivateEndpoint+0x4ce>
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	4413      	add	r3, r2
 80043b8:	881b      	ldrh	r3, [r3, #0]
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043c4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	441a      	add	r2, r3
 80043d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80043d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	4413      	add	r3, r2
 80043f0:	881b      	ldrh	r3, [r3, #0]
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043fc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80043fe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004400:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004404:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004406:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004408:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800440c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	441a      	add	r2, r3
 8004418:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800441a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800441e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800442a:	b29b      	uxth	r3, r3
 800442c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	4413      	add	r3, r2
 8004438:	881b      	ldrh	r3, [r3, #0]
 800443a:	b29b      	uxth	r3, r3
 800443c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004440:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004444:	867b      	strh	r3, [r7, #50]	; 0x32
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	441a      	add	r2, r3
 8004450:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004452:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004456:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800445a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800445e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004462:	b29b      	uxth	r3, r3
 8004464:	8013      	strh	r3, [r2, #0]
 8004466:	e0ba      	b.n	80045de <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4413      	add	r3, r2
 8004472:	881b      	ldrh	r3, [r3, #0]
 8004474:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004478:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800447c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d01d      	beq.n	80044c0 <USB_ActivateEndpoint+0x5a8>
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	4413      	add	r3, r2
 800448e:	881b      	ldrh	r3, [r3, #0]
 8004490:	b29b      	uxth	r3, r3
 8004492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800449a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	441a      	add	r2, r3
 80044a8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80044ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044bc:	b29b      	uxth	r3, r3
 80044be:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4413      	add	r3, r2
 80044ca:	881b      	ldrh	r3, [r3, #0]
 80044cc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80044d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80044d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d01d      	beq.n	8004518 <USB_ActivateEndpoint+0x600>
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4413      	add	r3, r2
 80044e6:	881b      	ldrh	r3, [r3, #0]
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	441a      	add	r2, r3
 8004500:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004504:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004508:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800450c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004510:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004514:	b29b      	uxth	r3, r3
 8004516:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	78db      	ldrb	r3, [r3, #3]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d024      	beq.n	800456a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4413      	add	r3, r2
 800452a:	881b      	ldrh	r3, [r3, #0]
 800452c:	b29b      	uxth	r3, r3
 800452e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004532:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004536:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800453a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800453e:	f083 0320 	eor.w	r3, r3, #32
 8004542:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	441a      	add	r2, r3
 8004550:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004554:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004558:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800455c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004564:	b29b      	uxth	r3, r3
 8004566:	8013      	strh	r3, [r2, #0]
 8004568:	e01d      	b.n	80045a6 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	4413      	add	r3, r2
 8004574:	881b      	ldrh	r3, [r3, #0]
 8004576:	b29b      	uxth	r3, r3
 8004578:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800457c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004580:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	441a      	add	r2, r3
 800458e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004592:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004596:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800459a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800459e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4413      	add	r3, r2
 80045b0:	881b      	ldrh	r3, [r3, #0]
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045bc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	441a      	add	r2, r3
 80045c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80045ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045da:	b29b      	uxth	r3, r3
 80045dc:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80045de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	376c      	adds	r7, #108	; 0x6c
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bc80      	pop	{r7}
 80045ea:	4770      	bx	lr

080045ec <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b08d      	sub	sp, #52	; 0x34
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	7b1b      	ldrb	r3, [r3, #12]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f040 808e 	bne.w	800471c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	785b      	ldrb	r3, [r3, #1]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d044      	beq.n	8004692 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	4413      	add	r3, r2
 8004612:	881b      	ldrh	r3, [r3, #0]
 8004614:	81bb      	strh	r3, [r7, #12]
 8004616:	89bb      	ldrh	r3, [r7, #12]
 8004618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800461c:	2b00      	cmp	r3, #0
 800461e:	d01b      	beq.n	8004658 <USB_DeactivateEndpoint+0x6c>
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	4413      	add	r3, r2
 800462a:	881b      	ldrh	r3, [r3, #0]
 800462c:	b29b      	uxth	r3, r3
 800462e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004636:	817b      	strh	r3, [r7, #10]
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	441a      	add	r2, r3
 8004642:	897b      	ldrh	r3, [r7, #10]
 8004644:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004648:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800464c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004650:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004654:	b29b      	uxth	r3, r3
 8004656:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	881b      	ldrh	r3, [r3, #0]
 8004664:	b29b      	uxth	r3, r3
 8004666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800466a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800466e:	813b      	strh	r3, [r7, #8]
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	441a      	add	r2, r3
 800467a:	893b      	ldrh	r3, [r7, #8]
 800467c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004680:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004684:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800468c:	b29b      	uxth	r3, r3
 800468e:	8013      	strh	r3, [r2, #0]
 8004690:	e192      	b.n	80049b8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4413      	add	r3, r2
 800469c:	881b      	ldrh	r3, [r3, #0]
 800469e:	827b      	strh	r3, [r7, #18]
 80046a0:	8a7b      	ldrh	r3, [r7, #18]
 80046a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d01b      	beq.n	80046e2 <USB_DeactivateEndpoint+0xf6>
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4413      	add	r3, r2
 80046b4:	881b      	ldrh	r3, [r3, #0]
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c0:	823b      	strh	r3, [r7, #16]
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	441a      	add	r2, r3
 80046cc:	8a3b      	ldrh	r3, [r7, #16]
 80046ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046de:	b29b      	uxth	r3, r3
 80046e0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	4413      	add	r3, r2
 80046ec:	881b      	ldrh	r3, [r3, #0]
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f8:	81fb      	strh	r3, [r7, #14]
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	441a      	add	r2, r3
 8004704:	89fb      	ldrh	r3, [r7, #14]
 8004706:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800470a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800470e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004716:	b29b      	uxth	r3, r3
 8004718:	8013      	strh	r3, [r2, #0]
 800471a:	e14d      	b.n	80049b8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	785b      	ldrb	r3, [r3, #1]
 8004720:	2b00      	cmp	r3, #0
 8004722:	f040 80a5 	bne.w	8004870 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	4413      	add	r3, r2
 8004730:	881b      	ldrh	r3, [r3, #0]
 8004732:	843b      	strh	r3, [r7, #32]
 8004734:	8c3b      	ldrh	r3, [r7, #32]
 8004736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d01b      	beq.n	8004776 <USB_DeactivateEndpoint+0x18a>
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4413      	add	r3, r2
 8004748:	881b      	ldrh	r3, [r3, #0]
 800474a:	b29b      	uxth	r3, r3
 800474c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004754:	83fb      	strh	r3, [r7, #30]
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	441a      	add	r2, r3
 8004760:	8bfb      	ldrh	r3, [r7, #30]
 8004762:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004766:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800476a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800476e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004772:	b29b      	uxth	r3, r3
 8004774:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	4413      	add	r3, r2
 8004780:	881b      	ldrh	r3, [r3, #0]
 8004782:	83bb      	strh	r3, [r7, #28]
 8004784:	8bbb      	ldrh	r3, [r7, #28]
 8004786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800478a:	2b00      	cmp	r3, #0
 800478c:	d01b      	beq.n	80047c6 <USB_DeactivateEndpoint+0x1da>
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	881b      	ldrh	r3, [r3, #0]
 800479a:	b29b      	uxth	r3, r3
 800479c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047a4:	837b      	strh	r3, [r7, #26]
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	441a      	add	r2, r3
 80047b0:	8b7b      	ldrh	r3, [r7, #26]
 80047b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	4413      	add	r3, r2
 80047d0:	881b      	ldrh	r3, [r3, #0]
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047dc:	833b      	strh	r3, [r7, #24]
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	441a      	add	r2, r3
 80047e8:	8b3b      	ldrh	r3, [r7, #24]
 80047ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	4413      	add	r3, r2
 8004808:	881b      	ldrh	r3, [r3, #0]
 800480a:	b29b      	uxth	r3, r3
 800480c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004814:	82fb      	strh	r3, [r7, #22]
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	441a      	add	r2, r3
 8004820:	8afb      	ldrh	r3, [r7, #22]
 8004822:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004826:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800482a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800482e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004832:	b29b      	uxth	r3, r3
 8004834:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4413      	add	r3, r2
 8004840:	881b      	ldrh	r3, [r3, #0]
 8004842:	b29b      	uxth	r3, r3
 8004844:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004848:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800484c:	82bb      	strh	r3, [r7, #20]
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	441a      	add	r2, r3
 8004858:	8abb      	ldrh	r3, [r7, #20]
 800485a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800485e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800486a:	b29b      	uxth	r3, r3
 800486c:	8013      	strh	r3, [r2, #0]
 800486e:	e0a3      	b.n	80049b8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	881b      	ldrh	r3, [r3, #0]
 800487c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800487e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004880:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d01b      	beq.n	80048c0 <USB_DeactivateEndpoint+0x2d4>
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4413      	add	r3, r2
 8004892:	881b      	ldrh	r3, [r3, #0]
 8004894:	b29b      	uxth	r3, r3
 8004896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800489a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800489e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	441a      	add	r2, r3
 80048aa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80048ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048bc:	b29b      	uxth	r3, r3
 80048be:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	4413      	add	r3, r2
 80048ca:	881b      	ldrh	r3, [r3, #0]
 80048cc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80048ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80048d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d01b      	beq.n	8004910 <USB_DeactivateEndpoint+0x324>
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	4413      	add	r3, r2
 80048e2:	881b      	ldrh	r3, [r3, #0]
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ee:	853b      	strh	r3, [r7, #40]	; 0x28
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	441a      	add	r2, r3
 80048fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80048fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004900:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004904:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004908:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800490c:	b29b      	uxth	r3, r3
 800490e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	881b      	ldrh	r3, [r3, #0]
 800491c:	b29b      	uxth	r3, r3
 800491e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004926:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	441a      	add	r2, r3
 8004932:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004934:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004938:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800493c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004944:	b29b      	uxth	r3, r3
 8004946:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	881b      	ldrh	r3, [r3, #0]
 8004954:	b29b      	uxth	r3, r3
 8004956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800495a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800495e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	441a      	add	r2, r3
 800496a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800496c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004970:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004974:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800497c:	b29b      	uxth	r3, r3
 800497e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	4413      	add	r3, r2
 800498a:	881b      	ldrh	r3, [r3, #0]
 800498c:	b29b      	uxth	r3, r3
 800498e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004996:	847b      	strh	r3, [r7, #34]	; 0x22
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	441a      	add	r2, r3
 80049a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80049a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3734      	adds	r7, #52	; 0x34
 80049be:	46bd      	mov	sp, r7
 80049c0:	bc80      	pop	{r7}
 80049c2:	4770      	bx	lr

080049c4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b0cc      	sub	sp, #304	; 0x130
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80049d2:	6018      	str	r0, [r3, #0]
 80049d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049dc:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80049de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	785b      	ldrb	r3, [r3, #1]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	f041 817d 	bne.w	8005cea <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80049f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	699a      	ldr	r2, [r3, #24]
 80049fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d908      	bls.n	8004a1e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004a0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004a1c:	e007      	b.n	8004a2e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004a1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	7b1b      	ldrb	r3, [r3, #12]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d152      	bne.n	8004ae4 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004a3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6959      	ldr	r1, [r3, #20]
 8004a4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	88da      	ldrh	r2, [r3, #6]
 8004a56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004a60:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004a64:	6800      	ldr	r0, [r0, #0]
 8004a66:	f001 ff23 	bl	80068b0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004a6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a6e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004a72:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004a76:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004a7a:	6812      	ldr	r2, [r2, #0]
 8004a7c:	601a      	str	r2, [r3, #0]
 8004a7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	4619      	mov	r1, r3
 8004a90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a94:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004a98:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004a9c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004aa0:	6812      	ldr	r2, [r2, #0]
 8004aa2:	440a      	add	r2, r1
 8004aa4:	601a      	str	r2, [r3, #0]
 8004aa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	011a      	lsls	r2, r3, #4
 8004ab4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ab8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4413      	add	r3, r2
 8004ac0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004ac4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ac8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004acc:	601a      	str	r2, [r3, #0]
 8004ace:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ad8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	801a      	strh	r2, [r3, #0]
 8004ae0:	f001 b8b5 	b.w	8005c4e <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004ae4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ae8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	78db      	ldrb	r3, [r3, #3]
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	f040 84c6 	bne.w	8005482 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004af6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004afa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6a1a      	ldr	r2, [r3, #32]
 8004b02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	f240 8443 	bls.w	800539a <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004b14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	881b      	ldrh	r3, [r3, #0]
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b3a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004b3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	441a      	add	r2, r3
 8004b58:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004b5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b64:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004b70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	6a1a      	ldr	r2, [r3, #32]
 8004b7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b80:	1ad2      	subs	r2, r2, r3
 8004b82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004b8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	881b      	ldrh	r3, [r3, #0]
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f000 823e 	beq.w	8005032 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004bb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bba:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004bbe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004bc2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004bc6:	6812      	ldr	r2, [r2, #0]
 8004bc8:	601a      	str	r2, [r3, #0]
 8004bca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	785b      	ldrb	r3, [r3, #1]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f040 809a 	bne.w	8004d10 <USB_EPStartXfer+0x34c>
 8004bdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004be0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004be4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004be8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004bec:	6812      	ldr	r2, [r2, #0]
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bf4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	4619      	mov	r1, r3
 8004c02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c0a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004c0e:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8004c12:	6812      	ldr	r2, [r2, #0]
 8004c14:	440a      	add	r2, r1
 8004c16:	601a      	str	r2, [r3, #0]
 8004c18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	011a      	lsls	r2, r3, #4
 8004c26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4413      	add	r3, r2
 8004c32:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004c36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c3a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004c3e:	601a      	str	r2, [r3, #0]
 8004c40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d122      	bne.n	8004c8e <USB_EPStartXfer+0x2ca>
 8004c48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c4c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	881b      	ldrh	r3, [r3, #0]
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c60:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	801a      	strh	r2, [r3, #0]
 8004c68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c6c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	881b      	ldrh	r3, [r3, #0]
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c84:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	801a      	strh	r2, [r3, #0]
 8004c8c:	e079      	b.n	8004d82 <USB_EPStartXfer+0x3be>
 8004c8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c92:	2b3e      	cmp	r3, #62	; 0x3e
 8004c94:	d81b      	bhi.n	8004cce <USB_EPStartXfer+0x30a>
 8004c96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c9a:	085b      	lsrs	r3, r3, #1
 8004c9c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004ca0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d004      	beq.n	8004cb6 <USB_EPStartXfer+0x2f2>
 8004cac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004cb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	029b      	lsls	r3, r3, #10
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cc4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	801a      	strh	r2, [r3, #0]
 8004ccc:	e059      	b.n	8004d82 <USB_EPStartXfer+0x3be>
 8004cce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cd2:	095b      	lsrs	r3, r3, #5
 8004cd4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004cd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cdc:	f003 031f 	and.w	r3, r3, #31
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d104      	bne.n	8004cee <USB_EPStartXfer+0x32a>
 8004ce4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004cee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	029b      	lsls	r3, r3, #10
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d06:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	801a      	strh	r2, [r3, #0]
 8004d0e:	e038      	b.n	8004d82 <USB_EPStartXfer+0x3be>
 8004d10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	785b      	ldrb	r3, [r3, #1]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d130      	bne.n	8004d82 <USB_EPStartXfer+0x3be>
 8004d20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	4619      	mov	r1, r3
 8004d32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d36:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004d3a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004d3e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8004d42:	6812      	ldr	r2, [r2, #0]
 8004d44:	440a      	add	r2, r1
 8004d46:	601a      	str	r2, [r3, #0]
 8004d48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	011a      	lsls	r2, r3, #4
 8004d56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d5a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4413      	add	r3, r2
 8004d62:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004d66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d6e:	601a      	str	r2, [r3, #0]
 8004d70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004d82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	895b      	ldrh	r3, [r3, #10]
 8004d8e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	6959      	ldr	r1, [r3, #20]
 8004d9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004da8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004dac:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004db0:	6800      	ldr	r0, [r0, #0]
 8004db2:	f001 fd7d 	bl	80068b0 <USB_WritePMA>
            ep->xfer_buff += len;
 8004db6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	695a      	ldr	r2, [r3, #20]
 8004dc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dc6:	441a      	add	r2, r3
 8004dc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004dd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	6a1a      	ldr	r2, [r3, #32]
 8004de0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004de4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d90f      	bls.n	8004e10 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8004df0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004df4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	6a1a      	ldr	r2, [r3, #32]
 8004dfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e00:	1ad2      	subs	r2, r2, r3
 8004e02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	621a      	str	r2, [r3, #32]
 8004e0e:	e00e      	b.n	8004e2e <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8004e10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	6a1b      	ldr	r3, [r3, #32]
 8004e1c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004e20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004e2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	785b      	ldrb	r3, [r3, #1]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f040 809a 	bne.w	8004f74 <USB_EPStartXfer+0x5b0>
 8004e40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e44:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004e48:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004e4c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004e50:	6812      	ldr	r2, [r2, #0]
 8004e52:	601a      	str	r2, [r3, #0]
 8004e54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	4619      	mov	r1, r3
 8004e66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e6a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004e6e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004e72:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8004e76:	6812      	ldr	r2, [r2, #0]
 8004e78:	440a      	add	r2, r1
 8004e7a:	601a      	str	r2, [r3, #0]
 8004e7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	011a      	lsls	r2, r3, #4
 8004e8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e8e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4413      	add	r3, r2
 8004e96:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004e9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e9e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004ea2:	601a      	str	r2, [r3, #0]
 8004ea4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d122      	bne.n	8004ef2 <USB_EPStartXfer+0x52e>
 8004eac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eb0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	881b      	ldrh	r3, [r3, #0]
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ec4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	801a      	strh	r2, [r3, #0]
 8004ecc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ed0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	881b      	ldrh	r3, [r3, #0]
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ede:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ee8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	801a      	strh	r2, [r3, #0]
 8004ef0:	e083      	b.n	8004ffa <USB_EPStartXfer+0x636>
 8004ef2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ef6:	2b3e      	cmp	r3, #62	; 0x3e
 8004ef8:	d81b      	bhi.n	8004f32 <USB_EPStartXfer+0x56e>
 8004efa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004efe:	085b      	lsrs	r3, r3, #1
 8004f00:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004f04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f08:	f003 0301 	and.w	r3, r3, #1
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d004      	beq.n	8004f1a <USB_EPStartXfer+0x556>
 8004f10:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004f14:	3301      	adds	r3, #1
 8004f16:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004f1a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	029b      	lsls	r3, r3, #10
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f28:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	801a      	strh	r2, [r3, #0]
 8004f30:	e063      	b.n	8004ffa <USB_EPStartXfer+0x636>
 8004f32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f36:	095b      	lsrs	r3, r3, #5
 8004f38:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004f3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f40:	f003 031f 	and.w	r3, r3, #31
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d104      	bne.n	8004f52 <USB_EPStartXfer+0x58e>
 8004f48:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004f52:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	029b      	lsls	r3, r3, #10
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f6a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	801a      	strh	r2, [r3, #0]
 8004f72:	e042      	b.n	8004ffa <USB_EPStartXfer+0x636>
 8004f74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	785b      	ldrb	r3, [r3, #1]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d13a      	bne.n	8004ffa <USB_EPStartXfer+0x636>
 8004f84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f88:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004f8c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004f90:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004f94:	6812      	ldr	r2, [r2, #0]
 8004f96:	601a      	str	r2, [r3, #0]
 8004f98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	4619      	mov	r1, r3
 8004faa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fae:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004fb2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004fb6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8004fba:	6812      	ldr	r2, [r2, #0]
 8004fbc:	440a      	add	r2, r1
 8004fbe:	601a      	str	r2, [r3, #0]
 8004fc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	011a      	lsls	r2, r3, #4
 8004fce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fd2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4413      	add	r3, r2
 8004fda:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004fde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fe2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004fe6:	601a      	str	r2, [r3, #0]
 8004fe8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ff2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004ffa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ffe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	891b      	ldrh	r3, [r3, #8]
 8005006:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800500a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800500e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	6959      	ldr	r1, [r3, #20]
 8005016:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800501a:	b29b      	uxth	r3, r3
 800501c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005020:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005024:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005028:	6800      	ldr	r0, [r0, #0]
 800502a:	f001 fc41 	bl	80068b0 <USB_WritePMA>
 800502e:	f000 be0e 	b.w	8005c4e <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005032:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005036:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	785b      	ldrb	r3, [r3, #1]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d16d      	bne.n	800511e <USB_EPStartXfer+0x75a>
 8005042:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005046:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	64bb      	str	r3, [r7, #72]	; 0x48
 800504e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005052:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800505c:	b29b      	uxth	r3, r3
 800505e:	461a      	mov	r2, r3
 8005060:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005062:	4413      	add	r3, r2
 8005064:	64bb      	str	r3, [r7, #72]	; 0x48
 8005066:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800506a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	011a      	lsls	r2, r3, #4
 8005074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005076:	4413      	add	r3, r2
 8005078:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800507c:	647b      	str	r3, [r7, #68]	; 0x44
 800507e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005082:	2b00      	cmp	r3, #0
 8005084:	d112      	bne.n	80050ac <USB_EPStartXfer+0x6e8>
 8005086:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005088:	881b      	ldrh	r3, [r3, #0]
 800508a:	b29b      	uxth	r3, r3
 800508c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005090:	b29a      	uxth	r2, r3
 8005092:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005094:	801a      	strh	r2, [r3, #0]
 8005096:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005098:	881b      	ldrh	r3, [r3, #0]
 800509a:	b29b      	uxth	r3, r3
 800509c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050a8:	801a      	strh	r2, [r3, #0]
 80050aa:	e063      	b.n	8005174 <USB_EPStartXfer+0x7b0>
 80050ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050b0:	2b3e      	cmp	r3, #62	; 0x3e
 80050b2:	d817      	bhi.n	80050e4 <USB_EPStartXfer+0x720>
 80050b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050b8:	085b      	lsrs	r3, r3, #1
 80050ba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80050be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d004      	beq.n	80050d4 <USB_EPStartXfer+0x710>
 80050ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80050ce:	3301      	adds	r3, #1
 80050d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80050d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80050d8:	b29b      	uxth	r3, r3
 80050da:	029b      	lsls	r3, r3, #10
 80050dc:	b29a      	uxth	r2, r3
 80050de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050e0:	801a      	strh	r2, [r3, #0]
 80050e2:	e047      	b.n	8005174 <USB_EPStartXfer+0x7b0>
 80050e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050e8:	095b      	lsrs	r3, r3, #5
 80050ea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80050ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050f2:	f003 031f 	and.w	r3, r3, #31
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d104      	bne.n	8005104 <USB_EPStartXfer+0x740>
 80050fa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80050fe:	3b01      	subs	r3, #1
 8005100:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005104:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005108:	b29b      	uxth	r3, r3
 800510a:	029b      	lsls	r3, r3, #10
 800510c:	b29b      	uxth	r3, r3
 800510e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005112:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005116:	b29a      	uxth	r2, r3
 8005118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800511a:	801a      	strh	r2, [r3, #0]
 800511c:	e02a      	b.n	8005174 <USB_EPStartXfer+0x7b0>
 800511e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005122:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	785b      	ldrb	r3, [r3, #1]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d122      	bne.n	8005174 <USB_EPStartXfer+0x7b0>
 800512e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005132:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	653b      	str	r3, [r7, #80]	; 0x50
 800513a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800513e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005148:	b29b      	uxth	r3, r3
 800514a:	461a      	mov	r2, r3
 800514c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800514e:	4413      	add	r3, r2
 8005150:	653b      	str	r3, [r7, #80]	; 0x50
 8005152:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005156:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	011a      	lsls	r2, r3, #4
 8005160:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005162:	4413      	add	r3, r2
 8005164:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005168:	64fb      	str	r3, [r7, #76]	; 0x4c
 800516a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800516e:	b29a      	uxth	r2, r3
 8005170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005172:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005174:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005178:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	891b      	ldrh	r3, [r3, #8]
 8005180:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005184:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005188:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6959      	ldr	r1, [r3, #20]
 8005190:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005194:	b29b      	uxth	r3, r3
 8005196:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800519a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800519e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80051a2:	6800      	ldr	r0, [r0, #0]
 80051a4:	f001 fb84 	bl	80068b0 <USB_WritePMA>
            ep->xfer_buff += len;
 80051a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	695a      	ldr	r2, [r3, #20]
 80051b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051b8:	441a      	add	r2, r3
 80051ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80051c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	6a1a      	ldr	r2, [r3, #32]
 80051d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d90f      	bls.n	8005202 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80051e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6a1a      	ldr	r2, [r3, #32]
 80051ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051f2:	1ad2      	subs	r2, r2, r3
 80051f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	621a      	str	r2, [r3, #32]
 8005200:	e00e      	b.n	8005220 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8005202:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005206:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005212:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005216:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2200      	movs	r2, #0
 800521e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005220:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005224:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	643b      	str	r3, [r7, #64]	; 0x40
 800522c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005230:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	785b      	ldrb	r3, [r3, #1]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d16d      	bne.n	8005318 <USB_EPStartXfer+0x954>
 800523c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005240:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	63bb      	str	r3, [r7, #56]	; 0x38
 8005248:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800524c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005256:	b29b      	uxth	r3, r3
 8005258:	461a      	mov	r2, r3
 800525a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525c:	4413      	add	r3, r2
 800525e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005260:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005264:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	011a      	lsls	r2, r3, #4
 800526e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005270:	4413      	add	r3, r2
 8005272:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005276:	637b      	str	r3, [r7, #52]	; 0x34
 8005278:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800527c:	2b00      	cmp	r3, #0
 800527e:	d112      	bne.n	80052a6 <USB_EPStartXfer+0x8e2>
 8005280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005282:	881b      	ldrh	r3, [r3, #0]
 8005284:	b29b      	uxth	r3, r3
 8005286:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800528a:	b29a      	uxth	r2, r3
 800528c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800528e:	801a      	strh	r2, [r3, #0]
 8005290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005292:	881b      	ldrh	r3, [r3, #0]
 8005294:	b29b      	uxth	r3, r3
 8005296:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800529a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800529e:	b29a      	uxth	r2, r3
 80052a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052a2:	801a      	strh	r2, [r3, #0]
 80052a4:	e05d      	b.n	8005362 <USB_EPStartXfer+0x99e>
 80052a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052aa:	2b3e      	cmp	r3, #62	; 0x3e
 80052ac:	d817      	bhi.n	80052de <USB_EPStartXfer+0x91a>
 80052ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052b2:	085b      	lsrs	r3, r3, #1
 80052b4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80052b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d004      	beq.n	80052ce <USB_EPStartXfer+0x90a>
 80052c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80052c8:	3301      	adds	r3, #1
 80052ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80052ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	029b      	lsls	r3, r3, #10
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052da:	801a      	strh	r2, [r3, #0]
 80052dc:	e041      	b.n	8005362 <USB_EPStartXfer+0x99e>
 80052de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052e2:	095b      	lsrs	r3, r3, #5
 80052e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80052e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052ec:	f003 031f 	and.w	r3, r3, #31
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d104      	bne.n	80052fe <USB_EPStartXfer+0x93a>
 80052f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80052f8:	3b01      	subs	r3, #1
 80052fa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80052fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005302:	b29b      	uxth	r3, r3
 8005304:	029b      	lsls	r3, r3, #10
 8005306:	b29b      	uxth	r3, r3
 8005308:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800530c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005310:	b29a      	uxth	r2, r3
 8005312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005314:	801a      	strh	r2, [r3, #0]
 8005316:	e024      	b.n	8005362 <USB_EPStartXfer+0x99e>
 8005318:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800531c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	785b      	ldrb	r3, [r3, #1]
 8005324:	2b01      	cmp	r3, #1
 8005326:	d11c      	bne.n	8005362 <USB_EPStartXfer+0x99e>
 8005328:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800532c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005336:	b29b      	uxth	r3, r3
 8005338:	461a      	mov	r2, r3
 800533a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800533c:	4413      	add	r3, r2
 800533e:	643b      	str	r3, [r7, #64]	; 0x40
 8005340:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005344:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	011a      	lsls	r2, r3, #4
 800534e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005350:	4413      	add	r3, r2
 8005352:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005356:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005358:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800535c:	b29a      	uxth	r2, r3
 800535e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005360:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005362:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005366:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	895b      	ldrh	r3, [r3, #10]
 800536e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005372:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005376:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6959      	ldr	r1, [r3, #20]
 800537e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005382:	b29b      	uxth	r3, r3
 8005384:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005388:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800538c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005390:	6800      	ldr	r0, [r0, #0]
 8005392:	f001 fa8d 	bl	80068b0 <USB_WritePMA>
 8005396:	f000 bc5a 	b.w	8005c4e <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800539a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800539e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80053aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	4413      	add	r3, r2
 80053c4:	881b      	ldrh	r3, [r3, #0]
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80053cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053d0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80053d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	441a      	add	r2, r3
 80053ee:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80053f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005402:	b29b      	uxth	r3, r3
 8005404:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005406:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800540a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005412:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005416:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005420:	b29b      	uxth	r3, r3
 8005422:	461a      	mov	r2, r3
 8005424:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005426:	4413      	add	r3, r2
 8005428:	65fb      	str	r3, [r7, #92]	; 0x5c
 800542a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800542e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	011a      	lsls	r2, r3, #4
 8005438:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800543a:	4413      	add	r3, r2
 800543c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005440:	65bb      	str	r3, [r7, #88]	; 0x58
 8005442:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005446:	b29a      	uxth	r2, r3
 8005448:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800544a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800544c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005450:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	891b      	ldrh	r3, [r3, #8]
 8005458:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800545c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005460:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	6959      	ldr	r1, [r3, #20]
 8005468:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800546c:	b29b      	uxth	r3, r3
 800546e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005472:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005476:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800547a:	6800      	ldr	r0, [r0, #0]
 800547c:	f001 fa18 	bl	80068b0 <USB_WritePMA>
 8005480:	e3e5      	b.n	8005c4e <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005482:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005486:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005490:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	4413      	add	r3, r2
 800549c:	881b      	ldrh	r3, [r3, #0]
 800549e:	b29b      	uxth	r3, r3
 80054a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054a8:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80054ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	441a      	add	r2, r3
 80054c6:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80054ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054d2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80054d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054da:	b29b      	uxth	r3, r3
 80054dc:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80054de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	6a1a      	ldr	r2, [r3, #32]
 80054ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054ee:	1ad2      	subs	r2, r2, r3
 80054f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80054fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005500:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800550a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	4413      	add	r3, r2
 8005516:	881b      	ldrh	r3, [r3, #0]
 8005518:	b29b      	uxth	r3, r3
 800551a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551e:	2b00      	cmp	r3, #0
 8005520:	f000 81bc 	beq.w	800589c <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005524:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005528:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005532:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005536:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	785b      	ldrb	r3, [r3, #1]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d16d      	bne.n	800561e <USB_EPStartXfer+0xc5a>
 8005542:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005546:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	67bb      	str	r3, [r7, #120]	; 0x78
 800554e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005552:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800555c:	b29b      	uxth	r3, r3
 800555e:	461a      	mov	r2, r3
 8005560:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005562:	4413      	add	r3, r2
 8005564:	67bb      	str	r3, [r7, #120]	; 0x78
 8005566:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800556a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	011a      	lsls	r2, r3, #4
 8005574:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005576:	4413      	add	r3, r2
 8005578:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800557c:	677b      	str	r3, [r7, #116]	; 0x74
 800557e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005582:	2b00      	cmp	r3, #0
 8005584:	d112      	bne.n	80055ac <USB_EPStartXfer+0xbe8>
 8005586:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005588:	881b      	ldrh	r3, [r3, #0]
 800558a:	b29b      	uxth	r3, r3
 800558c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005590:	b29a      	uxth	r2, r3
 8005592:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005594:	801a      	strh	r2, [r3, #0]
 8005596:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005598:	881b      	ldrh	r3, [r3, #0]
 800559a:	b29b      	uxth	r3, r3
 800559c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055a8:	801a      	strh	r2, [r3, #0]
 80055aa:	e060      	b.n	800566e <USB_EPStartXfer+0xcaa>
 80055ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055b0:	2b3e      	cmp	r3, #62	; 0x3e
 80055b2:	d817      	bhi.n	80055e4 <USB_EPStartXfer+0xc20>
 80055b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055b8:	085b      	lsrs	r3, r3, #1
 80055ba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80055be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d004      	beq.n	80055d4 <USB_EPStartXfer+0xc10>
 80055ca:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80055ce:	3301      	adds	r3, #1
 80055d0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80055d4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80055d8:	b29b      	uxth	r3, r3
 80055da:	029b      	lsls	r3, r3, #10
 80055dc:	b29a      	uxth	r2, r3
 80055de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055e0:	801a      	strh	r2, [r3, #0]
 80055e2:	e044      	b.n	800566e <USB_EPStartXfer+0xcaa>
 80055e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055e8:	095b      	lsrs	r3, r3, #5
 80055ea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80055ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055f2:	f003 031f 	and.w	r3, r3, #31
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d104      	bne.n	8005604 <USB_EPStartXfer+0xc40>
 80055fa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80055fe:	3b01      	subs	r3, #1
 8005600:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005604:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005608:	b29b      	uxth	r3, r3
 800560a:	029b      	lsls	r3, r3, #10
 800560c:	b29b      	uxth	r3, r3
 800560e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005612:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005616:	b29a      	uxth	r2, r3
 8005618:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800561a:	801a      	strh	r2, [r3, #0]
 800561c:	e027      	b.n	800566e <USB_EPStartXfer+0xcaa>
 800561e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005622:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	785b      	ldrb	r3, [r3, #1]
 800562a:	2b01      	cmp	r3, #1
 800562c:	d11f      	bne.n	800566e <USB_EPStartXfer+0xcaa>
 800562e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005632:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800563c:	b29b      	uxth	r3, r3
 800563e:	461a      	mov	r2, r3
 8005640:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005644:	4413      	add	r3, r2
 8005646:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800564a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800564e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	011a      	lsls	r2, r3, #4
 8005658:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800565c:	4413      	add	r3, r2
 800565e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005662:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005664:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005668:	b29a      	uxth	r2, r3
 800566a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800566c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800566e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005672:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	895b      	ldrh	r3, [r3, #10]
 800567a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800567e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005682:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6959      	ldr	r1, [r3, #20]
 800568a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800568e:	b29b      	uxth	r3, r3
 8005690:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005694:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005698:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800569c:	6800      	ldr	r0, [r0, #0]
 800569e:	f001 f907 	bl	80068b0 <USB_WritePMA>
          ep->xfer_buff += len;
 80056a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	695a      	ldr	r2, [r3, #20]
 80056ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056b2:	441a      	add	r2, r3
 80056b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80056c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	6a1a      	ldr	r2, [r3, #32]
 80056cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d90f      	bls.n	80056fc <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80056dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	6a1a      	ldr	r2, [r3, #32]
 80056e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056ec:	1ad2      	subs	r2, r2, r3
 80056ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	621a      	str	r2, [r3, #32]
 80056fa:	e00e      	b.n	800571a <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80056fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005700:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800570c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005710:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2200      	movs	r2, #0
 8005718:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800571a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800571e:	2b00      	cmp	r3, #0
 8005720:	f000 8295 	beq.w	8005c4e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005724:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005728:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	785b      	ldrb	r3, [r3, #1]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d16d      	bne.n	8005810 <USB_EPStartXfer+0xe4c>
 8005734:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005738:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005740:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005744:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800574e:	b29b      	uxth	r3, r3
 8005750:	461a      	mov	r2, r3
 8005752:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005754:	4413      	add	r3, r2
 8005756:	66bb      	str	r3, [r7, #104]	; 0x68
 8005758:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800575c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	011a      	lsls	r2, r3, #4
 8005766:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005768:	4413      	add	r3, r2
 800576a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800576e:	667b      	str	r3, [r7, #100]	; 0x64
 8005770:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005774:	2b00      	cmp	r3, #0
 8005776:	d112      	bne.n	800579e <USB_EPStartXfer+0xdda>
 8005778:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800577a:	881b      	ldrh	r3, [r3, #0]
 800577c:	b29b      	uxth	r3, r3
 800577e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005782:	b29a      	uxth	r2, r3
 8005784:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005786:	801a      	strh	r2, [r3, #0]
 8005788:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800578a:	881b      	ldrh	r3, [r3, #0]
 800578c:	b29b      	uxth	r3, r3
 800578e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005792:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005796:	b29a      	uxth	r2, r3
 8005798:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800579a:	801a      	strh	r2, [r3, #0]
 800579c:	e063      	b.n	8005866 <USB_EPStartXfer+0xea2>
 800579e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057a2:	2b3e      	cmp	r3, #62	; 0x3e
 80057a4:	d817      	bhi.n	80057d6 <USB_EPStartXfer+0xe12>
 80057a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057aa:	085b      	lsrs	r3, r3, #1
 80057ac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80057b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057b4:	f003 0301 	and.w	r3, r3, #1
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d004      	beq.n	80057c6 <USB_EPStartXfer+0xe02>
 80057bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057c0:	3301      	adds	r3, #1
 80057c2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80057c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	029b      	lsls	r3, r3, #10
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057d2:	801a      	strh	r2, [r3, #0]
 80057d4:	e047      	b.n	8005866 <USB_EPStartXfer+0xea2>
 80057d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057da:	095b      	lsrs	r3, r3, #5
 80057dc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80057e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057e4:	f003 031f 	and.w	r3, r3, #31
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d104      	bne.n	80057f6 <USB_EPStartXfer+0xe32>
 80057ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057f0:	3b01      	subs	r3, #1
 80057f2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80057f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	029b      	lsls	r3, r3, #10
 80057fe:	b29b      	uxth	r3, r3
 8005800:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005804:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005808:	b29a      	uxth	r2, r3
 800580a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800580c:	801a      	strh	r2, [r3, #0]
 800580e:	e02a      	b.n	8005866 <USB_EPStartXfer+0xea2>
 8005810:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005814:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	785b      	ldrb	r3, [r3, #1]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d122      	bne.n	8005866 <USB_EPStartXfer+0xea2>
 8005820:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005824:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	673b      	str	r3, [r7, #112]	; 0x70
 800582c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005830:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800583a:	b29b      	uxth	r3, r3
 800583c:	461a      	mov	r2, r3
 800583e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005840:	4413      	add	r3, r2
 8005842:	673b      	str	r3, [r7, #112]	; 0x70
 8005844:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005848:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	011a      	lsls	r2, r3, #4
 8005852:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005854:	4413      	add	r3, r2
 8005856:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800585a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800585c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005860:	b29a      	uxth	r2, r3
 8005862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005864:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005866:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800586a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	891b      	ldrh	r3, [r3, #8]
 8005872:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005876:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800587a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6959      	ldr	r1, [r3, #20]
 8005882:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005886:	b29b      	uxth	r3, r3
 8005888:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800588c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005890:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005894:	6800      	ldr	r0, [r0, #0]
 8005896:	f001 f80b 	bl	80068b0 <USB_WritePMA>
 800589a:	e1d8      	b.n	8005c4e <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800589c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	785b      	ldrb	r3, [r3, #1]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d178      	bne.n	800599e <USB_EPStartXfer+0xfda>
 80058ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80058ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	461a      	mov	r2, r3
 80058cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80058d0:	4413      	add	r3, r2
 80058d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80058d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	011a      	lsls	r2, r3, #4
 80058e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80058e8:	4413      	add	r3, r2
 80058ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80058f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d116      	bne.n	8005928 <USB_EPStartXfer+0xf64>
 80058fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058fe:	881b      	ldrh	r3, [r3, #0]
 8005900:	b29b      	uxth	r3, r3
 8005902:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005906:	b29a      	uxth	r2, r3
 8005908:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800590c:	801a      	strh	r2, [r3, #0]
 800590e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005912:	881b      	ldrh	r3, [r3, #0]
 8005914:	b29b      	uxth	r3, r3
 8005916:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800591a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800591e:	b29a      	uxth	r2, r3
 8005920:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005924:	801a      	strh	r2, [r3, #0]
 8005926:	e06b      	b.n	8005a00 <USB_EPStartXfer+0x103c>
 8005928:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800592c:	2b3e      	cmp	r3, #62	; 0x3e
 800592e:	d818      	bhi.n	8005962 <USB_EPStartXfer+0xf9e>
 8005930:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005934:	085b      	lsrs	r3, r3, #1
 8005936:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800593a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	2b00      	cmp	r3, #0
 8005944:	d004      	beq.n	8005950 <USB_EPStartXfer+0xf8c>
 8005946:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800594a:	3301      	adds	r3, #1
 800594c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005950:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005954:	b29b      	uxth	r3, r3
 8005956:	029b      	lsls	r3, r3, #10
 8005958:	b29a      	uxth	r2, r3
 800595a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800595e:	801a      	strh	r2, [r3, #0]
 8005960:	e04e      	b.n	8005a00 <USB_EPStartXfer+0x103c>
 8005962:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005966:	095b      	lsrs	r3, r3, #5
 8005968:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800596c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005970:	f003 031f 	and.w	r3, r3, #31
 8005974:	2b00      	cmp	r3, #0
 8005976:	d104      	bne.n	8005982 <USB_EPStartXfer+0xfbe>
 8005978:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800597c:	3b01      	subs	r3, #1
 800597e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005982:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005986:	b29b      	uxth	r3, r3
 8005988:	029b      	lsls	r3, r3, #10
 800598a:	b29b      	uxth	r3, r3
 800598c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005990:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005994:	b29a      	uxth	r2, r3
 8005996:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800599a:	801a      	strh	r2, [r3, #0]
 800599c:	e030      	b.n	8005a00 <USB_EPStartXfer+0x103c>
 800599e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	785b      	ldrb	r3, [r3, #1]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d128      	bne.n	8005a00 <USB_EPStartXfer+0x103c>
 80059ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80059bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	461a      	mov	r2, r3
 80059ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80059d2:	4413      	add	r3, r2
 80059d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80059d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	011a      	lsls	r2, r3, #4
 80059e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80059ea:	4413      	add	r3, r2
 80059ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80059f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80059fe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005a00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	891b      	ldrh	r3, [r3, #8]
 8005a0c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	6959      	ldr	r1, [r3, #20]
 8005a1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005a26:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005a2a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005a2e:	6800      	ldr	r0, [r0, #0]
 8005a30:	f000 ff3e 	bl	80068b0 <USB_WritePMA>
          ep->xfer_buff += len;
 8005a34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	695a      	ldr	r2, [r3, #20]
 8005a40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a44:	441a      	add	r2, r3
 8005a46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005a52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	6a1a      	ldr	r2, [r3, #32]
 8005a5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d90f      	bls.n	8005a8e <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8005a6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6a1a      	ldr	r2, [r3, #32]
 8005a7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a7e:	1ad2      	subs	r2, r2, r3
 8005a80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	621a      	str	r2, [r3, #32]
 8005a8c:	e00e      	b.n	8005aac <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8005a8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005a9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aa2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005aac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	f000 80cc 	beq.w	8005c4e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005ab6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ac4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ac8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	785b      	ldrb	r3, [r3, #1]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d178      	bne.n	8005bc6 <USB_EPStartXfer+0x1202>
 8005ad4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ad8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005ae2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ae6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	461a      	mov	r2, r3
 8005af4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005af8:	4413      	add	r3, r2
 8005afa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005afe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	011a      	lsls	r2, r3, #4
 8005b0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b10:	4413      	add	r3, r2
 8005b12:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005b1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d116      	bne.n	8005b50 <USB_EPStartXfer+0x118c>
 8005b22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b26:	881b      	ldrh	r3, [r3, #0]
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b34:	801a      	strh	r2, [r3, #0]
 8005b36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b3a:	881b      	ldrh	r3, [r3, #0]
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b4c:	801a      	strh	r2, [r3, #0]
 8005b4e:	e064      	b.n	8005c1a <USB_EPStartXfer+0x1256>
 8005b50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b54:	2b3e      	cmp	r3, #62	; 0x3e
 8005b56:	d818      	bhi.n	8005b8a <USB_EPStartXfer+0x11c6>
 8005b58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b5c:	085b      	lsrs	r3, r3, #1
 8005b5e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005b62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b66:	f003 0301 	and.w	r3, r3, #1
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d004      	beq.n	8005b78 <USB_EPStartXfer+0x11b4>
 8005b6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b72:	3301      	adds	r3, #1
 8005b74:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005b78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	029b      	lsls	r3, r3, #10
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b86:	801a      	strh	r2, [r3, #0]
 8005b88:	e047      	b.n	8005c1a <USB_EPStartXfer+0x1256>
 8005b8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b8e:	095b      	lsrs	r3, r3, #5
 8005b90:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005b94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b98:	f003 031f 	and.w	r3, r3, #31
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d104      	bne.n	8005baa <USB_EPStartXfer+0x11e6>
 8005ba0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005baa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	029b      	lsls	r3, r3, #10
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bc2:	801a      	strh	r2, [r3, #0]
 8005bc4:	e029      	b.n	8005c1a <USB_EPStartXfer+0x1256>
 8005bc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	785b      	ldrb	r3, [r3, #1]
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d121      	bne.n	8005c1a <USB_EPStartXfer+0x1256>
 8005bd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bda:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	461a      	mov	r2, r3
 8005be8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005bec:	4413      	add	r3, r2
 8005bee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005bf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bf6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	011a      	lsls	r2, r3, #4
 8005c00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c04:	4413      	add	r3, r2
 8005c06:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005c0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c18:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005c1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	895b      	ldrh	r3, [r3, #10]
 8005c26:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	6959      	ldr	r1, [r3, #20]
 8005c36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005c40:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005c44:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005c48:	6800      	ldr	r0, [r0, #0]
 8005c4a:	f000 fe31 	bl	80068b0 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005c4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	4413      	add	r3, r2
 8005c68:	881b      	ldrh	r3, [r3, #0]
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c70:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005c74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c7c:	8013      	strh	r3, [r2, #0]
 8005c7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c82:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005c86:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c8a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005c8e:	8812      	ldrh	r2, [r2, #0]
 8005c90:	f082 0210 	eor.w	r2, r2, #16
 8005c94:	801a      	strh	r2, [r3, #0]
 8005c96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c9a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005c9e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005ca2:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005ca6:	8812      	ldrh	r2, [r2, #0]
 8005ca8:	f082 0220 	eor.w	r2, r2, #32
 8005cac:	801a      	strh	r2, [r3, #0]
 8005cae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	441a      	add	r2, r3
 8005cc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ccc:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005cd0:	881b      	ldrh	r3, [r3, #0]
 8005cd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	8013      	strh	r3, [r2, #0]
 8005ce6:	f000 bc9f 	b.w	8006628 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005cea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	7b1b      	ldrb	r3, [r3, #12]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	f040 80ae 	bne.w	8005e58 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005cfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	699a      	ldr	r2, [r3, #24]
 8005d08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d917      	bls.n	8005d48 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8005d18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005d28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	699a      	ldr	r2, [r3, #24]
 8005d34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d38:	1ad2      	subs	r2, r2, r3
 8005d3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	619a      	str	r2, [r3, #24]
 8005d46:	e00e      	b.n	8005d66 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8005d48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005d58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2200      	movs	r2, #0
 8005d64:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005d66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	461a      	mov	r2, r3
 8005d86:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005d8a:	4413      	add	r3, r2
 8005d8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	011a      	lsls	r2, r3, #4
 8005d9e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005da2:	4413      	add	r3, r2
 8005da4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005da8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005dac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d116      	bne.n	8005de2 <USB_EPStartXfer+0x141e>
 8005db4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005db8:	881b      	ldrh	r3, [r3, #0]
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005dc6:	801a      	strh	r2, [r3, #0]
 8005dc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005dcc:	881b      	ldrh	r3, [r3, #0]
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005dde:	801a      	strh	r2, [r3, #0]
 8005de0:	e3e8      	b.n	80065b4 <USB_EPStartXfer+0x1bf0>
 8005de2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005de6:	2b3e      	cmp	r3, #62	; 0x3e
 8005de8:	d818      	bhi.n	8005e1c <USB_EPStartXfer+0x1458>
 8005dea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dee:	085b      	lsrs	r3, r3, #1
 8005df0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005df4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005df8:	f003 0301 	and.w	r3, r3, #1
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d004      	beq.n	8005e0a <USB_EPStartXfer+0x1446>
 8005e00:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e04:	3301      	adds	r3, #1
 8005e06:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005e0a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	029b      	lsls	r3, r3, #10
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e18:	801a      	strh	r2, [r3, #0]
 8005e1a:	e3cb      	b.n	80065b4 <USB_EPStartXfer+0x1bf0>
 8005e1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e20:	095b      	lsrs	r3, r3, #5
 8005e22:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005e26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e2a:	f003 031f 	and.w	r3, r3, #31
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d104      	bne.n	8005e3c <USB_EPStartXfer+0x1478>
 8005e32:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e36:	3b01      	subs	r3, #1
 8005e38:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005e3c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	029b      	lsls	r3, r3, #10
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e54:	801a      	strh	r2, [r3, #0]
 8005e56:	e3ad      	b.n	80065b4 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005e58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	78db      	ldrb	r3, [r3, #3]
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	f040 8200 	bne.w	800626a <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005e6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	785b      	ldrb	r3, [r3, #1]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	f040 8091 	bne.w	8005f9e <USB_EPStartXfer+0x15da>
 8005e7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005e8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ea6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	011a      	lsls	r2, r3, #4
 8005eb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005eb8:	4413      	add	r3, r2
 8005eba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ebe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ec2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ec6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d116      	bne.n	8005f00 <USB_EPStartXfer+0x153c>
 8005ed2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ed6:	881b      	ldrh	r3, [r3, #0]
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ee4:	801a      	strh	r2, [r3, #0]
 8005ee6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005eea:	881b      	ldrh	r3, [r3, #0]
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ef2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005efc:	801a      	strh	r2, [r3, #0]
 8005efe:	e083      	b.n	8006008 <USB_EPStartXfer+0x1644>
 8005f00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	2b3e      	cmp	r3, #62	; 0x3e
 8005f0e:	d820      	bhi.n	8005f52 <USB_EPStartXfer+0x158e>
 8005f10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	085b      	lsrs	r3, r3, #1
 8005f1e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005f22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	f003 0301 	and.w	r3, r3, #1
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d004      	beq.n	8005f40 <USB_EPStartXfer+0x157c>
 8005f36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	029b      	lsls	r3, r3, #10
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f4e:	801a      	strh	r2, [r3, #0]
 8005f50:	e05a      	b.n	8006008 <USB_EPStartXfer+0x1644>
 8005f52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	095b      	lsrs	r3, r3, #5
 8005f60:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005f64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	f003 031f 	and.w	r3, r3, #31
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d104      	bne.n	8005f82 <USB_EPStartXfer+0x15be>
 8005f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	029b      	lsls	r3, r3, #10
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f9a:	801a      	strh	r2, [r3, #0]
 8005f9c:	e034      	b.n	8006008 <USB_EPStartXfer+0x1644>
 8005f9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fa2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	785b      	ldrb	r3, [r3, #1]
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d12c      	bne.n	8006008 <USB_EPStartXfer+0x1644>
 8005fae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005fbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	461a      	mov	r2, r3
 8005fce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005fd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	011a      	lsls	r2, r3, #4
 8005fe6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fea:	4413      	add	r3, r2
 8005fec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ff0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ff4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ff8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	b29a      	uxth	r2, r3
 8006002:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006006:	801a      	strh	r2, [r3, #0]
 8006008:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800600c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006016:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800601a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	785b      	ldrb	r3, [r3, #1]
 8006022:	2b00      	cmp	r3, #0
 8006024:	f040 8091 	bne.w	800614a <USB_EPStartXfer+0x1786>
 8006028:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800602c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006036:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800603a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006044:	b29b      	uxth	r3, r3
 8006046:	461a      	mov	r2, r3
 8006048:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800604c:	4413      	add	r3, r2
 800604e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006052:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006056:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	011a      	lsls	r2, r3, #4
 8006060:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006064:	4413      	add	r3, r2
 8006066:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800606a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800606e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006072:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d116      	bne.n	80060ac <USB_EPStartXfer+0x16e8>
 800607e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006082:	881b      	ldrh	r3, [r3, #0]
 8006084:	b29b      	uxth	r3, r3
 8006086:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800608a:	b29a      	uxth	r2, r3
 800608c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006090:	801a      	strh	r2, [r3, #0]
 8006092:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006096:	881b      	ldrh	r3, [r3, #0]
 8006098:	b29b      	uxth	r3, r3
 800609a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800609e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060a8:	801a      	strh	r2, [r3, #0]
 80060aa:	e07c      	b.n	80061a6 <USB_EPStartXfer+0x17e2>
 80060ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	2b3e      	cmp	r3, #62	; 0x3e
 80060ba:	d820      	bhi.n	80060fe <USB_EPStartXfer+0x173a>
 80060bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	085b      	lsrs	r3, r3, #1
 80060ca:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80060ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	f003 0301 	and.w	r3, r3, #1
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d004      	beq.n	80060ec <USB_EPStartXfer+0x1728>
 80060e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80060e6:	3301      	adds	r3, #1
 80060e8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80060ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	029b      	lsls	r3, r3, #10
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060fa:	801a      	strh	r2, [r3, #0]
 80060fc:	e053      	b.n	80061a6 <USB_EPStartXfer+0x17e2>
 80060fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006102:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	095b      	lsrs	r3, r3, #5
 800610c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006114:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	f003 031f 	and.w	r3, r3, #31
 8006120:	2b00      	cmp	r3, #0
 8006122:	d104      	bne.n	800612e <USB_EPStartXfer+0x176a>
 8006124:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006128:	3b01      	subs	r3, #1
 800612a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800612e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006132:	b29b      	uxth	r3, r3
 8006134:	029b      	lsls	r3, r3, #10
 8006136:	b29b      	uxth	r3, r3
 8006138:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800613c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006140:	b29a      	uxth	r2, r3
 8006142:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006146:	801a      	strh	r2, [r3, #0]
 8006148:	e02d      	b.n	80061a6 <USB_EPStartXfer+0x17e2>
 800614a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800614e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	785b      	ldrb	r3, [r3, #1]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d125      	bne.n	80061a6 <USB_EPStartXfer+0x17e2>
 800615a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800615e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006168:	b29b      	uxth	r3, r3
 800616a:	461a      	mov	r2, r3
 800616c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006170:	4413      	add	r3, r2
 8006172:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006176:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800617a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	011a      	lsls	r2, r3, #4
 8006184:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006188:	4413      	add	r3, r2
 800618a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800618e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006192:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006196:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	b29a      	uxth	r2, r3
 80061a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80061a4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80061a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	69db      	ldr	r3, [r3, #28]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	f000 81fe 	beq.w	80065b4 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80061b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4413      	add	r3, r2
 80061d2:	881b      	ldrh	r3, [r3, #0]
 80061d4:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80061d8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80061dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d005      	beq.n	80061f0 <USB_EPStartXfer+0x182c>
 80061e4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80061e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d10d      	bne.n	800620c <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80061f0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80061f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f040 81db 	bne.w	80065b4 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80061fe:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006206:	2b00      	cmp	r3, #0
 8006208:	f040 81d4 	bne.w	80065b4 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800620c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006210:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800621a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4413      	add	r3, r2
 8006226:	881b      	ldrh	r3, [r3, #0]
 8006228:	b29b      	uxth	r3, r3
 800622a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800622e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006232:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006236:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800623a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006244:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	441a      	add	r2, r3
 8006250:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006254:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006258:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800625c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006260:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006264:	b29b      	uxth	r3, r3
 8006266:	8013      	strh	r3, [r2, #0]
 8006268:	e1a4      	b.n	80065b4 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800626a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800626e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	78db      	ldrb	r3, [r3, #3]
 8006276:	2b01      	cmp	r3, #1
 8006278:	f040 819a 	bne.w	80065b0 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800627c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006280:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	699a      	ldr	r2, [r3, #24]
 8006288:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800628c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	429a      	cmp	r2, r3
 8006296:	d917      	bls.n	80062c8 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8006298:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800629c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80062a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	699a      	ldr	r2, [r3, #24]
 80062b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062b8:	1ad2      	subs	r2, r2, r3
 80062ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	619a      	str	r2, [r3, #24]
 80062c6:	e00e      	b.n	80062e6 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80062c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	699b      	ldr	r3, [r3, #24]
 80062d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80062d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2200      	movs	r2, #0
 80062e4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80062e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	785b      	ldrb	r3, [r3, #1]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d178      	bne.n	80063e8 <USB_EPStartXfer+0x1a24>
 80062f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006304:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006308:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006312:	b29b      	uxth	r3, r3
 8006314:	461a      	mov	r2, r3
 8006316:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800631a:	4413      	add	r3, r2
 800631c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006320:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006324:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	011a      	lsls	r2, r3, #4
 800632e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006332:	4413      	add	r3, r2
 8006334:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006338:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800633c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006340:	2b00      	cmp	r3, #0
 8006342:	d116      	bne.n	8006372 <USB_EPStartXfer+0x19ae>
 8006344:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006348:	881b      	ldrh	r3, [r3, #0]
 800634a:	b29b      	uxth	r3, r3
 800634c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006350:	b29a      	uxth	r2, r3
 8006352:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006356:	801a      	strh	r2, [r3, #0]
 8006358:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800635c:	881b      	ldrh	r3, [r3, #0]
 800635e:	b29b      	uxth	r3, r3
 8006360:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006364:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006368:	b29a      	uxth	r2, r3
 800636a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800636e:	801a      	strh	r2, [r3, #0]
 8006370:	e06b      	b.n	800644a <USB_EPStartXfer+0x1a86>
 8006372:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006376:	2b3e      	cmp	r3, #62	; 0x3e
 8006378:	d818      	bhi.n	80063ac <USB_EPStartXfer+0x19e8>
 800637a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800637e:	085b      	lsrs	r3, r3, #1
 8006380:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006384:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006388:	f003 0301 	and.w	r3, r3, #1
 800638c:	2b00      	cmp	r3, #0
 800638e:	d004      	beq.n	800639a <USB_EPStartXfer+0x19d6>
 8006390:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006394:	3301      	adds	r3, #1
 8006396:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800639a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800639e:	b29b      	uxth	r3, r3
 80063a0:	029b      	lsls	r3, r3, #10
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80063a8:	801a      	strh	r2, [r3, #0]
 80063aa:	e04e      	b.n	800644a <USB_EPStartXfer+0x1a86>
 80063ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063b0:	095b      	lsrs	r3, r3, #5
 80063b2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80063b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063ba:	f003 031f 	and.w	r3, r3, #31
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d104      	bne.n	80063cc <USB_EPStartXfer+0x1a08>
 80063c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063c6:	3b01      	subs	r3, #1
 80063c8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80063cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	029b      	lsls	r3, r3, #10
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063de:	b29a      	uxth	r2, r3
 80063e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80063e4:	801a      	strh	r2, [r3, #0]
 80063e6:	e030      	b.n	800644a <USB_EPStartXfer+0x1a86>
 80063e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	785b      	ldrb	r3, [r3, #1]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d128      	bne.n	800644a <USB_EPStartXfer+0x1a86>
 80063f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006406:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800640a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006414:	b29b      	uxth	r3, r3
 8006416:	461a      	mov	r2, r3
 8006418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800641c:	4413      	add	r3, r2
 800641e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006422:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006426:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	011a      	lsls	r2, r3, #4
 8006430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006434:	4413      	add	r3, r2
 8006436:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800643a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800643e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006442:	b29a      	uxth	r2, r3
 8006444:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006448:	801a      	strh	r2, [r3, #0]
 800644a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800644e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006458:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800645c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	785b      	ldrb	r3, [r3, #1]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d178      	bne.n	800655a <USB_EPStartXfer+0x1b96>
 8006468:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800646c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006476:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800647a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006484:	b29b      	uxth	r3, r3
 8006486:	461a      	mov	r2, r3
 8006488:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800648c:	4413      	add	r3, r2
 800648e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006492:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006496:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	011a      	lsls	r2, r3, #4
 80064a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064a4:	4413      	add	r3, r2
 80064a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80064ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d116      	bne.n	80064e4 <USB_EPStartXfer+0x1b20>
 80064b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064ba:	881b      	ldrh	r3, [r3, #0]
 80064bc:	b29b      	uxth	r3, r3
 80064be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064c8:	801a      	strh	r2, [r3, #0]
 80064ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064ce:	881b      	ldrh	r3, [r3, #0]
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064da:	b29a      	uxth	r2, r3
 80064dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064e0:	801a      	strh	r2, [r3, #0]
 80064e2:	e067      	b.n	80065b4 <USB_EPStartXfer+0x1bf0>
 80064e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064e8:	2b3e      	cmp	r3, #62	; 0x3e
 80064ea:	d818      	bhi.n	800651e <USB_EPStartXfer+0x1b5a>
 80064ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064f0:	085b      	lsrs	r3, r3, #1
 80064f2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80064f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064fa:	f003 0301 	and.w	r3, r3, #1
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d004      	beq.n	800650c <USB_EPStartXfer+0x1b48>
 8006502:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006506:	3301      	adds	r3, #1
 8006508:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800650c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006510:	b29b      	uxth	r3, r3
 8006512:	029b      	lsls	r3, r3, #10
 8006514:	b29a      	uxth	r2, r3
 8006516:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800651a:	801a      	strh	r2, [r3, #0]
 800651c:	e04a      	b.n	80065b4 <USB_EPStartXfer+0x1bf0>
 800651e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006522:	095b      	lsrs	r3, r3, #5
 8006524:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006528:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800652c:	f003 031f 	and.w	r3, r3, #31
 8006530:	2b00      	cmp	r3, #0
 8006532:	d104      	bne.n	800653e <USB_EPStartXfer+0x1b7a>
 8006534:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006538:	3b01      	subs	r3, #1
 800653a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800653e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006542:	b29b      	uxth	r3, r3
 8006544:	029b      	lsls	r3, r3, #10
 8006546:	b29b      	uxth	r3, r3
 8006548:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800654c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006550:	b29a      	uxth	r2, r3
 8006552:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006556:	801a      	strh	r2, [r3, #0]
 8006558:	e02c      	b.n	80065b4 <USB_EPStartXfer+0x1bf0>
 800655a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800655e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	785b      	ldrb	r3, [r3, #1]
 8006566:	2b01      	cmp	r3, #1
 8006568:	d124      	bne.n	80065b4 <USB_EPStartXfer+0x1bf0>
 800656a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800656e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006578:	b29b      	uxth	r3, r3
 800657a:	461a      	mov	r2, r3
 800657c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006580:	4413      	add	r3, r2
 8006582:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006586:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800658a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	011a      	lsls	r2, r3, #4
 8006594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006598:	4413      	add	r3, r2
 800659a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800659e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80065a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065ac:	801a      	strh	r2, [r3, #0]
 80065ae:	e001      	b.n	80065b4 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e03a      	b.n	800662a <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80065b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	4413      	add	r3, r2
 80065ce:	881b      	ldrh	r3, [r3, #0]
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065da:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80065de:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80065e2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80065e6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80065ea:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80065ee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80065f2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80065f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006604:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	441a      	add	r2, r3
 8006610:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006614:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006618:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800661c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006624:	b29b      	uxth	r3, r3
 8006626:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	785b      	ldrb	r3, [r3, #1]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d020      	beq.n	8006688 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4413      	add	r3, r2
 8006650:	881b      	ldrh	r3, [r3, #0]
 8006652:	b29b      	uxth	r3, r3
 8006654:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006658:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800665c:	81bb      	strh	r3, [r7, #12]
 800665e:	89bb      	ldrh	r3, [r7, #12]
 8006660:	f083 0310 	eor.w	r3, r3, #16
 8006664:	81bb      	strh	r3, [r7, #12]
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	441a      	add	r2, r3
 8006670:	89bb      	ldrh	r3, [r7, #12]
 8006672:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006676:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800667a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800667e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006682:	b29b      	uxth	r3, r3
 8006684:	8013      	strh	r3, [r2, #0]
 8006686:	e01f      	b.n	80066c8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4413      	add	r3, r2
 8006692:	881b      	ldrh	r3, [r3, #0]
 8006694:	b29b      	uxth	r3, r3
 8006696:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800669a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800669e:	81fb      	strh	r3, [r7, #14]
 80066a0:	89fb      	ldrh	r3, [r7, #14]
 80066a2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80066a6:	81fb      	strh	r3, [r7, #14]
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	441a      	add	r2, r3
 80066b2:	89fb      	ldrh	r3, [r7, #14]
 80066b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3714      	adds	r7, #20
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bc80      	pop	{r7}
 80066d2:	4770      	bx	lr

080066d4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b087      	sub	sp, #28
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	7b1b      	ldrb	r3, [r3, #12]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	f040 809d 	bne.w	8006822 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	785b      	ldrb	r3, [r3, #1]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d04c      	beq.n	800678a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	4413      	add	r3, r2
 80066fa:	881b      	ldrh	r3, [r3, #0]
 80066fc:	823b      	strh	r3, [r7, #16]
 80066fe:	8a3b      	ldrh	r3, [r7, #16]
 8006700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006704:	2b00      	cmp	r3, #0
 8006706:	d01b      	beq.n	8006740 <USB_EPClearStall+0x6c>
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	4413      	add	r3, r2
 8006712:	881b      	ldrh	r3, [r3, #0]
 8006714:	b29b      	uxth	r3, r3
 8006716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800671a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800671e:	81fb      	strh	r3, [r7, #14]
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	441a      	add	r2, r3
 800672a:	89fb      	ldrh	r3, [r7, #14]
 800672c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006730:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006734:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006738:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800673c:	b29b      	uxth	r3, r3
 800673e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	78db      	ldrb	r3, [r3, #3]
 8006744:	2b01      	cmp	r3, #1
 8006746:	d06c      	beq.n	8006822 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	4413      	add	r3, r2
 8006752:	881b      	ldrh	r3, [r3, #0]
 8006754:	b29b      	uxth	r3, r3
 8006756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800675a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800675e:	81bb      	strh	r3, [r7, #12]
 8006760:	89bb      	ldrh	r3, [r7, #12]
 8006762:	f083 0320 	eor.w	r3, r3, #32
 8006766:	81bb      	strh	r3, [r7, #12]
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	441a      	add	r2, r3
 8006772:	89bb      	ldrh	r3, [r7, #12]
 8006774:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006778:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800677c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006784:	b29b      	uxth	r3, r3
 8006786:	8013      	strh	r3, [r2, #0]
 8006788:	e04b      	b.n	8006822 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	4413      	add	r3, r2
 8006794:	881b      	ldrh	r3, [r3, #0]
 8006796:	82fb      	strh	r3, [r7, #22]
 8006798:	8afb      	ldrh	r3, [r7, #22]
 800679a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d01b      	beq.n	80067da <USB_EPClearStall+0x106>
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	4413      	add	r3, r2
 80067ac:	881b      	ldrh	r3, [r3, #0]
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067b8:	82bb      	strh	r3, [r7, #20]
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	441a      	add	r2, r3
 80067c4:	8abb      	ldrh	r3, [r7, #20]
 80067c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	4413      	add	r3, r2
 80067e4:	881b      	ldrh	r3, [r3, #0]
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067f0:	827b      	strh	r3, [r7, #18]
 80067f2:	8a7b      	ldrh	r3, [r7, #18]
 80067f4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80067f8:	827b      	strh	r3, [r7, #18]
 80067fa:	8a7b      	ldrh	r3, [r7, #18]
 80067fc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006800:	827b      	strh	r3, [r7, #18]
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	441a      	add	r2, r3
 800680c:	8a7b      	ldrh	r3, [r7, #18]
 800680e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006812:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006816:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800681a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800681e:	b29b      	uxth	r3, r3
 8006820:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	371c      	adds	r7, #28
 8006828:	46bd      	mov	sp, r7
 800682a:	bc80      	pop	{r7}
 800682c:	4770      	bx	lr

0800682e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800682e:	b480      	push	{r7}
 8006830:	b083      	sub	sp, #12
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
 8006836:	460b      	mov	r3, r1
 8006838:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800683a:	78fb      	ldrb	r3, [r7, #3]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d103      	bne.n	8006848 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2280      	movs	r2, #128	; 0x80
 8006844:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	bc80      	pop	{r7}
 8006852:	4770      	bx	lr

08006854 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	370c      	adds	r7, #12
 8006862:	46bd      	mov	sp, r7
 8006864:	bc80      	pop	{r7}
 8006866:	4770      	bx	lr

08006868 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	370c      	adds	r7, #12
 8006876:	46bd      	mov	sp, r7
 8006878:	bc80      	pop	{r7}
 800687a:	4770      	bx	lr

0800687c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800688a:	b29b      	uxth	r3, r3
 800688c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800688e:	68fb      	ldr	r3, [r7, #12]
}
 8006890:	4618      	mov	r0, r3
 8006892:	3714      	adds	r7, #20
 8006894:	46bd      	mov	sp, r7
 8006896:	bc80      	pop	{r7}
 8006898:	4770      	bx	lr

0800689a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800689a:	b480      	push	{r7}
 800689c:	b083      	sub	sp, #12
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
 80068a2:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	370c      	adds	r7, #12
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bc80      	pop	{r7}
 80068ae:	4770      	bx	lr

080068b0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b08d      	sub	sp, #52	; 0x34
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	4611      	mov	r1, r2
 80068bc:	461a      	mov	r2, r3
 80068be:	460b      	mov	r3, r1
 80068c0:	80fb      	strh	r3, [r7, #6]
 80068c2:	4613      	mov	r3, r2
 80068c4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80068c6:	88bb      	ldrh	r3, [r7, #4]
 80068c8:	3301      	adds	r3, #1
 80068ca:	085b      	lsrs	r3, r3, #1
 80068cc:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80068d6:	88fb      	ldrh	r3, [r7, #6]
 80068d8:	005a      	lsls	r2, r3, #1
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	4413      	add	r3, r2
 80068de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068e2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80068e4:	6a3b      	ldr	r3, [r7, #32]
 80068e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068e8:	e01e      	b.n	8006928 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80068ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80068f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f2:	3301      	adds	r3, #1
 80068f4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80068f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	021b      	lsls	r3, r3, #8
 80068fe:	b29b      	uxth	r3, r3
 8006900:	461a      	mov	r2, r3
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	4313      	orrs	r3, r2
 8006906:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	b29a      	uxth	r2, r3
 800690c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006912:	3302      	adds	r3, #2
 8006914:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006918:	3302      	adds	r3, #2
 800691a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800691c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691e:	3301      	adds	r3, #1
 8006920:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006924:	3b01      	subs	r3, #1
 8006926:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692a:	2b00      	cmp	r3, #0
 800692c:	d1dd      	bne.n	80068ea <USB_WritePMA+0x3a>
  }
}
 800692e:	bf00      	nop
 8006930:	bf00      	nop
 8006932:	3734      	adds	r7, #52	; 0x34
 8006934:	46bd      	mov	sp, r7
 8006936:	bc80      	pop	{r7}
 8006938:	4770      	bx	lr

0800693a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800693a:	b480      	push	{r7}
 800693c:	b08b      	sub	sp, #44	; 0x2c
 800693e:	af00      	add	r7, sp, #0
 8006940:	60f8      	str	r0, [r7, #12]
 8006942:	60b9      	str	r1, [r7, #8]
 8006944:	4611      	mov	r1, r2
 8006946:	461a      	mov	r2, r3
 8006948:	460b      	mov	r3, r1
 800694a:	80fb      	strh	r3, [r7, #6]
 800694c:	4613      	mov	r3, r2
 800694e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006950:	88bb      	ldrh	r3, [r7, #4]
 8006952:	085b      	lsrs	r3, r3, #1
 8006954:	b29b      	uxth	r3, r3
 8006956:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006960:	88fb      	ldrh	r3, [r7, #6]
 8006962:	005a      	lsls	r2, r3, #1
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	4413      	add	r3, r2
 8006968:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800696c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	627b      	str	r3, [r7, #36]	; 0x24
 8006972:	e01b      	b.n	80069ac <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006974:	6a3b      	ldr	r3, [r7, #32]
 8006976:	881b      	ldrh	r3, [r3, #0]
 8006978:	b29b      	uxth	r3, r3
 800697a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800697c:	6a3b      	ldr	r3, [r7, #32]
 800697e:	3302      	adds	r3, #2
 8006980:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	b2da      	uxtb	r2, r3
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	3301      	adds	r3, #1
 800698e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	0a1b      	lsrs	r3, r3, #8
 8006994:	b2da      	uxtb	r2, r3
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	3301      	adds	r3, #1
 800699e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80069a0:	6a3b      	ldr	r3, [r7, #32]
 80069a2:	3302      	adds	r3, #2
 80069a4:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80069a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a8:	3b01      	subs	r3, #1
 80069aa:	627b      	str	r3, [r7, #36]	; 0x24
 80069ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1e0      	bne.n	8006974 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80069b2:	88bb      	ldrh	r3, [r7, #4]
 80069b4:	f003 0301 	and.w	r3, r3, #1
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d007      	beq.n	80069ce <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80069be:	6a3b      	ldr	r3, [r7, #32]
 80069c0:	881b      	ldrh	r3, [r3, #0]
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	b2da      	uxtb	r2, r3
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	701a      	strb	r2, [r3, #0]
  }
}
 80069ce:	bf00      	nop
 80069d0:	372c      	adds	r7, #44	; 0x2c
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bc80      	pop	{r7}
 80069d6:	4770      	bx	lr

080069d8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	460b      	mov	r3, r1
 80069e2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80069e4:	2300      	movs	r3, #0
 80069e6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	7c1b      	ldrb	r3, [r3, #16]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d115      	bne.n	8006a1c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80069f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069f4:	2202      	movs	r2, #2
 80069f6:	2181      	movs	r1, #129	; 0x81
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f001 fe86 	bl	800870a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2201      	movs	r2, #1
 8006a02:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006a04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a08:	2202      	movs	r2, #2
 8006a0a:	2101      	movs	r1, #1
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f001 fe7c 	bl	800870a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2201      	movs	r2, #1
 8006a16:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006a1a:	e012      	b.n	8006a42 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006a1c:	2340      	movs	r3, #64	; 0x40
 8006a1e:	2202      	movs	r2, #2
 8006a20:	2181      	movs	r1, #129	; 0x81
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f001 fe71 	bl	800870a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006a2e:	2340      	movs	r3, #64	; 0x40
 8006a30:	2202      	movs	r2, #2
 8006a32:	2101      	movs	r1, #1
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f001 fe68 	bl	800870a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006a42:	2308      	movs	r3, #8
 8006a44:	2203      	movs	r2, #3
 8006a46:	2182      	movs	r1, #130	; 0x82
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f001 fe5e 	bl	800870a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2201      	movs	r2, #1
 8006a52:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006a54:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006a58:	f001 ff7e 	bl	8008958 <USBD_static_malloc>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d102      	bne.n	8006a74 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	73fb      	strb	r3, [r7, #15]
 8006a72:	e026      	b.n	8006ac2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a7a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	7c1b      	ldrb	r3, [r3, #16]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d109      	bne.n	8006ab2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006aa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006aa8:	2101      	movs	r1, #1
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f001 ff1e 	bl	80088ec <USBD_LL_PrepareReceive>
 8006ab0:	e007      	b.n	8006ac2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ab8:	2340      	movs	r3, #64	; 0x40
 8006aba:	2101      	movs	r1, #1
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f001 ff15 	bl	80088ec <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006adc:	2181      	movs	r1, #129	; 0x81
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f001 fe39 	bl	8008756 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006aea:	2101      	movs	r1, #1
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f001 fe32 	bl	8008756 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006afa:	2182      	movs	r1, #130	; 0x82
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f001 fe2a 	bl	8008756 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d00e      	beq.n	8006b30 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b22:	4618      	mov	r0, r3
 8006b24:	f001 ff24 	bl	8008970 <USBD_static_free>
    pdev->pClassData = NULL;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3710      	adds	r7, #16
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}

08006b3a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b086      	sub	sp, #24
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
 8006b42:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b4a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006b50:	2300      	movs	r3, #0
 8006b52:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006b54:	2300      	movs	r3, #0
 8006b56:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d039      	beq.n	8006bd8 <USBD_CDC_Setup+0x9e>
 8006b64:	2b20      	cmp	r3, #32
 8006b66:	d17f      	bne.n	8006c68 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	88db      	ldrh	r3, [r3, #6]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d029      	beq.n	8006bc4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	b25b      	sxtb	r3, r3
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	da11      	bge.n	8006b9e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	683a      	ldr	r2, [r7, #0]
 8006b84:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006b86:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006b88:	683a      	ldr	r2, [r7, #0]
 8006b8a:	88d2      	ldrh	r2, [r2, #6]
 8006b8c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006b8e:	6939      	ldr	r1, [r7, #16]
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	88db      	ldrh	r3, [r3, #6]
 8006b94:	461a      	mov	r2, r3
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f001 fa09 	bl	8007fae <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006b9c:	e06b      	b.n	8006c76 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	785a      	ldrb	r2, [r3, #1]
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	88db      	ldrh	r3, [r3, #6]
 8006bac:	b2da      	uxtb	r2, r3
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006bb4:	6939      	ldr	r1, [r7, #16]
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	88db      	ldrh	r3, [r3, #6]
 8006bba:	461a      	mov	r2, r3
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f001 fa24 	bl	800800a <USBD_CtlPrepareRx>
      break;
 8006bc2:	e058      	b.n	8006c76 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	683a      	ldr	r2, [r7, #0]
 8006bce:	7850      	ldrb	r0, [r2, #1]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	6839      	ldr	r1, [r7, #0]
 8006bd4:	4798      	blx	r3
      break;
 8006bd6:	e04e      	b.n	8006c76 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	785b      	ldrb	r3, [r3, #1]
 8006bdc:	2b0b      	cmp	r3, #11
 8006bde:	d02e      	beq.n	8006c3e <USBD_CDC_Setup+0x104>
 8006be0:	2b0b      	cmp	r3, #11
 8006be2:	dc38      	bgt.n	8006c56 <USBD_CDC_Setup+0x11c>
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d002      	beq.n	8006bee <USBD_CDC_Setup+0xb4>
 8006be8:	2b0a      	cmp	r3, #10
 8006bea:	d014      	beq.n	8006c16 <USBD_CDC_Setup+0xdc>
 8006bec:	e033      	b.n	8006c56 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bf4:	2b03      	cmp	r3, #3
 8006bf6:	d107      	bne.n	8006c08 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006bf8:	f107 030c 	add.w	r3, r7, #12
 8006bfc:	2202      	movs	r2, #2
 8006bfe:	4619      	mov	r1, r3
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f001 f9d4 	bl	8007fae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c06:	e02e      	b.n	8006c66 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006c08:	6839      	ldr	r1, [r7, #0]
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f001 f965 	bl	8007eda <USBD_CtlError>
            ret = USBD_FAIL;
 8006c10:	2302      	movs	r3, #2
 8006c12:	75fb      	strb	r3, [r7, #23]
          break;
 8006c14:	e027      	b.n	8006c66 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c1c:	2b03      	cmp	r3, #3
 8006c1e:	d107      	bne.n	8006c30 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006c20:	f107 030f 	add.w	r3, r7, #15
 8006c24:	2201      	movs	r2, #1
 8006c26:	4619      	mov	r1, r3
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f001 f9c0 	bl	8007fae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c2e:	e01a      	b.n	8006c66 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006c30:	6839      	ldr	r1, [r7, #0]
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f001 f951 	bl	8007eda <USBD_CtlError>
            ret = USBD_FAIL;
 8006c38:	2302      	movs	r3, #2
 8006c3a:	75fb      	strb	r3, [r7, #23]
          break;
 8006c3c:	e013      	b.n	8006c66 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c44:	2b03      	cmp	r3, #3
 8006c46:	d00d      	beq.n	8006c64 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006c48:	6839      	ldr	r1, [r7, #0]
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f001 f945 	bl	8007eda <USBD_CtlError>
            ret = USBD_FAIL;
 8006c50:	2302      	movs	r3, #2
 8006c52:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006c54:	e006      	b.n	8006c64 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006c56:	6839      	ldr	r1, [r7, #0]
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f001 f93e 	bl	8007eda <USBD_CtlError>
          ret = USBD_FAIL;
 8006c5e:	2302      	movs	r3, #2
 8006c60:	75fb      	strb	r3, [r7, #23]
          break;
 8006c62:	e000      	b.n	8006c66 <USBD_CDC_Setup+0x12c>
          break;
 8006c64:	bf00      	nop
      }
      break;
 8006c66:	e006      	b.n	8006c76 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006c68:	6839      	ldr	r1, [r7, #0]
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f001 f935 	bl	8007eda <USBD_CtlError>
      ret = USBD_FAIL;
 8006c70:	2302      	movs	r3, #2
 8006c72:	75fb      	strb	r3, [r7, #23]
      break;
 8006c74:	bf00      	nop
  }

  return ret;
 8006c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3718      	adds	r7, #24
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	460b      	mov	r3, r1
 8006c8a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c92:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c9a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d03a      	beq.n	8006d1c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006ca6:	78fa      	ldrb	r2, [r7, #3]
 8006ca8:	6879      	ldr	r1, [r7, #4]
 8006caa:	4613      	mov	r3, r2
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	4413      	add	r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	440b      	add	r3, r1
 8006cb4:	331c      	adds	r3, #28
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d029      	beq.n	8006d10 <USBD_CDC_DataIn+0x90>
 8006cbc:	78fa      	ldrb	r2, [r7, #3]
 8006cbe:	6879      	ldr	r1, [r7, #4]
 8006cc0:	4613      	mov	r3, r2
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	4413      	add	r3, r2
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	440b      	add	r3, r1
 8006cca:	331c      	adds	r3, #28
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	78f9      	ldrb	r1, [r7, #3]
 8006cd0:	68b8      	ldr	r0, [r7, #8]
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	440b      	add	r3, r1
 8006cd8:	00db      	lsls	r3, r3, #3
 8006cda:	4403      	add	r3, r0
 8006cdc:	3338      	adds	r3, #56	; 0x38
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	fbb2 f1f3 	udiv	r1, r2, r3
 8006ce4:	fb01 f303 	mul.w	r3, r1, r3
 8006ce8:	1ad3      	subs	r3, r2, r3
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d110      	bne.n	8006d10 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006cee:	78fa      	ldrb	r2, [r7, #3]
 8006cf0:	6879      	ldr	r1, [r7, #4]
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	4413      	add	r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	440b      	add	r3, r1
 8006cfc:	331c      	adds	r3, #28
 8006cfe:	2200      	movs	r2, #0
 8006d00:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006d02:	78f9      	ldrb	r1, [r7, #3]
 8006d04:	2300      	movs	r3, #0
 8006d06:	2200      	movs	r2, #0
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f001 fdcc 	bl	80088a6 <USBD_LL_Transmit>
 8006d0e:	e003      	b.n	8006d18 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	e000      	b.n	8006d1e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006d1c:	2302      	movs	r3, #2
  }
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3710      	adds	r7, #16
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}

08006d26 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b084      	sub	sp, #16
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
 8006d2e:	460b      	mov	r3, r1
 8006d30:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d38:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006d3a:	78fb      	ldrb	r3, [r7, #3]
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f001 fdf7 	bl	8008932 <USBD_LL_GetRxDataSize>
 8006d44:	4602      	mov	r2, r0
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00d      	beq.n	8006d72 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006d64:	68fa      	ldr	r2, [r7, #12]
 8006d66:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006d6a:	4611      	mov	r1, r2
 8006d6c:	4798      	blx	r3

    return USBD_OK;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	e000      	b.n	8006d74 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006d72:	2302      	movs	r3, #2
  }
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3710      	adds	r7, #16
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d8a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d015      	beq.n	8006dc2 <USBD_CDC_EP0_RxReady+0x46>
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006d9c:	2bff      	cmp	r3, #255	; 0xff
 8006d9e:	d010      	beq.n	8006dc2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006dae:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006db0:	68fa      	ldr	r2, [r7, #12]
 8006db2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006db6:	b292      	uxth	r2, r2
 8006db8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	22ff      	movs	r2, #255	; 0xff
 8006dbe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3710      	adds	r7, #16
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2243      	movs	r2, #67	; 0x43
 8006dd8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006dda:	4b03      	ldr	r3, [pc, #12]	; (8006de8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	370c      	adds	r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bc80      	pop	{r7}
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	20000094 	.word	0x20000094

08006dec <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2243      	movs	r2, #67	; 0x43
 8006df8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006dfa:	4b03      	ldr	r3, [pc, #12]	; (8006e08 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bc80      	pop	{r7}
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop
 8006e08:	20000050 	.word	0x20000050

08006e0c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2243      	movs	r2, #67	; 0x43
 8006e18:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006e1a:	4b03      	ldr	r3, [pc, #12]	; (8006e28 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bc80      	pop	{r7}
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop
 8006e28:	200000d8 	.word	0x200000d8

08006e2c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	220a      	movs	r2, #10
 8006e38:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006e3a:	4b03      	ldr	r3, [pc, #12]	; (8006e48 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bc80      	pop	{r7}
 8006e44:	4770      	bx	lr
 8006e46:	bf00      	nop
 8006e48:	2000000c 	.word	0x2000000c

08006e4c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b085      	sub	sp, #20
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006e56:	2302      	movs	r3, #2
 8006e58:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d005      	beq.n	8006e6c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	683a      	ldr	r2, [r7, #0]
 8006e64:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3714      	adds	r7, #20
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bc80      	pop	{r7}
 8006e76:	4770      	bx	lr

08006e78 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b087      	sub	sp, #28
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	4613      	mov	r3, r2
 8006e84:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e8c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	68ba      	ldr	r2, [r7, #8]
 8006e92:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006e96:	88fa      	ldrh	r2, [r7, #6]
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006e9e:	2300      	movs	r3, #0
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	371c      	adds	r7, #28
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bc80      	pop	{r7}
 8006ea8:	4770      	bx	lr

08006eaa <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006eaa:	b480      	push	{r7}
 8006eac:	b085      	sub	sp, #20
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
 8006eb2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eba:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	683a      	ldr	r2, [r7, #0]
 8006ec0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3714      	adds	r7, #20
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bc80      	pop	{r7}
 8006ece:	4770      	bx	lr

08006ed0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ede:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d01c      	beq.n	8006f24 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d115      	bne.n	8006f20 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	2181      	movs	r1, #129	; 0x81
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f001 fcc5 	bl	80088a6 <USBD_LL_Transmit>

      return USBD_OK;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	e002      	b.n	8006f26 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006f20:	2301      	movs	r3, #1
 8006f22:	e000      	b.n	8006f26 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006f24:	2302      	movs	r3, #2
  }
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b084      	sub	sp, #16
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f3c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d017      	beq.n	8006f78 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	7c1b      	ldrb	r3, [r3, #16]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d109      	bne.n	8006f64 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f5a:	2101      	movs	r1, #1
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f001 fcc5 	bl	80088ec <USBD_LL_PrepareReceive>
 8006f62:	e007      	b.n	8006f74 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f6a:	2340      	movs	r3, #64	; 0x40
 8006f6c:	2101      	movs	r1, #1
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f001 fcbc 	bl	80088ec <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006f74:	2300      	movs	r3, #0
 8006f76:	e000      	b.n	8006f7a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006f78:	2302      	movs	r3, #2
  }
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3710      	adds	r7, #16
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b084      	sub	sp, #16
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	60f8      	str	r0, [r7, #12]
 8006f8a:	60b9      	str	r1, [r7, #8]
 8006f8c:	4613      	mov	r3, r2
 8006f8e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d101      	bne.n	8006f9a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006f96:	2302      	movs	r3, #2
 8006f98:	e01a      	b.n	8006fd0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d003      	beq.n	8006fac <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d003      	beq.n	8006fba <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	68ba      	ldr	r2, [r7, #8]
 8006fb6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	79fa      	ldrb	r2, [r7, #7]
 8006fc6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	f001 fb29 	bl	8008620 <USBD_LL_Init>

  return USBD_OK;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3710      	adds	r7, #16
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b085      	sub	sp, #20
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d006      	beq.n	8006ffa <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	683a      	ldr	r2, [r7, #0]
 8006ff0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	73fb      	strb	r3, [r7, #15]
 8006ff8:	e001      	b.n	8006ffe <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006ffa:	2302      	movs	r3, #2
 8006ffc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007000:	4618      	mov	r0, r3
 8007002:	3714      	adds	r7, #20
 8007004:	46bd      	mov	sp, r7
 8007006:	bc80      	pop	{r7}
 8007008:	4770      	bx	lr

0800700a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800700a:	b580      	push	{r7, lr}
 800700c:	b082      	sub	sp, #8
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f001 fb5e 	bl	80086d4 <USBD_LL_Start>

  return USBD_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3708      	adds	r7, #8
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}

08007022 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007022:	b480      	push	{r7}
 8007024:	b083      	sub	sp, #12
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	bc80      	pop	{r7}
 8007034:	4770      	bx	lr

08007036 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007036:	b580      	push	{r7, lr}
 8007038:	b084      	sub	sp, #16
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
 800703e:	460b      	mov	r3, r1
 8007040:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007042:	2302      	movs	r3, #2
 8007044:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800704c:	2b00      	cmp	r3, #0
 800704e:	d00c      	beq.n	800706a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	78fa      	ldrb	r2, [r7, #3]
 800705a:	4611      	mov	r1, r2
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	4798      	blx	r3
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d101      	bne.n	800706a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007066:	2300      	movs	r3, #0
 8007068:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800706a:	7bfb      	ldrb	r3, [r7, #15]
}
 800706c:	4618      	mov	r0, r3
 800706e:	3710      	adds	r7, #16
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	460b      	mov	r3, r1
 800707e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	78fa      	ldrb	r2, [r7, #3]
 800708a:	4611      	mov	r1, r2
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	4798      	blx	r3

  return USBD_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3708      	adds	r7, #8
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}

0800709a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800709a:	b580      	push	{r7, lr}
 800709c:	b082      	sub	sp, #8
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
 80070a2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80070aa:	6839      	ldr	r1, [r7, #0]
 80070ac:	4618      	mov	r0, r3
 80070ae:	f000 fed8 	bl	8007e62 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2201      	movs	r2, #1
 80070b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80070c0:	461a      	mov	r2, r3
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80070ce:	f003 031f 	and.w	r3, r3, #31
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	d016      	beq.n	8007104 <USBD_LL_SetupStage+0x6a>
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	d81c      	bhi.n	8007114 <USBD_LL_SetupStage+0x7a>
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d002      	beq.n	80070e4 <USBD_LL_SetupStage+0x4a>
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d008      	beq.n	80070f4 <USBD_LL_SetupStage+0x5a>
 80070e2:	e017      	b.n	8007114 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80070ea:	4619      	mov	r1, r3
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 f9cb 	bl	8007488 <USBD_StdDevReq>
      break;
 80070f2:	e01a      	b.n	800712a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80070fa:	4619      	mov	r1, r3
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 fa2d 	bl	800755c <USBD_StdItfReq>
      break;
 8007102:	e012      	b.n	800712a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800710a:	4619      	mov	r1, r3
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 fa6d 	bl	80075ec <USBD_StdEPReq>
      break;
 8007112:	e00a      	b.n	800712a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800711a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800711e:	b2db      	uxtb	r3, r3
 8007120:	4619      	mov	r1, r3
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f001 fb36 	bl	8008794 <USBD_LL_StallEP>
      break;
 8007128:	bf00      	nop
  }

  return USBD_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	3708      	adds	r7, #8
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b086      	sub	sp, #24
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	460b      	mov	r3, r1
 800713e:	607a      	str	r2, [r7, #4]
 8007140:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007142:	7afb      	ldrb	r3, [r7, #11]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d14b      	bne.n	80071e0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800714e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007156:	2b03      	cmp	r3, #3
 8007158:	d134      	bne.n	80071c4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	68da      	ldr	r2, [r3, #12]
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	429a      	cmp	r2, r3
 8007164:	d919      	bls.n	800719a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	68da      	ldr	r2, [r3, #12]
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	1ad2      	subs	r2, r2, r3
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	68da      	ldr	r2, [r3, #12]
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800717c:	429a      	cmp	r2, r3
 800717e:	d203      	bcs.n	8007188 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007184:	b29b      	uxth	r3, r3
 8007186:	e002      	b.n	800718e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800718c:	b29b      	uxth	r3, r3
 800718e:	461a      	mov	r2, r3
 8007190:	6879      	ldr	r1, [r7, #4]
 8007192:	68f8      	ldr	r0, [r7, #12]
 8007194:	f000 ff57 	bl	8008046 <USBD_CtlContinueRx>
 8007198:	e038      	b.n	800720c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00a      	beq.n	80071bc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80071ac:	2b03      	cmp	r3, #3
 80071ae:	d105      	bne.n	80071bc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80071bc:	68f8      	ldr	r0, [r7, #12]
 80071be:	f000 ff54 	bl	800806a <USBD_CtlSendStatus>
 80071c2:	e023      	b.n	800720c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80071ca:	2b05      	cmp	r3, #5
 80071cc:	d11e      	bne.n	800720c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80071d6:	2100      	movs	r1, #0
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	f001 fadb 	bl	8008794 <USBD_LL_StallEP>
 80071de:	e015      	b.n	800720c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071e6:	699b      	ldr	r3, [r3, #24]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d00d      	beq.n	8007208 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80071f2:	2b03      	cmp	r3, #3
 80071f4:	d108      	bne.n	8007208 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071fc:	699b      	ldr	r3, [r3, #24]
 80071fe:	7afa      	ldrb	r2, [r7, #11]
 8007200:	4611      	mov	r1, r2
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	4798      	blx	r3
 8007206:	e001      	b.n	800720c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007208:	2302      	movs	r3, #2
 800720a:	e000      	b.n	800720e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	3718      	adds	r7, #24
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}

08007216 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007216:	b580      	push	{r7, lr}
 8007218:	b086      	sub	sp, #24
 800721a:	af00      	add	r7, sp, #0
 800721c:	60f8      	str	r0, [r7, #12]
 800721e:	460b      	mov	r3, r1
 8007220:	607a      	str	r2, [r7, #4]
 8007222:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007224:	7afb      	ldrb	r3, [r7, #11]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d17f      	bne.n	800732a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	3314      	adds	r3, #20
 800722e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007236:	2b02      	cmp	r3, #2
 8007238:	d15c      	bne.n	80072f4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	68da      	ldr	r2, [r3, #12]
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	429a      	cmp	r2, r3
 8007244:	d915      	bls.n	8007272 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	68da      	ldr	r2, [r3, #12]
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	1ad2      	subs	r2, r2, r3
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	b29b      	uxth	r3, r3
 800725a:	461a      	mov	r2, r3
 800725c:	6879      	ldr	r1, [r7, #4]
 800725e:	68f8      	ldr	r0, [r7, #12]
 8007260:	f000 fec1 	bl	8007fe6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007264:	2300      	movs	r3, #0
 8007266:	2200      	movs	r2, #0
 8007268:	2100      	movs	r1, #0
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	f001 fb3e 	bl	80088ec <USBD_LL_PrepareReceive>
 8007270:	e04e      	b.n	8007310 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	697a      	ldr	r2, [r7, #20]
 8007278:	6912      	ldr	r2, [r2, #16]
 800727a:	fbb3 f1f2 	udiv	r1, r3, r2
 800727e:	fb01 f202 	mul.w	r2, r1, r2
 8007282:	1a9b      	subs	r3, r3, r2
 8007284:	2b00      	cmp	r3, #0
 8007286:	d11c      	bne.n	80072c2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	689a      	ldr	r2, [r3, #8]
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007290:	429a      	cmp	r2, r3
 8007292:	d316      	bcc.n	80072c2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	689a      	ldr	r2, [r3, #8]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800729e:	429a      	cmp	r2, r3
 80072a0:	d20f      	bcs.n	80072c2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80072a2:	2200      	movs	r2, #0
 80072a4:	2100      	movs	r1, #0
 80072a6:	68f8      	ldr	r0, [r7, #12]
 80072a8:	f000 fe9d 	bl	8007fe6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072b4:	2300      	movs	r3, #0
 80072b6:	2200      	movs	r2, #0
 80072b8:	2100      	movs	r1, #0
 80072ba:	68f8      	ldr	r0, [r7, #12]
 80072bc:	f001 fb16 	bl	80088ec <USBD_LL_PrepareReceive>
 80072c0:	e026      	b.n	8007310 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00a      	beq.n	80072e4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80072d4:	2b03      	cmp	r3, #3
 80072d6:	d105      	bne.n	80072e4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80072e4:	2180      	movs	r1, #128	; 0x80
 80072e6:	68f8      	ldr	r0, [r7, #12]
 80072e8:	f001 fa54 	bl	8008794 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80072ec:	68f8      	ldr	r0, [r7, #12]
 80072ee:	f000 fecf 	bl	8008090 <USBD_CtlReceiveStatus>
 80072f2:	e00d      	b.n	8007310 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072fa:	2b04      	cmp	r3, #4
 80072fc:	d004      	beq.n	8007308 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007304:	2b00      	cmp	r3, #0
 8007306:	d103      	bne.n	8007310 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007308:	2180      	movs	r1, #128	; 0x80
 800730a:	68f8      	ldr	r0, [r7, #12]
 800730c:	f001 fa42 	bl	8008794 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007316:	2b01      	cmp	r3, #1
 8007318:	d11d      	bne.n	8007356 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800731a:	68f8      	ldr	r0, [r7, #12]
 800731c:	f7ff fe81 	bl	8007022 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2200      	movs	r2, #0
 8007324:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007328:	e015      	b.n	8007356 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007330:	695b      	ldr	r3, [r3, #20]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d00d      	beq.n	8007352 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800733c:	2b03      	cmp	r3, #3
 800733e:	d108      	bne.n	8007352 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007346:	695b      	ldr	r3, [r3, #20]
 8007348:	7afa      	ldrb	r2, [r7, #11]
 800734a:	4611      	mov	r1, r2
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	4798      	blx	r3
 8007350:	e001      	b.n	8007356 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007352:	2302      	movs	r3, #2
 8007354:	e000      	b.n	8007358 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	3718      	adds	r7, #24
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007368:	2340      	movs	r3, #64	; 0x40
 800736a:	2200      	movs	r2, #0
 800736c:	2100      	movs	r1, #0
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f001 f9cb 	bl	800870a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2240      	movs	r2, #64	; 0x40
 8007380:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007384:	2340      	movs	r3, #64	; 0x40
 8007386:	2200      	movs	r2, #0
 8007388:	2180      	movs	r1, #128	; 0x80
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f001 f9bd 	bl	800870a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2240      	movs	r2, #64	; 0x40
 800739a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d009      	beq.n	80073d8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	6852      	ldr	r2, [r2, #4]
 80073d0:	b2d2      	uxtb	r2, r2
 80073d2:	4611      	mov	r1, r2
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	4798      	blx	r3
  }

  return USBD_OK;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3708      	adds	r7, #8
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80073e2:	b480      	push	{r7}
 80073e4:	b083      	sub	sp, #12
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
 80073ea:	460b      	mov	r3, r1
 80073ec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	78fa      	ldrb	r2, [r7, #3]
 80073f2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	370c      	adds	r7, #12
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bc80      	pop	{r7}
 80073fe:	4770      	bx	lr

08007400 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2204      	movs	r2, #4
 8007418:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	370c      	adds	r7, #12
 8007422:	46bd      	mov	sp, r7
 8007424:	bc80      	pop	{r7}
 8007426:	4770      	bx	lr

08007428 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007436:	2b04      	cmp	r3, #4
 8007438:	d105      	bne.n	8007446 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007446:	2300      	movs	r3, #0
}
 8007448:	4618      	mov	r0, r3
 800744a:	370c      	adds	r7, #12
 800744c:	46bd      	mov	sp, r7
 800744e:	bc80      	pop	{r7}
 8007450:	4770      	bx	lr

08007452 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007452:	b580      	push	{r7, lr}
 8007454:	b082      	sub	sp, #8
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007460:	2b03      	cmp	r3, #3
 8007462:	d10b      	bne.n	800747c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800746a:	69db      	ldr	r3, [r3, #28]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d005      	beq.n	800747c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007476:	69db      	ldr	r3, [r3, #28]
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3708      	adds	r7, #8
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
	...

08007488 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007492:	2300      	movs	r3, #0
 8007494:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800749e:	2b40      	cmp	r3, #64	; 0x40
 80074a0:	d005      	beq.n	80074ae <USBD_StdDevReq+0x26>
 80074a2:	2b40      	cmp	r3, #64	; 0x40
 80074a4:	d84f      	bhi.n	8007546 <USBD_StdDevReq+0xbe>
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d009      	beq.n	80074be <USBD_StdDevReq+0x36>
 80074aa:	2b20      	cmp	r3, #32
 80074ac:	d14b      	bne.n	8007546 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	6839      	ldr	r1, [r7, #0]
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	4798      	blx	r3
      break;
 80074bc:	e048      	b.n	8007550 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	785b      	ldrb	r3, [r3, #1]
 80074c2:	2b09      	cmp	r3, #9
 80074c4:	d839      	bhi.n	800753a <USBD_StdDevReq+0xb2>
 80074c6:	a201      	add	r2, pc, #4	; (adr r2, 80074cc <USBD_StdDevReq+0x44>)
 80074c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074cc:	0800751d 	.word	0x0800751d
 80074d0:	08007531 	.word	0x08007531
 80074d4:	0800753b 	.word	0x0800753b
 80074d8:	08007527 	.word	0x08007527
 80074dc:	0800753b 	.word	0x0800753b
 80074e0:	080074ff 	.word	0x080074ff
 80074e4:	080074f5 	.word	0x080074f5
 80074e8:	0800753b 	.word	0x0800753b
 80074ec:	08007513 	.word	0x08007513
 80074f0:	08007509 	.word	0x08007509
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80074f4:	6839      	ldr	r1, [r7, #0]
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 f9dc 	bl	80078b4 <USBD_GetDescriptor>
          break;
 80074fc:	e022      	b.n	8007544 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80074fe:	6839      	ldr	r1, [r7, #0]
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 fb3f 	bl	8007b84 <USBD_SetAddress>
          break;
 8007506:	e01d      	b.n	8007544 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007508:	6839      	ldr	r1, [r7, #0]
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 fb7e 	bl	8007c0c <USBD_SetConfig>
          break;
 8007510:	e018      	b.n	8007544 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007512:	6839      	ldr	r1, [r7, #0]
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 fc07 	bl	8007d28 <USBD_GetConfig>
          break;
 800751a:	e013      	b.n	8007544 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800751c:	6839      	ldr	r1, [r7, #0]
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 fc37 	bl	8007d92 <USBD_GetStatus>
          break;
 8007524:	e00e      	b.n	8007544 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007526:	6839      	ldr	r1, [r7, #0]
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 fc65 	bl	8007df8 <USBD_SetFeature>
          break;
 800752e:	e009      	b.n	8007544 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007530:	6839      	ldr	r1, [r7, #0]
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 fc74 	bl	8007e20 <USBD_ClrFeature>
          break;
 8007538:	e004      	b.n	8007544 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800753a:	6839      	ldr	r1, [r7, #0]
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 fccc 	bl	8007eda <USBD_CtlError>
          break;
 8007542:	bf00      	nop
      }
      break;
 8007544:	e004      	b.n	8007550 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007546:	6839      	ldr	r1, [r7, #0]
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 fcc6 	bl	8007eda <USBD_CtlError>
      break;
 800754e:	bf00      	nop
  }

  return ret;
 8007550:	7bfb      	ldrb	r3, [r7, #15]
}
 8007552:	4618      	mov	r0, r3
 8007554:	3710      	adds	r7, #16
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop

0800755c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007566:	2300      	movs	r3, #0
 8007568:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007572:	2b40      	cmp	r3, #64	; 0x40
 8007574:	d005      	beq.n	8007582 <USBD_StdItfReq+0x26>
 8007576:	2b40      	cmp	r3, #64	; 0x40
 8007578:	d82e      	bhi.n	80075d8 <USBD_StdItfReq+0x7c>
 800757a:	2b00      	cmp	r3, #0
 800757c:	d001      	beq.n	8007582 <USBD_StdItfReq+0x26>
 800757e:	2b20      	cmp	r3, #32
 8007580:	d12a      	bne.n	80075d8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007588:	3b01      	subs	r3, #1
 800758a:	2b02      	cmp	r3, #2
 800758c:	d81d      	bhi.n	80075ca <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	889b      	ldrh	r3, [r3, #4]
 8007592:	b2db      	uxtb	r3, r3
 8007594:	2b01      	cmp	r3, #1
 8007596:	d813      	bhi.n	80075c0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	6839      	ldr	r1, [r7, #0]
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	4798      	blx	r3
 80075a6:	4603      	mov	r3, r0
 80075a8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	88db      	ldrh	r3, [r3, #6]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d110      	bne.n	80075d4 <USBD_StdItfReq+0x78>
 80075b2:	7bfb      	ldrb	r3, [r7, #15]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d10d      	bne.n	80075d4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 fd56 	bl	800806a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80075be:	e009      	b.n	80075d4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80075c0:	6839      	ldr	r1, [r7, #0]
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 fc89 	bl	8007eda <USBD_CtlError>
          break;
 80075c8:	e004      	b.n	80075d4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80075ca:	6839      	ldr	r1, [r7, #0]
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 fc84 	bl	8007eda <USBD_CtlError>
          break;
 80075d2:	e000      	b.n	80075d6 <USBD_StdItfReq+0x7a>
          break;
 80075d4:	bf00      	nop
      }
      break;
 80075d6:	e004      	b.n	80075e2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80075d8:	6839      	ldr	r1, [r7, #0]
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 fc7d 	bl	8007eda <USBD_CtlError>
      break;
 80075e0:	bf00      	nop
  }

  return USBD_OK;
 80075e2:	2300      	movs	r3, #0
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3710      	adds	r7, #16
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80075f6:	2300      	movs	r3, #0
 80075f8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	889b      	ldrh	r3, [r3, #4]
 80075fe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007608:	2b40      	cmp	r3, #64	; 0x40
 800760a:	d007      	beq.n	800761c <USBD_StdEPReq+0x30>
 800760c:	2b40      	cmp	r3, #64	; 0x40
 800760e:	f200 8146 	bhi.w	800789e <USBD_StdEPReq+0x2b2>
 8007612:	2b00      	cmp	r3, #0
 8007614:	d00a      	beq.n	800762c <USBD_StdEPReq+0x40>
 8007616:	2b20      	cmp	r3, #32
 8007618:	f040 8141 	bne.w	800789e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	6839      	ldr	r1, [r7, #0]
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	4798      	blx	r3
      break;
 800762a:	e13d      	b.n	80078a8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007634:	2b20      	cmp	r3, #32
 8007636:	d10a      	bne.n	800764e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	6839      	ldr	r1, [r7, #0]
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	4798      	blx	r3
 8007646:	4603      	mov	r3, r0
 8007648:	73fb      	strb	r3, [r7, #15]

        return ret;
 800764a:	7bfb      	ldrb	r3, [r7, #15]
 800764c:	e12d      	b.n	80078aa <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	785b      	ldrb	r3, [r3, #1]
 8007652:	2b03      	cmp	r3, #3
 8007654:	d007      	beq.n	8007666 <USBD_StdEPReq+0x7a>
 8007656:	2b03      	cmp	r3, #3
 8007658:	f300 811b 	bgt.w	8007892 <USBD_StdEPReq+0x2a6>
 800765c:	2b00      	cmp	r3, #0
 800765e:	d072      	beq.n	8007746 <USBD_StdEPReq+0x15a>
 8007660:	2b01      	cmp	r3, #1
 8007662:	d03a      	beq.n	80076da <USBD_StdEPReq+0xee>
 8007664:	e115      	b.n	8007892 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800766c:	2b02      	cmp	r3, #2
 800766e:	d002      	beq.n	8007676 <USBD_StdEPReq+0x8a>
 8007670:	2b03      	cmp	r3, #3
 8007672:	d015      	beq.n	80076a0 <USBD_StdEPReq+0xb4>
 8007674:	e02b      	b.n	80076ce <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007676:	7bbb      	ldrb	r3, [r7, #14]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d00c      	beq.n	8007696 <USBD_StdEPReq+0xaa>
 800767c:	7bbb      	ldrb	r3, [r7, #14]
 800767e:	2b80      	cmp	r3, #128	; 0x80
 8007680:	d009      	beq.n	8007696 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007682:	7bbb      	ldrb	r3, [r7, #14]
 8007684:	4619      	mov	r1, r3
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f001 f884 	bl	8008794 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800768c:	2180      	movs	r1, #128	; 0x80
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f001 f880 	bl	8008794 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007694:	e020      	b.n	80076d8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007696:	6839      	ldr	r1, [r7, #0]
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 fc1e 	bl	8007eda <USBD_CtlError>
              break;
 800769e:	e01b      	b.n	80076d8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	885b      	ldrh	r3, [r3, #2]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d10e      	bne.n	80076c6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80076a8:	7bbb      	ldrb	r3, [r7, #14]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00b      	beq.n	80076c6 <USBD_StdEPReq+0xda>
 80076ae:	7bbb      	ldrb	r3, [r7, #14]
 80076b0:	2b80      	cmp	r3, #128	; 0x80
 80076b2:	d008      	beq.n	80076c6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	88db      	ldrh	r3, [r3, #6]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d104      	bne.n	80076c6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80076bc:	7bbb      	ldrb	r3, [r7, #14]
 80076be:	4619      	mov	r1, r3
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f001 f867 	bl	8008794 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 fccf 	bl	800806a <USBD_CtlSendStatus>

              break;
 80076cc:	e004      	b.n	80076d8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80076ce:	6839      	ldr	r1, [r7, #0]
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 fc02 	bl	8007eda <USBD_CtlError>
              break;
 80076d6:	bf00      	nop
          }
          break;
 80076d8:	e0e0      	b.n	800789c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	d002      	beq.n	80076ea <USBD_StdEPReq+0xfe>
 80076e4:	2b03      	cmp	r3, #3
 80076e6:	d015      	beq.n	8007714 <USBD_StdEPReq+0x128>
 80076e8:	e026      	b.n	8007738 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076ea:	7bbb      	ldrb	r3, [r7, #14]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d00c      	beq.n	800770a <USBD_StdEPReq+0x11e>
 80076f0:	7bbb      	ldrb	r3, [r7, #14]
 80076f2:	2b80      	cmp	r3, #128	; 0x80
 80076f4:	d009      	beq.n	800770a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80076f6:	7bbb      	ldrb	r3, [r7, #14]
 80076f8:	4619      	mov	r1, r3
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f001 f84a 	bl	8008794 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007700:	2180      	movs	r1, #128	; 0x80
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f001 f846 	bl	8008794 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007708:	e01c      	b.n	8007744 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800770a:	6839      	ldr	r1, [r7, #0]
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 fbe4 	bl	8007eda <USBD_CtlError>
              break;
 8007712:	e017      	b.n	8007744 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	885b      	ldrh	r3, [r3, #2]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d112      	bne.n	8007742 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800771c:	7bbb      	ldrb	r3, [r7, #14]
 800771e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007722:	2b00      	cmp	r3, #0
 8007724:	d004      	beq.n	8007730 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007726:	7bbb      	ldrb	r3, [r7, #14]
 8007728:	4619      	mov	r1, r3
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f001 f851 	bl	80087d2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 fc9a 	bl	800806a <USBD_CtlSendStatus>
              }
              break;
 8007736:	e004      	b.n	8007742 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007738:	6839      	ldr	r1, [r7, #0]
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 fbcd 	bl	8007eda <USBD_CtlError>
              break;
 8007740:	e000      	b.n	8007744 <USBD_StdEPReq+0x158>
              break;
 8007742:	bf00      	nop
          }
          break;
 8007744:	e0aa      	b.n	800789c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800774c:	2b02      	cmp	r3, #2
 800774e:	d002      	beq.n	8007756 <USBD_StdEPReq+0x16a>
 8007750:	2b03      	cmp	r3, #3
 8007752:	d032      	beq.n	80077ba <USBD_StdEPReq+0x1ce>
 8007754:	e097      	b.n	8007886 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007756:	7bbb      	ldrb	r3, [r7, #14]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d007      	beq.n	800776c <USBD_StdEPReq+0x180>
 800775c:	7bbb      	ldrb	r3, [r7, #14]
 800775e:	2b80      	cmp	r3, #128	; 0x80
 8007760:	d004      	beq.n	800776c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007762:	6839      	ldr	r1, [r7, #0]
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 fbb8 	bl	8007eda <USBD_CtlError>
                break;
 800776a:	e091      	b.n	8007890 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800776c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007770:	2b00      	cmp	r3, #0
 8007772:	da0b      	bge.n	800778c <USBD_StdEPReq+0x1a0>
 8007774:	7bbb      	ldrb	r3, [r7, #14]
 8007776:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800777a:	4613      	mov	r3, r2
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	4413      	add	r3, r2
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	3310      	adds	r3, #16
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	4413      	add	r3, r2
 8007788:	3304      	adds	r3, #4
 800778a:	e00b      	b.n	80077a4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800778c:	7bbb      	ldrb	r3, [r7, #14]
 800778e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007792:	4613      	mov	r3, r2
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	4413      	add	r3, r2
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	4413      	add	r3, r2
 80077a2:	3304      	adds	r3, #4
 80077a4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	2200      	movs	r2, #0
 80077aa:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	2202      	movs	r2, #2
 80077b0:	4619      	mov	r1, r3
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 fbfb 	bl	8007fae <USBD_CtlSendData>
              break;
 80077b8:	e06a      	b.n	8007890 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80077ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	da11      	bge.n	80077e6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80077c2:	7bbb      	ldrb	r3, [r7, #14]
 80077c4:	f003 020f 	and.w	r2, r3, #15
 80077c8:	6879      	ldr	r1, [r7, #4]
 80077ca:	4613      	mov	r3, r2
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	4413      	add	r3, r2
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	440b      	add	r3, r1
 80077d4:	3318      	adds	r3, #24
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d117      	bne.n	800780c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80077dc:	6839      	ldr	r1, [r7, #0]
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 fb7b 	bl	8007eda <USBD_CtlError>
                  break;
 80077e4:	e054      	b.n	8007890 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80077e6:	7bbb      	ldrb	r3, [r7, #14]
 80077e8:	f003 020f 	and.w	r2, r3, #15
 80077ec:	6879      	ldr	r1, [r7, #4]
 80077ee:	4613      	mov	r3, r2
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	4413      	add	r3, r2
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	440b      	add	r3, r1
 80077f8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d104      	bne.n	800780c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007802:	6839      	ldr	r1, [r7, #0]
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 fb68 	bl	8007eda <USBD_CtlError>
                  break;
 800780a:	e041      	b.n	8007890 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800780c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007810:	2b00      	cmp	r3, #0
 8007812:	da0b      	bge.n	800782c <USBD_StdEPReq+0x240>
 8007814:	7bbb      	ldrb	r3, [r7, #14]
 8007816:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800781a:	4613      	mov	r3, r2
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	4413      	add	r3, r2
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	3310      	adds	r3, #16
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	4413      	add	r3, r2
 8007828:	3304      	adds	r3, #4
 800782a:	e00b      	b.n	8007844 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800782c:	7bbb      	ldrb	r3, [r7, #14]
 800782e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007832:	4613      	mov	r3, r2
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	4413      	add	r3, r2
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	4413      	add	r3, r2
 8007842:	3304      	adds	r3, #4
 8007844:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007846:	7bbb      	ldrb	r3, [r7, #14]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d002      	beq.n	8007852 <USBD_StdEPReq+0x266>
 800784c:	7bbb      	ldrb	r3, [r7, #14]
 800784e:	2b80      	cmp	r3, #128	; 0x80
 8007850:	d103      	bne.n	800785a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	2200      	movs	r2, #0
 8007856:	601a      	str	r2, [r3, #0]
 8007858:	e00e      	b.n	8007878 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800785a:	7bbb      	ldrb	r3, [r7, #14]
 800785c:	4619      	mov	r1, r3
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 ffd6 	bl	8008810 <USBD_LL_IsStallEP>
 8007864:	4603      	mov	r3, r0
 8007866:	2b00      	cmp	r3, #0
 8007868:	d003      	beq.n	8007872 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	2201      	movs	r2, #1
 800786e:	601a      	str	r2, [r3, #0]
 8007870:	e002      	b.n	8007878 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	2200      	movs	r2, #0
 8007876:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	2202      	movs	r2, #2
 800787c:	4619      	mov	r1, r3
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 fb95 	bl	8007fae <USBD_CtlSendData>
              break;
 8007884:	e004      	b.n	8007890 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007886:	6839      	ldr	r1, [r7, #0]
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 fb26 	bl	8007eda <USBD_CtlError>
              break;
 800788e:	bf00      	nop
          }
          break;
 8007890:	e004      	b.n	800789c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007892:	6839      	ldr	r1, [r7, #0]
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 fb20 	bl	8007eda <USBD_CtlError>
          break;
 800789a:	bf00      	nop
      }
      break;
 800789c:	e004      	b.n	80078a8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800789e:	6839      	ldr	r1, [r7, #0]
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 fb1a 	bl	8007eda <USBD_CtlError>
      break;
 80078a6:	bf00      	nop
  }

  return ret;
 80078a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
	...

080078b4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80078be:	2300      	movs	r3, #0
 80078c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80078c2:	2300      	movs	r3, #0
 80078c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80078c6:	2300      	movs	r3, #0
 80078c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	885b      	ldrh	r3, [r3, #2]
 80078ce:	0a1b      	lsrs	r3, r3, #8
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	3b01      	subs	r3, #1
 80078d4:	2b06      	cmp	r3, #6
 80078d6:	f200 8128 	bhi.w	8007b2a <USBD_GetDescriptor+0x276>
 80078da:	a201      	add	r2, pc, #4	; (adr r2, 80078e0 <USBD_GetDescriptor+0x2c>)
 80078dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e0:	080078fd 	.word	0x080078fd
 80078e4:	08007915 	.word	0x08007915
 80078e8:	08007955 	.word	0x08007955
 80078ec:	08007b2b 	.word	0x08007b2b
 80078f0:	08007b2b 	.word	0x08007b2b
 80078f4:	08007acb 	.word	0x08007acb
 80078f8:	08007af7 	.word	0x08007af7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	7c12      	ldrb	r2, [r2, #16]
 8007908:	f107 0108 	add.w	r1, r7, #8
 800790c:	4610      	mov	r0, r2
 800790e:	4798      	blx	r3
 8007910:	60f8      	str	r0, [r7, #12]
      break;
 8007912:	e112      	b.n	8007b3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	7c1b      	ldrb	r3, [r3, #16]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d10d      	bne.n	8007938 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007924:	f107 0208 	add.w	r2, r7, #8
 8007928:	4610      	mov	r0, r2
 800792a:	4798      	blx	r3
 800792c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	3301      	adds	r3, #1
 8007932:	2202      	movs	r2, #2
 8007934:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007936:	e100      	b.n	8007b3a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800793e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007940:	f107 0208 	add.w	r2, r7, #8
 8007944:	4610      	mov	r0, r2
 8007946:	4798      	blx	r3
 8007948:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	3301      	adds	r3, #1
 800794e:	2202      	movs	r2, #2
 8007950:	701a      	strb	r2, [r3, #0]
      break;
 8007952:	e0f2      	b.n	8007b3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	885b      	ldrh	r3, [r3, #2]
 8007958:	b2db      	uxtb	r3, r3
 800795a:	2b05      	cmp	r3, #5
 800795c:	f200 80ac 	bhi.w	8007ab8 <USBD_GetDescriptor+0x204>
 8007960:	a201      	add	r2, pc, #4	; (adr r2, 8007968 <USBD_GetDescriptor+0xb4>)
 8007962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007966:	bf00      	nop
 8007968:	08007981 	.word	0x08007981
 800796c:	080079b5 	.word	0x080079b5
 8007970:	080079e9 	.word	0x080079e9
 8007974:	08007a1d 	.word	0x08007a1d
 8007978:	08007a51 	.word	0x08007a51
 800797c:	08007a85 	.word	0x08007a85
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d00b      	beq.n	80079a4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	7c12      	ldrb	r2, [r2, #16]
 8007998:	f107 0108 	add.w	r1, r7, #8
 800799c:	4610      	mov	r0, r2
 800799e:	4798      	blx	r3
 80079a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079a2:	e091      	b.n	8007ac8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079a4:	6839      	ldr	r1, [r7, #0]
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 fa97 	bl	8007eda <USBD_CtlError>
            err++;
 80079ac:	7afb      	ldrb	r3, [r7, #11]
 80079ae:	3301      	adds	r3, #1
 80079b0:	72fb      	strb	r3, [r7, #11]
          break;
 80079b2:	e089      	b.n	8007ac8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d00b      	beq.n	80079d8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	7c12      	ldrb	r2, [r2, #16]
 80079cc:	f107 0108 	add.w	r1, r7, #8
 80079d0:	4610      	mov	r0, r2
 80079d2:	4798      	blx	r3
 80079d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079d6:	e077      	b.n	8007ac8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079d8:	6839      	ldr	r1, [r7, #0]
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 fa7d 	bl	8007eda <USBD_CtlError>
            err++;
 80079e0:	7afb      	ldrb	r3, [r7, #11]
 80079e2:	3301      	adds	r3, #1
 80079e4:	72fb      	strb	r3, [r7, #11]
          break;
 80079e6:	e06f      	b.n	8007ac8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d00b      	beq.n	8007a0c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	7c12      	ldrb	r2, [r2, #16]
 8007a00:	f107 0108 	add.w	r1, r7, #8
 8007a04:	4610      	mov	r0, r2
 8007a06:	4798      	blx	r3
 8007a08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a0a:	e05d      	b.n	8007ac8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a0c:	6839      	ldr	r1, [r7, #0]
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 fa63 	bl	8007eda <USBD_CtlError>
            err++;
 8007a14:	7afb      	ldrb	r3, [r7, #11]
 8007a16:	3301      	adds	r3, #1
 8007a18:	72fb      	strb	r3, [r7, #11]
          break;
 8007a1a:	e055      	b.n	8007ac8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a22:	691b      	ldr	r3, [r3, #16]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00b      	beq.n	8007a40 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a2e:	691b      	ldr	r3, [r3, #16]
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	7c12      	ldrb	r2, [r2, #16]
 8007a34:	f107 0108 	add.w	r1, r7, #8
 8007a38:	4610      	mov	r0, r2
 8007a3a:	4798      	blx	r3
 8007a3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a3e:	e043      	b.n	8007ac8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a40:	6839      	ldr	r1, [r7, #0]
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 fa49 	bl	8007eda <USBD_CtlError>
            err++;
 8007a48:	7afb      	ldrb	r3, [r7, #11]
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	72fb      	strb	r3, [r7, #11]
          break;
 8007a4e:	e03b      	b.n	8007ac8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a56:	695b      	ldr	r3, [r3, #20]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d00b      	beq.n	8007a74 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a62:	695b      	ldr	r3, [r3, #20]
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	7c12      	ldrb	r2, [r2, #16]
 8007a68:	f107 0108 	add.w	r1, r7, #8
 8007a6c:	4610      	mov	r0, r2
 8007a6e:	4798      	blx	r3
 8007a70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a72:	e029      	b.n	8007ac8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a74:	6839      	ldr	r1, [r7, #0]
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 fa2f 	bl	8007eda <USBD_CtlError>
            err++;
 8007a7c:	7afb      	ldrb	r3, [r7, #11]
 8007a7e:	3301      	adds	r3, #1
 8007a80:	72fb      	strb	r3, [r7, #11]
          break;
 8007a82:	e021      	b.n	8007ac8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a8a:	699b      	ldr	r3, [r3, #24]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d00b      	beq.n	8007aa8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a96:	699b      	ldr	r3, [r3, #24]
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	7c12      	ldrb	r2, [r2, #16]
 8007a9c:	f107 0108 	add.w	r1, r7, #8
 8007aa0:	4610      	mov	r0, r2
 8007aa2:	4798      	blx	r3
 8007aa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007aa6:	e00f      	b.n	8007ac8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007aa8:	6839      	ldr	r1, [r7, #0]
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 fa15 	bl	8007eda <USBD_CtlError>
            err++;
 8007ab0:	7afb      	ldrb	r3, [r7, #11]
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ab6:	e007      	b.n	8007ac8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007ab8:	6839      	ldr	r1, [r7, #0]
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 fa0d 	bl	8007eda <USBD_CtlError>
          err++;
 8007ac0:	7afb      	ldrb	r3, [r7, #11]
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007ac6:	e038      	b.n	8007b3a <USBD_GetDescriptor+0x286>
 8007ac8:	e037      	b.n	8007b3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	7c1b      	ldrb	r3, [r3, #16]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d109      	bne.n	8007ae6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ada:	f107 0208 	add.w	r2, r7, #8
 8007ade:	4610      	mov	r0, r2
 8007ae0:	4798      	blx	r3
 8007ae2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ae4:	e029      	b.n	8007b3a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007ae6:	6839      	ldr	r1, [r7, #0]
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 f9f6 	bl	8007eda <USBD_CtlError>
        err++;
 8007aee:	7afb      	ldrb	r3, [r7, #11]
 8007af0:	3301      	adds	r3, #1
 8007af2:	72fb      	strb	r3, [r7, #11]
      break;
 8007af4:	e021      	b.n	8007b3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	7c1b      	ldrb	r3, [r3, #16]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d10d      	bne.n	8007b1a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b06:	f107 0208 	add.w	r2, r7, #8
 8007b0a:	4610      	mov	r0, r2
 8007b0c:	4798      	blx	r3
 8007b0e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	3301      	adds	r3, #1
 8007b14:	2207      	movs	r2, #7
 8007b16:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b18:	e00f      	b.n	8007b3a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007b1a:	6839      	ldr	r1, [r7, #0]
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 f9dc 	bl	8007eda <USBD_CtlError>
        err++;
 8007b22:	7afb      	ldrb	r3, [r7, #11]
 8007b24:	3301      	adds	r3, #1
 8007b26:	72fb      	strb	r3, [r7, #11]
      break;
 8007b28:	e007      	b.n	8007b3a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007b2a:	6839      	ldr	r1, [r7, #0]
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 f9d4 	bl	8007eda <USBD_CtlError>
      err++;
 8007b32:	7afb      	ldrb	r3, [r7, #11]
 8007b34:	3301      	adds	r3, #1
 8007b36:	72fb      	strb	r3, [r7, #11]
      break;
 8007b38:	bf00      	nop
  }

  if (err != 0U)
 8007b3a:	7afb      	ldrb	r3, [r7, #11]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d11c      	bne.n	8007b7a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007b40:	893b      	ldrh	r3, [r7, #8]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d011      	beq.n	8007b6a <USBD_GetDescriptor+0x2b6>
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	88db      	ldrh	r3, [r3, #6]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00d      	beq.n	8007b6a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	88da      	ldrh	r2, [r3, #6]
 8007b52:	893b      	ldrh	r3, [r7, #8]
 8007b54:	4293      	cmp	r3, r2
 8007b56:	bf28      	it	cs
 8007b58:	4613      	movcs	r3, r2
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007b5e:	893b      	ldrh	r3, [r7, #8]
 8007b60:	461a      	mov	r2, r3
 8007b62:	68f9      	ldr	r1, [r7, #12]
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 fa22 	bl	8007fae <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	88db      	ldrh	r3, [r3, #6]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d104      	bne.n	8007b7c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fa79 	bl	800806a <USBD_CtlSendStatus>
 8007b78:	e000      	b.n	8007b7c <USBD_GetDescriptor+0x2c8>
    return;
 8007b7a:	bf00      	nop
    }
  }
}
 8007b7c:	3710      	adds	r7, #16
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop

08007b84 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	889b      	ldrh	r3, [r3, #4]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d130      	bne.n	8007bf8 <USBD_SetAddress+0x74>
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	88db      	ldrh	r3, [r3, #6]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d12c      	bne.n	8007bf8 <USBD_SetAddress+0x74>
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	885b      	ldrh	r3, [r3, #2]
 8007ba2:	2b7f      	cmp	r3, #127	; 0x7f
 8007ba4:	d828      	bhi.n	8007bf8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	885b      	ldrh	r3, [r3, #2]
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bb0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bb8:	2b03      	cmp	r3, #3
 8007bba:	d104      	bne.n	8007bc6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007bbc:	6839      	ldr	r1, [r7, #0]
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 f98b 	bl	8007eda <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bc4:	e01d      	b.n	8007c02 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	7bfa      	ldrb	r2, [r7, #15]
 8007bca:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007bce:	7bfb      	ldrb	r3, [r7, #15]
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 fe48 	bl	8008868 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 fa46 	bl	800806a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007bde:	7bfb      	ldrb	r3, [r7, #15]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d004      	beq.n	8007bee <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2202      	movs	r2, #2
 8007be8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bec:	e009      	b.n	8007c02 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bf6:	e004      	b.n	8007c02 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007bf8:	6839      	ldr	r1, [r7, #0]
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 f96d 	bl	8007eda <USBD_CtlError>
  }
}
 8007c00:	bf00      	nop
 8007c02:	bf00      	nop
 8007c04:	3710      	adds	r7, #16
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
	...

08007c0c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b082      	sub	sp, #8
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	885b      	ldrh	r3, [r3, #2]
 8007c1a:	b2da      	uxtb	r2, r3
 8007c1c:	4b41      	ldr	r3, [pc, #260]	; (8007d24 <USBD_SetConfig+0x118>)
 8007c1e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007c20:	4b40      	ldr	r3, [pc, #256]	; (8007d24 <USBD_SetConfig+0x118>)
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d904      	bls.n	8007c32 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007c28:	6839      	ldr	r1, [r7, #0]
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 f955 	bl	8007eda <USBD_CtlError>
 8007c30:	e075      	b.n	8007d1e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c38:	2b02      	cmp	r3, #2
 8007c3a:	d002      	beq.n	8007c42 <USBD_SetConfig+0x36>
 8007c3c:	2b03      	cmp	r3, #3
 8007c3e:	d023      	beq.n	8007c88 <USBD_SetConfig+0x7c>
 8007c40:	e062      	b.n	8007d08 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007c42:	4b38      	ldr	r3, [pc, #224]	; (8007d24 <USBD_SetConfig+0x118>)
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d01a      	beq.n	8007c80 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007c4a:	4b36      	ldr	r3, [pc, #216]	; (8007d24 <USBD_SetConfig+0x118>)
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	461a      	mov	r2, r3
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2203      	movs	r2, #3
 8007c58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007c5c:	4b31      	ldr	r3, [pc, #196]	; (8007d24 <USBD_SetConfig+0x118>)
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	4619      	mov	r1, r3
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f7ff f9e7 	bl	8007036 <USBD_SetClassConfig>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b02      	cmp	r3, #2
 8007c6c:	d104      	bne.n	8007c78 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007c6e:	6839      	ldr	r1, [r7, #0]
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 f932 	bl	8007eda <USBD_CtlError>
            return;
 8007c76:	e052      	b.n	8007d1e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 f9f6 	bl	800806a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007c7e:	e04e      	b.n	8007d1e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 f9f2 	bl	800806a <USBD_CtlSendStatus>
        break;
 8007c86:	e04a      	b.n	8007d1e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007c88:	4b26      	ldr	r3, [pc, #152]	; (8007d24 <USBD_SetConfig+0x118>)
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d112      	bne.n	8007cb6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2202      	movs	r2, #2
 8007c94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007c98:	4b22      	ldr	r3, [pc, #136]	; (8007d24 <USBD_SetConfig+0x118>)
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007ca2:	4b20      	ldr	r3, [pc, #128]	; (8007d24 <USBD_SetConfig+0x118>)
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f7ff f9e3 	bl	8007074 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 f9db 	bl	800806a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007cb4:	e033      	b.n	8007d1e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007cb6:	4b1b      	ldr	r3, [pc, #108]	; (8007d24 <USBD_SetConfig+0x118>)
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	461a      	mov	r2, r3
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d01d      	beq.n	8007d00 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	4619      	mov	r1, r3
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f7ff f9d1 	bl	8007074 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007cd2:	4b14      	ldr	r3, [pc, #80]	; (8007d24 <USBD_SetConfig+0x118>)
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007cdc:	4b11      	ldr	r3, [pc, #68]	; (8007d24 <USBD_SetConfig+0x118>)
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f7ff f9a7 	bl	8007036 <USBD_SetClassConfig>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b02      	cmp	r3, #2
 8007cec:	d104      	bne.n	8007cf8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007cee:	6839      	ldr	r1, [r7, #0]
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 f8f2 	bl	8007eda <USBD_CtlError>
            return;
 8007cf6:	e012      	b.n	8007d1e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 f9b6 	bl	800806a <USBD_CtlSendStatus>
        break;
 8007cfe:	e00e      	b.n	8007d1e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 f9b2 	bl	800806a <USBD_CtlSendStatus>
        break;
 8007d06:	e00a      	b.n	8007d1e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007d08:	6839      	ldr	r1, [r7, #0]
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 f8e5 	bl	8007eda <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007d10:	4b04      	ldr	r3, [pc, #16]	; (8007d24 <USBD_SetConfig+0x118>)
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	4619      	mov	r1, r3
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f7ff f9ac 	bl	8007074 <USBD_ClrClassConfig>
        break;
 8007d1c:	bf00      	nop
    }
  }
}
 8007d1e:	3708      	adds	r7, #8
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	200003b8 	.word	0x200003b8

08007d28 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	88db      	ldrh	r3, [r3, #6]
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d004      	beq.n	8007d44 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007d3a:	6839      	ldr	r1, [r7, #0]
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 f8cc 	bl	8007eda <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007d42:	e022      	b.n	8007d8a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d4a:	2b02      	cmp	r3, #2
 8007d4c:	dc02      	bgt.n	8007d54 <USBD_GetConfig+0x2c>
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	dc03      	bgt.n	8007d5a <USBD_GetConfig+0x32>
 8007d52:	e015      	b.n	8007d80 <USBD_GetConfig+0x58>
 8007d54:	2b03      	cmp	r3, #3
 8007d56:	d00b      	beq.n	8007d70 <USBD_GetConfig+0x48>
 8007d58:	e012      	b.n	8007d80 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	3308      	adds	r3, #8
 8007d64:	2201      	movs	r2, #1
 8007d66:	4619      	mov	r1, r3
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 f920 	bl	8007fae <USBD_CtlSendData>
        break;
 8007d6e:	e00c      	b.n	8007d8a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	3304      	adds	r3, #4
 8007d74:	2201      	movs	r2, #1
 8007d76:	4619      	mov	r1, r3
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 f918 	bl	8007fae <USBD_CtlSendData>
        break;
 8007d7e:	e004      	b.n	8007d8a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007d80:	6839      	ldr	r1, [r7, #0]
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 f8a9 	bl	8007eda <USBD_CtlError>
        break;
 8007d88:	bf00      	nop
}
 8007d8a:	bf00      	nop
 8007d8c:	3708      	adds	r7, #8
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}

08007d92 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d92:	b580      	push	{r7, lr}
 8007d94:	b082      	sub	sp, #8
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
 8007d9a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007da2:	3b01      	subs	r3, #1
 8007da4:	2b02      	cmp	r3, #2
 8007da6:	d81e      	bhi.n	8007de6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	88db      	ldrh	r3, [r3, #6]
 8007dac:	2b02      	cmp	r3, #2
 8007dae:	d004      	beq.n	8007dba <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007db0:	6839      	ldr	r1, [r7, #0]
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 f891 	bl	8007eda <USBD_CtlError>
        break;
 8007db8:	e01a      	b.n	8007df0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d005      	beq.n	8007dd6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	68db      	ldr	r3, [r3, #12]
 8007dce:	f043 0202 	orr.w	r2, r3, #2
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	330c      	adds	r3, #12
 8007dda:	2202      	movs	r2, #2
 8007ddc:	4619      	mov	r1, r3
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 f8e5 	bl	8007fae <USBD_CtlSendData>
      break;
 8007de4:	e004      	b.n	8007df0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007de6:	6839      	ldr	r1, [r7, #0]
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 f876 	bl	8007eda <USBD_CtlError>
      break;
 8007dee:	bf00      	nop
  }
}
 8007df0:	bf00      	nop
 8007df2:	3708      	adds	r7, #8
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	885b      	ldrh	r3, [r3, #2]
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d106      	bne.n	8007e18 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 f929 	bl	800806a <USBD_CtlSendStatus>
  }
}
 8007e18:	bf00      	nop
 8007e1a:	3708      	adds	r7, #8
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e30:	3b01      	subs	r3, #1
 8007e32:	2b02      	cmp	r3, #2
 8007e34:	d80b      	bhi.n	8007e4e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	885b      	ldrh	r3, [r3, #2]
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d10c      	bne.n	8007e58 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 f90f 	bl	800806a <USBD_CtlSendStatus>
      }
      break;
 8007e4c:	e004      	b.n	8007e58 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007e4e:	6839      	ldr	r1, [r7, #0]
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 f842 	bl	8007eda <USBD_CtlError>
      break;
 8007e56:	e000      	b.n	8007e5a <USBD_ClrFeature+0x3a>
      break;
 8007e58:	bf00      	nop
  }
}
 8007e5a:	bf00      	nop
 8007e5c:	3708      	adds	r7, #8
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007e62:	b480      	push	{r7}
 8007e64:	b083      	sub	sp, #12
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
 8007e6a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	781a      	ldrb	r2, [r3, #0]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	785a      	ldrb	r2, [r3, #1]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	3302      	adds	r3, #2
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	b29a      	uxth	r2, r3
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	3303      	adds	r3, #3
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	021b      	lsls	r3, r3, #8
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	4413      	add	r3, r2
 8007e92:	b29a      	uxth	r2, r3
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	3304      	adds	r3, #4
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	b29a      	uxth	r2, r3
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	3305      	adds	r3, #5
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	021b      	lsls	r3, r3, #8
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	4413      	add	r3, r2
 8007eae:	b29a      	uxth	r2, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	3306      	adds	r3, #6
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	b29a      	uxth	r2, r3
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	3307      	adds	r3, #7
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	021b      	lsls	r3, r3, #8
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	4413      	add	r3, r2
 8007eca:	b29a      	uxth	r2, r3
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	80da      	strh	r2, [r3, #6]

}
 8007ed0:	bf00      	nop
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bc80      	pop	{r7}
 8007ed8:	4770      	bx	lr

08007eda <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b082      	sub	sp, #8
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
 8007ee2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007ee4:	2180      	movs	r1, #128	; 0x80
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 fc54 	bl	8008794 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007eec:	2100      	movs	r1, #0
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 fc50 	bl	8008794 <USBD_LL_StallEP>
}
 8007ef4:	bf00      	nop
 8007ef6:	3708      	adds	r7, #8
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b086      	sub	sp, #24
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d032      	beq.n	8007f78 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007f12:	68f8      	ldr	r0, [r7, #12]
 8007f14:	f000 f834 	bl	8007f80 <USBD_GetLen>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	005b      	lsls	r3, r3, #1
 8007f20:	b29a      	uxth	r2, r3
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007f26:	7dfb      	ldrb	r3, [r7, #23]
 8007f28:	1c5a      	adds	r2, r3, #1
 8007f2a:	75fa      	strb	r2, [r7, #23]
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	4413      	add	r3, r2
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	7812      	ldrb	r2, [r2, #0]
 8007f36:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007f38:	7dfb      	ldrb	r3, [r7, #23]
 8007f3a:	1c5a      	adds	r2, r3, #1
 8007f3c:	75fa      	strb	r2, [r7, #23]
 8007f3e:	461a      	mov	r2, r3
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	4413      	add	r3, r2
 8007f44:	2203      	movs	r2, #3
 8007f46:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007f48:	e012      	b.n	8007f70 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	1c5a      	adds	r2, r3, #1
 8007f4e:	60fa      	str	r2, [r7, #12]
 8007f50:	7dfa      	ldrb	r2, [r7, #23]
 8007f52:	1c51      	adds	r1, r2, #1
 8007f54:	75f9      	strb	r1, [r7, #23]
 8007f56:	4611      	mov	r1, r2
 8007f58:	68ba      	ldr	r2, [r7, #8]
 8007f5a:	440a      	add	r2, r1
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007f60:	7dfb      	ldrb	r3, [r7, #23]
 8007f62:	1c5a      	adds	r2, r3, #1
 8007f64:	75fa      	strb	r2, [r7, #23]
 8007f66:	461a      	mov	r2, r3
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	4413      	add	r3, r2
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d1e8      	bne.n	8007f4a <USBD_GetString+0x4e>
    }
  }
}
 8007f78:	bf00      	nop
 8007f7a:	3718      	adds	r7, #24
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b085      	sub	sp, #20
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007f8c:	e005      	b.n	8007f9a <USBD_GetLen+0x1a>
  {
    len++;
 8007f8e:	7bfb      	ldrb	r3, [r7, #15]
 8007f90:	3301      	adds	r3, #1
 8007f92:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	3301      	adds	r3, #1
 8007f98:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1f5      	bne.n	8007f8e <USBD_GetLen+0xe>
  }

  return len;
 8007fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3714      	adds	r7, #20
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bc80      	pop	{r7}
 8007fac:	4770      	bx	lr

08007fae <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007fae:	b580      	push	{r7, lr}
 8007fb0:	b084      	sub	sp, #16
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	60f8      	str	r0, [r7, #12]
 8007fb6:	60b9      	str	r1, [r7, #8]
 8007fb8:	4613      	mov	r3, r2
 8007fba:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007fc4:	88fa      	ldrh	r2, [r7, #6]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007fca:	88fa      	ldrh	r2, [r7, #6]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007fd0:	88fb      	ldrh	r3, [r7, #6]
 8007fd2:	68ba      	ldr	r2, [r7, #8]
 8007fd4:	2100      	movs	r1, #0
 8007fd6:	68f8      	ldr	r0, [r7, #12]
 8007fd8:	f000 fc65 	bl	80088a6 <USBD_LL_Transmit>

  return USBD_OK;
 8007fdc:	2300      	movs	r3, #0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3710      	adds	r7, #16
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b084      	sub	sp, #16
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	60f8      	str	r0, [r7, #12]
 8007fee:	60b9      	str	r1, [r7, #8]
 8007ff0:	4613      	mov	r3, r2
 8007ff2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ff4:	88fb      	ldrh	r3, [r7, #6]
 8007ff6:	68ba      	ldr	r2, [r7, #8]
 8007ff8:	2100      	movs	r1, #0
 8007ffa:	68f8      	ldr	r0, [r7, #12]
 8007ffc:	f000 fc53 	bl	80088a6 <USBD_LL_Transmit>

  return USBD_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3710      	adds	r7, #16
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}

0800800a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800800a:	b580      	push	{r7, lr}
 800800c:	b084      	sub	sp, #16
 800800e:	af00      	add	r7, sp, #0
 8008010:	60f8      	str	r0, [r7, #12]
 8008012:	60b9      	str	r1, [r7, #8]
 8008014:	4613      	mov	r3, r2
 8008016:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2203      	movs	r2, #3
 800801c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008020:	88fa      	ldrh	r2, [r7, #6]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008028:	88fa      	ldrh	r2, [r7, #6]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008030:	88fb      	ldrh	r3, [r7, #6]
 8008032:	68ba      	ldr	r2, [r7, #8]
 8008034:	2100      	movs	r1, #0
 8008036:	68f8      	ldr	r0, [r7, #12]
 8008038:	f000 fc58 	bl	80088ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800803c:	2300      	movs	r3, #0
}
 800803e:	4618      	mov	r0, r3
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008046:	b580      	push	{r7, lr}
 8008048:	b084      	sub	sp, #16
 800804a:	af00      	add	r7, sp, #0
 800804c:	60f8      	str	r0, [r7, #12]
 800804e:	60b9      	str	r1, [r7, #8]
 8008050:	4613      	mov	r3, r2
 8008052:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008054:	88fb      	ldrh	r3, [r7, #6]
 8008056:	68ba      	ldr	r2, [r7, #8]
 8008058:	2100      	movs	r1, #0
 800805a:	68f8      	ldr	r0, [r7, #12]
 800805c:	f000 fc46 	bl	80088ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}

0800806a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800806a:	b580      	push	{r7, lr}
 800806c:	b082      	sub	sp, #8
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2204      	movs	r2, #4
 8008076:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800807a:	2300      	movs	r3, #0
 800807c:	2200      	movs	r2, #0
 800807e:	2100      	movs	r1, #0
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 fc10 	bl	80088a6 <USBD_LL_Transmit>

  return USBD_OK;
 8008086:	2300      	movs	r3, #0
}
 8008088:	4618      	mov	r0, r3
 800808a:	3708      	adds	r7, #8
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2205      	movs	r2, #5
 800809c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080a0:	2300      	movs	r3, #0
 80080a2:	2200      	movs	r2, #0
 80080a4:	2100      	movs	r1, #0
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 fc20 	bl	80088ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 80080ac:	2300      	movs	r3, #0
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3708      	adds	r7, #8
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
	...

080080b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80080bc:	2200      	movs	r2, #0
 80080be:	4912      	ldr	r1, [pc, #72]	; (8008108 <MX_USB_DEVICE_Init+0x50>)
 80080c0:	4812      	ldr	r0, [pc, #72]	; (800810c <MX_USB_DEVICE_Init+0x54>)
 80080c2:	f7fe ff5e 	bl	8006f82 <USBD_Init>
 80080c6:	4603      	mov	r3, r0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d001      	beq.n	80080d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80080cc:	f7f8 feb0 	bl	8000e30 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80080d0:	490f      	ldr	r1, [pc, #60]	; (8008110 <MX_USB_DEVICE_Init+0x58>)
 80080d2:	480e      	ldr	r0, [pc, #56]	; (800810c <MX_USB_DEVICE_Init+0x54>)
 80080d4:	f7fe ff80 	bl	8006fd8 <USBD_RegisterClass>
 80080d8:	4603      	mov	r3, r0
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d001      	beq.n	80080e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80080de:	f7f8 fea7 	bl	8000e30 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80080e2:	490c      	ldr	r1, [pc, #48]	; (8008114 <MX_USB_DEVICE_Init+0x5c>)
 80080e4:	4809      	ldr	r0, [pc, #36]	; (800810c <MX_USB_DEVICE_Init+0x54>)
 80080e6:	f7fe feb1 	bl	8006e4c <USBD_CDC_RegisterInterface>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d001      	beq.n	80080f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80080f0:	f7f8 fe9e 	bl	8000e30 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80080f4:	4805      	ldr	r0, [pc, #20]	; (800810c <MX_USB_DEVICE_Init+0x54>)
 80080f6:	f7fe ff88 	bl	800700a <USBD_Start>
 80080fa:	4603      	mov	r3, r0
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d001      	beq.n	8008104 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008100:	f7f8 fe96 	bl	8000e30 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008104:	bf00      	nop
 8008106:	bd80      	pop	{r7, pc}
 8008108:	2000012c 	.word	0x2000012c
 800810c:	200003bc 	.word	0x200003bc
 8008110:	20000018 	.word	0x20000018
 8008114:	2000011c 	.word	0x2000011c

08008118 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800811c:	2200      	movs	r2, #0
 800811e:	4905      	ldr	r1, [pc, #20]	; (8008134 <CDC_Init_FS+0x1c>)
 8008120:	4805      	ldr	r0, [pc, #20]	; (8008138 <CDC_Init_FS+0x20>)
 8008122:	f7fe fea9 	bl	8006e78 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008126:	4905      	ldr	r1, [pc, #20]	; (800813c <CDC_Init_FS+0x24>)
 8008128:	4803      	ldr	r0, [pc, #12]	; (8008138 <CDC_Init_FS+0x20>)
 800812a:	f7fe febe 	bl	8006eaa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800812e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008130:	4618      	mov	r0, r3
 8008132:	bd80      	pop	{r7, pc}
 8008134:	20000a68 	.word	0x20000a68
 8008138:	200003bc 	.word	0x200003bc
 800813c:	20000680 	.word	0x20000680

08008140 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008140:	b480      	push	{r7}
 8008142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008144:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008146:	4618      	mov	r0, r3
 8008148:	46bd      	mov	sp, r7
 800814a:	bc80      	pop	{r7}
 800814c:	4770      	bx	lr
	...

08008150 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	4603      	mov	r3, r0
 8008158:	6039      	str	r1, [r7, #0]
 800815a:	71fb      	strb	r3, [r7, #7]
 800815c:	4613      	mov	r3, r2
 800815e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008160:	79fb      	ldrb	r3, [r7, #7]
 8008162:	2b23      	cmp	r3, #35	; 0x23
 8008164:	d84a      	bhi.n	80081fc <CDC_Control_FS+0xac>
 8008166:	a201      	add	r2, pc, #4	; (adr r2, 800816c <CDC_Control_FS+0x1c>)
 8008168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800816c:	080081fd 	.word	0x080081fd
 8008170:	080081fd 	.word	0x080081fd
 8008174:	080081fd 	.word	0x080081fd
 8008178:	080081fd 	.word	0x080081fd
 800817c:	080081fd 	.word	0x080081fd
 8008180:	080081fd 	.word	0x080081fd
 8008184:	080081fd 	.word	0x080081fd
 8008188:	080081fd 	.word	0x080081fd
 800818c:	080081fd 	.word	0x080081fd
 8008190:	080081fd 	.word	0x080081fd
 8008194:	080081fd 	.word	0x080081fd
 8008198:	080081fd 	.word	0x080081fd
 800819c:	080081fd 	.word	0x080081fd
 80081a0:	080081fd 	.word	0x080081fd
 80081a4:	080081fd 	.word	0x080081fd
 80081a8:	080081fd 	.word	0x080081fd
 80081ac:	080081fd 	.word	0x080081fd
 80081b0:	080081fd 	.word	0x080081fd
 80081b4:	080081fd 	.word	0x080081fd
 80081b8:	080081fd 	.word	0x080081fd
 80081bc:	080081fd 	.word	0x080081fd
 80081c0:	080081fd 	.word	0x080081fd
 80081c4:	080081fd 	.word	0x080081fd
 80081c8:	080081fd 	.word	0x080081fd
 80081cc:	080081fd 	.word	0x080081fd
 80081d0:	080081fd 	.word	0x080081fd
 80081d4:	080081fd 	.word	0x080081fd
 80081d8:	080081fd 	.word	0x080081fd
 80081dc:	080081fd 	.word	0x080081fd
 80081e0:	080081fd 	.word	0x080081fd
 80081e4:	080081fd 	.word	0x080081fd
 80081e8:	080081fd 	.word	0x080081fd
 80081ec:	080081fd 	.word	0x080081fd
 80081f0:	080081fd 	.word	0x080081fd
 80081f4:	080081fd 	.word	0x080081fd
 80081f8:	080081fd 	.word	0x080081fd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80081fc:	bf00      	nop
  }

  return (USBD_OK);
 80081fe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008200:	4618      	mov	r0, r3
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	bc80      	pop	{r7}
 8008208:	4770      	bx	lr
 800820a:	bf00      	nop

0800820c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008216:	6879      	ldr	r1, [r7, #4]
 8008218:	4805      	ldr	r0, [pc, #20]	; (8008230 <CDC_Receive_FS+0x24>)
 800821a:	f7fe fe46 	bl	8006eaa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800821e:	4804      	ldr	r0, [pc, #16]	; (8008230 <CDC_Receive_FS+0x24>)
 8008220:	f7fe fe85 	bl	8006f2e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008224:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008226:	4618      	mov	r0, r3
 8008228:	3708      	adds	r7, #8
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	200003bc 	.word	0x200003bc

08008234 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	460b      	mov	r3, r1
 800823e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008240:	2300      	movs	r3, #0
 8008242:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008244:	4b0d      	ldr	r3, [pc, #52]	; (800827c <CDC_Transmit_FS+0x48>)
 8008246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800824a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008252:	2b00      	cmp	r3, #0
 8008254:	d001      	beq.n	800825a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008256:	2301      	movs	r3, #1
 8008258:	e00b      	b.n	8008272 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800825a:	887b      	ldrh	r3, [r7, #2]
 800825c:	461a      	mov	r2, r3
 800825e:	6879      	ldr	r1, [r7, #4]
 8008260:	4806      	ldr	r0, [pc, #24]	; (800827c <CDC_Transmit_FS+0x48>)
 8008262:	f7fe fe09 	bl	8006e78 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008266:	4805      	ldr	r0, [pc, #20]	; (800827c <CDC_Transmit_FS+0x48>)
 8008268:	f7fe fe32 	bl	8006ed0 <USBD_CDC_TransmitPacket>
 800826c:	4603      	mov	r3, r0
 800826e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008270:	7bfb      	ldrb	r3, [r7, #15]
}
 8008272:	4618      	mov	r0, r3
 8008274:	3710      	adds	r7, #16
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	200003bc 	.word	0x200003bc

08008280 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	4603      	mov	r3, r0
 8008288:	6039      	str	r1, [r7, #0]
 800828a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	2212      	movs	r2, #18
 8008290:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008292:	4b03      	ldr	r3, [pc, #12]	; (80082a0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008294:	4618      	mov	r0, r3
 8008296:	370c      	adds	r7, #12
 8008298:	46bd      	mov	sp, r7
 800829a:	bc80      	pop	{r7}
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop
 80082a0:	20000148 	.word	0x20000148

080082a4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	4603      	mov	r3, r0
 80082ac:	6039      	str	r1, [r7, #0]
 80082ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	2204      	movs	r2, #4
 80082b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80082b6:	4b03      	ldr	r3, [pc, #12]	; (80082c4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	370c      	adds	r7, #12
 80082bc:	46bd      	mov	sp, r7
 80082be:	bc80      	pop	{r7}
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop
 80082c4:	2000015c 	.word	0x2000015c

080082c8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	4603      	mov	r3, r0
 80082d0:	6039      	str	r1, [r7, #0]
 80082d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80082d4:	79fb      	ldrb	r3, [r7, #7]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d105      	bne.n	80082e6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80082da:	683a      	ldr	r2, [r7, #0]
 80082dc:	4907      	ldr	r1, [pc, #28]	; (80082fc <USBD_FS_ProductStrDescriptor+0x34>)
 80082de:	4808      	ldr	r0, [pc, #32]	; (8008300 <USBD_FS_ProductStrDescriptor+0x38>)
 80082e0:	f7ff fe0c 	bl	8007efc <USBD_GetString>
 80082e4:	e004      	b.n	80082f0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80082e6:	683a      	ldr	r2, [r7, #0]
 80082e8:	4904      	ldr	r1, [pc, #16]	; (80082fc <USBD_FS_ProductStrDescriptor+0x34>)
 80082ea:	4805      	ldr	r0, [pc, #20]	; (8008300 <USBD_FS_ProductStrDescriptor+0x38>)
 80082ec:	f7ff fe06 	bl	8007efc <USBD_GetString>
  }
  return USBD_StrDesc;
 80082f0:	4b02      	ldr	r3, [pc, #8]	; (80082fc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3708      	adds	r7, #8
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	20000e50 	.word	0x20000e50
 8008300:	0800d3b0 	.word	0x0800d3b0

08008304 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
 800830a:	4603      	mov	r3, r0
 800830c:	6039      	str	r1, [r7, #0]
 800830e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008310:	683a      	ldr	r2, [r7, #0]
 8008312:	4904      	ldr	r1, [pc, #16]	; (8008324 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008314:	4804      	ldr	r0, [pc, #16]	; (8008328 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008316:	f7ff fdf1 	bl	8007efc <USBD_GetString>
  return USBD_StrDesc;
 800831a:	4b02      	ldr	r3, [pc, #8]	; (8008324 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800831c:	4618      	mov	r0, r3
 800831e:	3708      	adds	r7, #8
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}
 8008324:	20000e50 	.word	0x20000e50
 8008328:	0800d3c8 	.word	0x0800d3c8

0800832c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b082      	sub	sp, #8
 8008330:	af00      	add	r7, sp, #0
 8008332:	4603      	mov	r3, r0
 8008334:	6039      	str	r1, [r7, #0]
 8008336:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	221a      	movs	r2, #26
 800833c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800833e:	f000 f843 	bl	80083c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008342:	4b02      	ldr	r3, [pc, #8]	; (800834c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008344:	4618      	mov	r0, r3
 8008346:	3708      	adds	r7, #8
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}
 800834c:	20000160 	.word	0x20000160

08008350 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	4603      	mov	r3, r0
 8008358:	6039      	str	r1, [r7, #0]
 800835a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800835c:	79fb      	ldrb	r3, [r7, #7]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d105      	bne.n	800836e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008362:	683a      	ldr	r2, [r7, #0]
 8008364:	4907      	ldr	r1, [pc, #28]	; (8008384 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008366:	4808      	ldr	r0, [pc, #32]	; (8008388 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008368:	f7ff fdc8 	bl	8007efc <USBD_GetString>
 800836c:	e004      	b.n	8008378 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800836e:	683a      	ldr	r2, [r7, #0]
 8008370:	4904      	ldr	r1, [pc, #16]	; (8008384 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008372:	4805      	ldr	r0, [pc, #20]	; (8008388 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008374:	f7ff fdc2 	bl	8007efc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008378:	4b02      	ldr	r3, [pc, #8]	; (8008384 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800837a:	4618      	mov	r0, r3
 800837c:	3708      	adds	r7, #8
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	20000e50 	.word	0x20000e50
 8008388:	0800d3dc 	.word	0x0800d3dc

0800838c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b082      	sub	sp, #8
 8008390:	af00      	add	r7, sp, #0
 8008392:	4603      	mov	r3, r0
 8008394:	6039      	str	r1, [r7, #0]
 8008396:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008398:	79fb      	ldrb	r3, [r7, #7]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d105      	bne.n	80083aa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800839e:	683a      	ldr	r2, [r7, #0]
 80083a0:	4907      	ldr	r1, [pc, #28]	; (80083c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80083a2:	4808      	ldr	r0, [pc, #32]	; (80083c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80083a4:	f7ff fdaa 	bl	8007efc <USBD_GetString>
 80083a8:	e004      	b.n	80083b4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80083aa:	683a      	ldr	r2, [r7, #0]
 80083ac:	4904      	ldr	r1, [pc, #16]	; (80083c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80083ae:	4805      	ldr	r0, [pc, #20]	; (80083c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80083b0:	f7ff fda4 	bl	8007efc <USBD_GetString>
  }
  return USBD_StrDesc;
 80083b4:	4b02      	ldr	r3, [pc, #8]	; (80083c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3708      	adds	r7, #8
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	bf00      	nop
 80083c0:	20000e50 	.word	0x20000e50
 80083c4:	0800d3e8 	.word	0x0800d3e8

080083c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80083ce:	4b0f      	ldr	r3, [pc, #60]	; (800840c <Get_SerialNum+0x44>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80083d4:	4b0e      	ldr	r3, [pc, #56]	; (8008410 <Get_SerialNum+0x48>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80083da:	4b0e      	ldr	r3, [pc, #56]	; (8008414 <Get_SerialNum+0x4c>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80083e0:	68fa      	ldr	r2, [r7, #12]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4413      	add	r3, r2
 80083e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d009      	beq.n	8008402 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80083ee:	2208      	movs	r2, #8
 80083f0:	4909      	ldr	r1, [pc, #36]	; (8008418 <Get_SerialNum+0x50>)
 80083f2:	68f8      	ldr	r0, [r7, #12]
 80083f4:	f000 f814 	bl	8008420 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80083f8:	2204      	movs	r2, #4
 80083fa:	4908      	ldr	r1, [pc, #32]	; (800841c <Get_SerialNum+0x54>)
 80083fc:	68b8      	ldr	r0, [r7, #8]
 80083fe:	f000 f80f 	bl	8008420 <IntToUnicode>
  }
}
 8008402:	bf00      	nop
 8008404:	3710      	adds	r7, #16
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop
 800840c:	1ffff7e8 	.word	0x1ffff7e8
 8008410:	1ffff7ec 	.word	0x1ffff7ec
 8008414:	1ffff7f0 	.word	0x1ffff7f0
 8008418:	20000162 	.word	0x20000162
 800841c:	20000172 	.word	0x20000172

08008420 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008420:	b480      	push	{r7}
 8008422:	b087      	sub	sp, #28
 8008424:	af00      	add	r7, sp, #0
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	60b9      	str	r1, [r7, #8]
 800842a:	4613      	mov	r3, r2
 800842c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800842e:	2300      	movs	r3, #0
 8008430:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008432:	2300      	movs	r3, #0
 8008434:	75fb      	strb	r3, [r7, #23]
 8008436:	e027      	b.n	8008488 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	0f1b      	lsrs	r3, r3, #28
 800843c:	2b09      	cmp	r3, #9
 800843e:	d80b      	bhi.n	8008458 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	0f1b      	lsrs	r3, r3, #28
 8008444:	b2da      	uxtb	r2, r3
 8008446:	7dfb      	ldrb	r3, [r7, #23]
 8008448:	005b      	lsls	r3, r3, #1
 800844a:	4619      	mov	r1, r3
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	440b      	add	r3, r1
 8008450:	3230      	adds	r2, #48	; 0x30
 8008452:	b2d2      	uxtb	r2, r2
 8008454:	701a      	strb	r2, [r3, #0]
 8008456:	e00a      	b.n	800846e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	0f1b      	lsrs	r3, r3, #28
 800845c:	b2da      	uxtb	r2, r3
 800845e:	7dfb      	ldrb	r3, [r7, #23]
 8008460:	005b      	lsls	r3, r3, #1
 8008462:	4619      	mov	r1, r3
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	440b      	add	r3, r1
 8008468:	3237      	adds	r2, #55	; 0x37
 800846a:	b2d2      	uxtb	r2, r2
 800846c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	011b      	lsls	r3, r3, #4
 8008472:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008474:	7dfb      	ldrb	r3, [r7, #23]
 8008476:	005b      	lsls	r3, r3, #1
 8008478:	3301      	adds	r3, #1
 800847a:	68ba      	ldr	r2, [r7, #8]
 800847c:	4413      	add	r3, r2
 800847e:	2200      	movs	r2, #0
 8008480:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008482:	7dfb      	ldrb	r3, [r7, #23]
 8008484:	3301      	adds	r3, #1
 8008486:	75fb      	strb	r3, [r7, #23]
 8008488:	7dfa      	ldrb	r2, [r7, #23]
 800848a:	79fb      	ldrb	r3, [r7, #7]
 800848c:	429a      	cmp	r2, r3
 800848e:	d3d3      	bcc.n	8008438 <IntToUnicode+0x18>
  }
}
 8008490:	bf00      	nop
 8008492:	bf00      	nop
 8008494:	371c      	adds	r7, #28
 8008496:	46bd      	mov	sp, r7
 8008498:	bc80      	pop	{r7}
 800849a:	4770      	bx	lr

0800849c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a0d      	ldr	r2, [pc, #52]	; (80084e0 <HAL_PCD_MspInit+0x44>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d113      	bne.n	80084d6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80084ae:	4b0d      	ldr	r3, [pc, #52]	; (80084e4 <HAL_PCD_MspInit+0x48>)
 80084b0:	69db      	ldr	r3, [r3, #28]
 80084b2:	4a0c      	ldr	r2, [pc, #48]	; (80084e4 <HAL_PCD_MspInit+0x48>)
 80084b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80084b8:	61d3      	str	r3, [r2, #28]
 80084ba:	4b0a      	ldr	r3, [pc, #40]	; (80084e4 <HAL_PCD_MspInit+0x48>)
 80084bc:	69db      	ldr	r3, [r3, #28]
 80084be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084c2:	60fb      	str	r3, [r7, #12]
 80084c4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80084c6:	2200      	movs	r2, #0
 80084c8:	2100      	movs	r1, #0
 80084ca:	2014      	movs	r0, #20
 80084cc:	f7f8 ff89 	bl	80013e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80084d0:	2014      	movs	r0, #20
 80084d2:	f7f8 ffa2 	bl	800141a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80084d6:	bf00      	nop
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
 80084de:	bf00      	nop
 80084e0:	40005c00 	.word	0x40005c00
 80084e4:	40021000 	.word	0x40021000

080084e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80084fc:	4619      	mov	r1, r3
 80084fe:	4610      	mov	r0, r2
 8008500:	f7fe fdcb 	bl	800709a <USBD_LL_SetupStage>
}
 8008504:	bf00      	nop
 8008506:	3708      	adds	r7, #8
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b082      	sub	sp, #8
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	460b      	mov	r3, r1
 8008516:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800851e:	78fa      	ldrb	r2, [r7, #3]
 8008520:	6879      	ldr	r1, [r7, #4]
 8008522:	4613      	mov	r3, r2
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	4413      	add	r3, r2
 8008528:	00db      	lsls	r3, r3, #3
 800852a:	440b      	add	r3, r1
 800852c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	78fb      	ldrb	r3, [r7, #3]
 8008534:	4619      	mov	r1, r3
 8008536:	f7fe fdfd 	bl	8007134 <USBD_LL_DataOutStage>
}
 800853a:	bf00      	nop
 800853c:	3708      	adds	r7, #8
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b082      	sub	sp, #8
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
 800854a:	460b      	mov	r3, r1
 800854c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008554:	78fa      	ldrb	r2, [r7, #3]
 8008556:	6879      	ldr	r1, [r7, #4]
 8008558:	4613      	mov	r3, r2
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	4413      	add	r3, r2
 800855e:	00db      	lsls	r3, r3, #3
 8008560:	440b      	add	r3, r1
 8008562:	333c      	adds	r3, #60	; 0x3c
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	78fb      	ldrb	r3, [r7, #3]
 8008568:	4619      	mov	r1, r3
 800856a:	f7fe fe54 	bl	8007216 <USBD_LL_DataInStage>
}
 800856e:	bf00      	nop
 8008570:	3708      	adds	r7, #8
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}

08008576 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008576:	b580      	push	{r7, lr}
 8008578:	b082      	sub	sp, #8
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008584:	4618      	mov	r0, r3
 8008586:	f7fe ff64 	bl	8007452 <USBD_LL_SOF>
}
 800858a:	bf00      	nop
 800858c:	3708      	adds	r7, #8
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}

08008592 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008592:	b580      	push	{r7, lr}
 8008594:	b084      	sub	sp, #16
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800859a:	2301      	movs	r3, #1
 800859c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	2b02      	cmp	r3, #2
 80085a4:	d001      	beq.n	80085aa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80085a6:	f7f8 fc43 	bl	8000e30 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80085b0:	7bfa      	ldrb	r2, [r7, #15]
 80085b2:	4611      	mov	r1, r2
 80085b4:	4618      	mov	r0, r3
 80085b6:	f7fe ff14 	bl	80073e2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80085c0:	4618      	mov	r0, r3
 80085c2:	f7fe fecd 	bl	8007360 <USBD_LL_Reset>
}
 80085c6:	bf00      	nop
 80085c8:	3710      	adds	r7, #16
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
	...

080085d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b082      	sub	sp, #8
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80085de:	4618      	mov	r0, r3
 80085e0:	f7fe ff0e 	bl	8007400 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	699b      	ldr	r3, [r3, #24]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d005      	beq.n	80085f8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80085ec:	4b04      	ldr	r3, [pc, #16]	; (8008600 <HAL_PCD_SuspendCallback+0x30>)
 80085ee:	691b      	ldr	r3, [r3, #16]
 80085f0:	4a03      	ldr	r2, [pc, #12]	; (8008600 <HAL_PCD_SuspendCallback+0x30>)
 80085f2:	f043 0306 	orr.w	r3, r3, #6
 80085f6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80085f8:	bf00      	nop
 80085fa:	3708      	adds	r7, #8
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}
 8008600:	e000ed00 	.word	0xe000ed00

08008604 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008612:	4618      	mov	r0, r3
 8008614:	f7fe ff08 	bl	8007428 <USBD_LL_Resume>
}
 8008618:	bf00      	nop
 800861a:	3708      	adds	r7, #8
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b082      	sub	sp, #8
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008628:	4a28      	ldr	r2, [pc, #160]	; (80086cc <USBD_LL_Init+0xac>)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4a26      	ldr	r2, [pc, #152]	; (80086cc <USBD_LL_Init+0xac>)
 8008634:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008638:	4b24      	ldr	r3, [pc, #144]	; (80086cc <USBD_LL_Init+0xac>)
 800863a:	4a25      	ldr	r2, [pc, #148]	; (80086d0 <USBD_LL_Init+0xb0>)
 800863c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800863e:	4b23      	ldr	r3, [pc, #140]	; (80086cc <USBD_LL_Init+0xac>)
 8008640:	2208      	movs	r2, #8
 8008642:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008644:	4b21      	ldr	r3, [pc, #132]	; (80086cc <USBD_LL_Init+0xac>)
 8008646:	2202      	movs	r2, #2
 8008648:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800864a:	4b20      	ldr	r3, [pc, #128]	; (80086cc <USBD_LL_Init+0xac>)
 800864c:	2200      	movs	r2, #0
 800864e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008650:	4b1e      	ldr	r3, [pc, #120]	; (80086cc <USBD_LL_Init+0xac>)
 8008652:	2200      	movs	r2, #0
 8008654:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008656:	4b1d      	ldr	r3, [pc, #116]	; (80086cc <USBD_LL_Init+0xac>)
 8008658:	2200      	movs	r2, #0
 800865a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800865c:	481b      	ldr	r0, [pc, #108]	; (80086cc <USBD_LL_Init+0xac>)
 800865e:	f7f9 f893 	bl	8001788 <HAL_PCD_Init>
 8008662:	4603      	mov	r3, r0
 8008664:	2b00      	cmp	r3, #0
 8008666:	d001      	beq.n	800866c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008668:	f7f8 fbe2 	bl	8000e30 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008672:	2318      	movs	r3, #24
 8008674:	2200      	movs	r2, #0
 8008676:	2100      	movs	r1, #0
 8008678:	f7fa fd07 	bl	800308a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008682:	2358      	movs	r3, #88	; 0x58
 8008684:	2200      	movs	r2, #0
 8008686:	2180      	movs	r1, #128	; 0x80
 8008688:	f7fa fcff 	bl	800308a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008692:	23c0      	movs	r3, #192	; 0xc0
 8008694:	2200      	movs	r2, #0
 8008696:	2181      	movs	r1, #129	; 0x81
 8008698:	f7fa fcf7 	bl	800308a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80086a2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80086a6:	2200      	movs	r2, #0
 80086a8:	2101      	movs	r1, #1
 80086aa:	f7fa fcee 	bl	800308a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80086b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80086b8:	2200      	movs	r2, #0
 80086ba:	2182      	movs	r1, #130	; 0x82
 80086bc:	f7fa fce5 	bl	800308a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3708      	adds	r7, #8
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	20001050 	.word	0x20001050
 80086d0:	40005c00 	.word	0x40005c00

080086d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086dc:	2300      	movs	r3, #0
 80086de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086e0:	2300      	movs	r3, #0
 80086e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086ea:	4618      	mov	r0, r3
 80086ec:	f7f9 f957 	bl	800199e <HAL_PCD_Start>
 80086f0:	4603      	mov	r3, r0
 80086f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086f4:	7bfb      	ldrb	r3, [r7, #15]
 80086f6:	4618      	mov	r0, r3
 80086f8:	f000 f94e 	bl	8008998 <USBD_Get_USB_Status>
 80086fc:	4603      	mov	r3, r0
 80086fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008700:	7bbb      	ldrb	r3, [r7, #14]
}
 8008702:	4618      	mov	r0, r3
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800870a:	b580      	push	{r7, lr}
 800870c:	b084      	sub	sp, #16
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
 8008712:	4608      	mov	r0, r1
 8008714:	4611      	mov	r1, r2
 8008716:	461a      	mov	r2, r3
 8008718:	4603      	mov	r3, r0
 800871a:	70fb      	strb	r3, [r7, #3]
 800871c:	460b      	mov	r3, r1
 800871e:	70bb      	strb	r3, [r7, #2]
 8008720:	4613      	mov	r3, r2
 8008722:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008724:	2300      	movs	r3, #0
 8008726:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008728:	2300      	movs	r3, #0
 800872a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008732:	78bb      	ldrb	r3, [r7, #2]
 8008734:	883a      	ldrh	r2, [r7, #0]
 8008736:	78f9      	ldrb	r1, [r7, #3]
 8008738:	f7f9 facf 	bl	8001cda <HAL_PCD_EP_Open>
 800873c:	4603      	mov	r3, r0
 800873e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008740:	7bfb      	ldrb	r3, [r7, #15]
 8008742:	4618      	mov	r0, r3
 8008744:	f000 f928 	bl	8008998 <USBD_Get_USB_Status>
 8008748:	4603      	mov	r3, r0
 800874a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800874c:	7bbb      	ldrb	r3, [r7, #14]
}
 800874e:	4618      	mov	r0, r3
 8008750:	3710      	adds	r7, #16
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008756:	b580      	push	{r7, lr}
 8008758:	b084      	sub	sp, #16
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
 800875e:	460b      	mov	r3, r1
 8008760:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008762:	2300      	movs	r3, #0
 8008764:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008766:	2300      	movs	r3, #0
 8008768:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008770:	78fa      	ldrb	r2, [r7, #3]
 8008772:	4611      	mov	r1, r2
 8008774:	4618      	mov	r0, r3
 8008776:	f7f9 fb16 	bl	8001da6 <HAL_PCD_EP_Close>
 800877a:	4603      	mov	r3, r0
 800877c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800877e:	7bfb      	ldrb	r3, [r7, #15]
 8008780:	4618      	mov	r0, r3
 8008782:	f000 f909 	bl	8008998 <USBD_Get_USB_Status>
 8008786:	4603      	mov	r3, r0
 8008788:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800878a:	7bbb      	ldrb	r3, [r7, #14]
}
 800878c:	4618      	mov	r0, r3
 800878e:	3710      	adds	r7, #16
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	460b      	mov	r3, r1
 800879e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087a0:	2300      	movs	r3, #0
 80087a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087a4:	2300      	movs	r3, #0
 80087a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80087ae:	78fa      	ldrb	r2, [r7, #3]
 80087b0:	4611      	mov	r1, r2
 80087b2:	4618      	mov	r0, r3
 80087b4:	f7f9 fbd6 	bl	8001f64 <HAL_PCD_EP_SetStall>
 80087b8:	4603      	mov	r3, r0
 80087ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087bc:	7bfb      	ldrb	r3, [r7, #15]
 80087be:	4618      	mov	r0, r3
 80087c0:	f000 f8ea 	bl	8008998 <USBD_Get_USB_Status>
 80087c4:	4603      	mov	r3, r0
 80087c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3710      	adds	r7, #16
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}

080087d2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087d2:	b580      	push	{r7, lr}
 80087d4:	b084      	sub	sp, #16
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	6078      	str	r0, [r7, #4]
 80087da:	460b      	mov	r3, r1
 80087dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087de:	2300      	movs	r3, #0
 80087e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087e2:	2300      	movs	r3, #0
 80087e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80087ec:	78fa      	ldrb	r2, [r7, #3]
 80087ee:	4611      	mov	r1, r2
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7f9 fc17 	bl	8002024 <HAL_PCD_EP_ClrStall>
 80087f6:	4603      	mov	r3, r0
 80087f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087fa:	7bfb      	ldrb	r3, [r7, #15]
 80087fc:	4618      	mov	r0, r3
 80087fe:	f000 f8cb 	bl	8008998 <USBD_Get_USB_Status>
 8008802:	4603      	mov	r3, r0
 8008804:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008806:	7bbb      	ldrb	r3, [r7, #14]
}
 8008808:	4618      	mov	r0, r3
 800880a:	3710      	adds	r7, #16
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008810:	b480      	push	{r7}
 8008812:	b085      	sub	sp, #20
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	460b      	mov	r3, r1
 800881a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008822:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008824:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008828:	2b00      	cmp	r3, #0
 800882a:	da0c      	bge.n	8008846 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800882c:	78fb      	ldrb	r3, [r7, #3]
 800882e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008832:	68f9      	ldr	r1, [r7, #12]
 8008834:	1c5a      	adds	r2, r3, #1
 8008836:	4613      	mov	r3, r2
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	4413      	add	r3, r2
 800883c:	00db      	lsls	r3, r3, #3
 800883e:	440b      	add	r3, r1
 8008840:	3302      	adds	r3, #2
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	e00b      	b.n	800885e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008846:	78fb      	ldrb	r3, [r7, #3]
 8008848:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800884c:	68f9      	ldr	r1, [r7, #12]
 800884e:	4613      	mov	r3, r2
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	4413      	add	r3, r2
 8008854:	00db      	lsls	r3, r3, #3
 8008856:	440b      	add	r3, r1
 8008858:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800885c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800885e:	4618      	mov	r0, r3
 8008860:	3714      	adds	r7, #20
 8008862:	46bd      	mov	sp, r7
 8008864:	bc80      	pop	{r7}
 8008866:	4770      	bx	lr

08008868 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	460b      	mov	r3, r1
 8008872:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008874:	2300      	movs	r3, #0
 8008876:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008878:	2300      	movs	r3, #0
 800887a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008882:	78fa      	ldrb	r2, [r7, #3]
 8008884:	4611      	mov	r1, r2
 8008886:	4618      	mov	r0, r3
 8008888:	f7f9 fa02 	bl	8001c90 <HAL_PCD_SetAddress>
 800888c:	4603      	mov	r3, r0
 800888e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008890:	7bfb      	ldrb	r3, [r7, #15]
 8008892:	4618      	mov	r0, r3
 8008894:	f000 f880 	bl	8008998 <USBD_Get_USB_Status>
 8008898:	4603      	mov	r3, r0
 800889a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800889c:	7bbb      	ldrb	r3, [r7, #14]
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3710      	adds	r7, #16
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}

080088a6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80088a6:	b580      	push	{r7, lr}
 80088a8:	b086      	sub	sp, #24
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	60f8      	str	r0, [r7, #12]
 80088ae:	607a      	str	r2, [r7, #4]
 80088b0:	461a      	mov	r2, r3
 80088b2:	460b      	mov	r3, r1
 80088b4:	72fb      	strb	r3, [r7, #11]
 80088b6:	4613      	mov	r3, r2
 80088b8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088ba:	2300      	movs	r3, #0
 80088bc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088be:	2300      	movs	r3, #0
 80088c0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80088c8:	893b      	ldrh	r3, [r7, #8]
 80088ca:	7af9      	ldrb	r1, [r7, #11]
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	f7f9 fb06 	bl	8001ede <HAL_PCD_EP_Transmit>
 80088d2:	4603      	mov	r3, r0
 80088d4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088d6:	7dfb      	ldrb	r3, [r7, #23]
 80088d8:	4618      	mov	r0, r3
 80088da:	f000 f85d 	bl	8008998 <USBD_Get_USB_Status>
 80088de:	4603      	mov	r3, r0
 80088e0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80088e2:	7dbb      	ldrb	r3, [r7, #22]
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3718      	adds	r7, #24
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b086      	sub	sp, #24
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	607a      	str	r2, [r7, #4]
 80088f6:	461a      	mov	r2, r3
 80088f8:	460b      	mov	r3, r1
 80088fa:	72fb      	strb	r3, [r7, #11]
 80088fc:	4613      	mov	r3, r2
 80088fe:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008900:	2300      	movs	r3, #0
 8008902:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008904:	2300      	movs	r3, #0
 8008906:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800890e:	893b      	ldrh	r3, [r7, #8]
 8008910:	7af9      	ldrb	r1, [r7, #11]
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	f7f9 fa8f 	bl	8001e36 <HAL_PCD_EP_Receive>
 8008918:	4603      	mov	r3, r0
 800891a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800891c:	7dfb      	ldrb	r3, [r7, #23]
 800891e:	4618      	mov	r0, r3
 8008920:	f000 f83a 	bl	8008998 <USBD_Get_USB_Status>
 8008924:	4603      	mov	r3, r0
 8008926:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008928:	7dbb      	ldrb	r3, [r7, #22]
}
 800892a:	4618      	mov	r0, r3
 800892c:	3718      	adds	r7, #24
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}

08008932 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008932:	b580      	push	{r7, lr}
 8008934:	b082      	sub	sp, #8
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
 800893a:	460b      	mov	r3, r1
 800893c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008944:	78fa      	ldrb	r2, [r7, #3]
 8008946:	4611      	mov	r1, r2
 8008948:	4618      	mov	r0, r3
 800894a:	f7f9 fab1 	bl	8001eb0 <HAL_PCD_EP_GetRxCount>
 800894e:	4603      	mov	r3, r0
}
 8008950:	4618      	mov	r0, r3
 8008952:	3708      	adds	r7, #8
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008958:	b480      	push	{r7}
 800895a:	b083      	sub	sp, #12
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008960:	4b02      	ldr	r3, [pc, #8]	; (800896c <USBD_static_malloc+0x14>)
}
 8008962:	4618      	mov	r0, r3
 8008964:	370c      	adds	r7, #12
 8008966:	46bd      	mov	sp, r7
 8008968:	bc80      	pop	{r7}
 800896a:	4770      	bx	lr
 800896c:	2000133c 	.word	0x2000133c

08008970 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008970:	b480      	push	{r7}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]

}
 8008978:	bf00      	nop
 800897a:	370c      	adds	r7, #12
 800897c:	46bd      	mov	sp, r7
 800897e:	bc80      	pop	{r7}
 8008980:	4770      	bx	lr

08008982 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008982:	b480      	push	{r7}
 8008984:	b083      	sub	sp, #12
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
 800898a:	460b      	mov	r3, r1
 800898c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800898e:	bf00      	nop
 8008990:	370c      	adds	r7, #12
 8008992:	46bd      	mov	sp, r7
 8008994:	bc80      	pop	{r7}
 8008996:	4770      	bx	lr

08008998 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008998:	b480      	push	{r7}
 800899a:	b085      	sub	sp, #20
 800899c:	af00      	add	r7, sp, #0
 800899e:	4603      	mov	r3, r0
 80089a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089a2:	2300      	movs	r3, #0
 80089a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80089a6:	79fb      	ldrb	r3, [r7, #7]
 80089a8:	2b03      	cmp	r3, #3
 80089aa:	d817      	bhi.n	80089dc <USBD_Get_USB_Status+0x44>
 80089ac:	a201      	add	r2, pc, #4	; (adr r2, 80089b4 <USBD_Get_USB_Status+0x1c>)
 80089ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089b2:	bf00      	nop
 80089b4:	080089c5 	.word	0x080089c5
 80089b8:	080089cb 	.word	0x080089cb
 80089bc:	080089d1 	.word	0x080089d1
 80089c0:	080089d7 	.word	0x080089d7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80089c4:	2300      	movs	r3, #0
 80089c6:	73fb      	strb	r3, [r7, #15]
    break;
 80089c8:	e00b      	b.n	80089e2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80089ca:	2302      	movs	r3, #2
 80089cc:	73fb      	strb	r3, [r7, #15]
    break;
 80089ce:	e008      	b.n	80089e2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80089d0:	2301      	movs	r3, #1
 80089d2:	73fb      	strb	r3, [r7, #15]
    break;
 80089d4:	e005      	b.n	80089e2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80089d6:	2302      	movs	r3, #2
 80089d8:	73fb      	strb	r3, [r7, #15]
    break;
 80089da:	e002      	b.n	80089e2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80089dc:	2302      	movs	r3, #2
 80089de:	73fb      	strb	r3, [r7, #15]
    break;
 80089e0:	bf00      	nop
  }
  return usb_status;
 80089e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3714      	adds	r7, #20
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bc80      	pop	{r7}
 80089ec:	4770      	bx	lr
 80089ee:	bf00      	nop

080089f0 <__errno>:
 80089f0:	4b01      	ldr	r3, [pc, #4]	; (80089f8 <__errno+0x8>)
 80089f2:	6818      	ldr	r0, [r3, #0]
 80089f4:	4770      	bx	lr
 80089f6:	bf00      	nop
 80089f8:	2000017c 	.word	0x2000017c

080089fc <__libc_init_array>:
 80089fc:	b570      	push	{r4, r5, r6, lr}
 80089fe:	2600      	movs	r6, #0
 8008a00:	4d0c      	ldr	r5, [pc, #48]	; (8008a34 <__libc_init_array+0x38>)
 8008a02:	4c0d      	ldr	r4, [pc, #52]	; (8008a38 <__libc_init_array+0x3c>)
 8008a04:	1b64      	subs	r4, r4, r5
 8008a06:	10a4      	asrs	r4, r4, #2
 8008a08:	42a6      	cmp	r6, r4
 8008a0a:	d109      	bne.n	8008a20 <__libc_init_array+0x24>
 8008a0c:	f004 fcba 	bl	800d384 <_init>
 8008a10:	2600      	movs	r6, #0
 8008a12:	4d0a      	ldr	r5, [pc, #40]	; (8008a3c <__libc_init_array+0x40>)
 8008a14:	4c0a      	ldr	r4, [pc, #40]	; (8008a40 <__libc_init_array+0x44>)
 8008a16:	1b64      	subs	r4, r4, r5
 8008a18:	10a4      	asrs	r4, r4, #2
 8008a1a:	42a6      	cmp	r6, r4
 8008a1c:	d105      	bne.n	8008a2a <__libc_init_array+0x2e>
 8008a1e:	bd70      	pop	{r4, r5, r6, pc}
 8008a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a24:	4798      	blx	r3
 8008a26:	3601      	adds	r6, #1
 8008a28:	e7ee      	b.n	8008a08 <__libc_init_array+0xc>
 8008a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a2e:	4798      	blx	r3
 8008a30:	3601      	adds	r6, #1
 8008a32:	e7f2      	b.n	8008a1a <__libc_init_array+0x1e>
 8008a34:	0800d910 	.word	0x0800d910
 8008a38:	0800d910 	.word	0x0800d910
 8008a3c:	0800d910 	.word	0x0800d910
 8008a40:	0800d914 	.word	0x0800d914

08008a44 <memset>:
 8008a44:	4603      	mov	r3, r0
 8008a46:	4402      	add	r2, r0
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d100      	bne.n	8008a4e <memset+0xa>
 8008a4c:	4770      	bx	lr
 8008a4e:	f803 1b01 	strb.w	r1, [r3], #1
 8008a52:	e7f9      	b.n	8008a48 <memset+0x4>

08008a54 <__cvt>:
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a5a:	461f      	mov	r7, r3
 8008a5c:	bfbb      	ittet	lt
 8008a5e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008a62:	461f      	movlt	r7, r3
 8008a64:	2300      	movge	r3, #0
 8008a66:	232d      	movlt	r3, #45	; 0x2d
 8008a68:	b088      	sub	sp, #32
 8008a6a:	4614      	mov	r4, r2
 8008a6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008a6e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008a70:	7013      	strb	r3, [r2, #0]
 8008a72:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008a74:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008a78:	f023 0820 	bic.w	r8, r3, #32
 8008a7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008a80:	d005      	beq.n	8008a8e <__cvt+0x3a>
 8008a82:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008a86:	d100      	bne.n	8008a8a <__cvt+0x36>
 8008a88:	3501      	adds	r5, #1
 8008a8a:	2302      	movs	r3, #2
 8008a8c:	e000      	b.n	8008a90 <__cvt+0x3c>
 8008a8e:	2303      	movs	r3, #3
 8008a90:	aa07      	add	r2, sp, #28
 8008a92:	9204      	str	r2, [sp, #16]
 8008a94:	aa06      	add	r2, sp, #24
 8008a96:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008a9a:	e9cd 3500 	strd	r3, r5, [sp]
 8008a9e:	4622      	mov	r2, r4
 8008aa0:	463b      	mov	r3, r7
 8008aa2:	f001 fe09 	bl	800a6b8 <_dtoa_r>
 8008aa6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008aaa:	4606      	mov	r6, r0
 8008aac:	d102      	bne.n	8008ab4 <__cvt+0x60>
 8008aae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ab0:	07db      	lsls	r3, r3, #31
 8008ab2:	d522      	bpl.n	8008afa <__cvt+0xa6>
 8008ab4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008ab8:	eb06 0905 	add.w	r9, r6, r5
 8008abc:	d110      	bne.n	8008ae0 <__cvt+0x8c>
 8008abe:	7833      	ldrb	r3, [r6, #0]
 8008ac0:	2b30      	cmp	r3, #48	; 0x30
 8008ac2:	d10a      	bne.n	8008ada <__cvt+0x86>
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	4620      	mov	r0, r4
 8008aca:	4639      	mov	r1, r7
 8008acc:	f7f7 ff6c 	bl	80009a8 <__aeabi_dcmpeq>
 8008ad0:	b918      	cbnz	r0, 8008ada <__cvt+0x86>
 8008ad2:	f1c5 0501 	rsb	r5, r5, #1
 8008ad6:	f8ca 5000 	str.w	r5, [sl]
 8008ada:	f8da 3000 	ldr.w	r3, [sl]
 8008ade:	4499      	add	r9, r3
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	4620      	mov	r0, r4
 8008ae6:	4639      	mov	r1, r7
 8008ae8:	f7f7 ff5e 	bl	80009a8 <__aeabi_dcmpeq>
 8008aec:	b108      	cbz	r0, 8008af2 <__cvt+0x9e>
 8008aee:	f8cd 901c 	str.w	r9, [sp, #28]
 8008af2:	2230      	movs	r2, #48	; 0x30
 8008af4:	9b07      	ldr	r3, [sp, #28]
 8008af6:	454b      	cmp	r3, r9
 8008af8:	d307      	bcc.n	8008b0a <__cvt+0xb6>
 8008afa:	4630      	mov	r0, r6
 8008afc:	9b07      	ldr	r3, [sp, #28]
 8008afe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008b00:	1b9b      	subs	r3, r3, r6
 8008b02:	6013      	str	r3, [r2, #0]
 8008b04:	b008      	add	sp, #32
 8008b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b0a:	1c59      	adds	r1, r3, #1
 8008b0c:	9107      	str	r1, [sp, #28]
 8008b0e:	701a      	strb	r2, [r3, #0]
 8008b10:	e7f0      	b.n	8008af4 <__cvt+0xa0>

08008b12 <__exponent>:
 8008b12:	4603      	mov	r3, r0
 8008b14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b16:	2900      	cmp	r1, #0
 8008b18:	f803 2b02 	strb.w	r2, [r3], #2
 8008b1c:	bfb6      	itet	lt
 8008b1e:	222d      	movlt	r2, #45	; 0x2d
 8008b20:	222b      	movge	r2, #43	; 0x2b
 8008b22:	4249      	neglt	r1, r1
 8008b24:	2909      	cmp	r1, #9
 8008b26:	7042      	strb	r2, [r0, #1]
 8008b28:	dd2b      	ble.n	8008b82 <__exponent+0x70>
 8008b2a:	f10d 0407 	add.w	r4, sp, #7
 8008b2e:	46a4      	mov	ip, r4
 8008b30:	270a      	movs	r7, #10
 8008b32:	fb91 f6f7 	sdiv	r6, r1, r7
 8008b36:	460a      	mov	r2, r1
 8008b38:	46a6      	mov	lr, r4
 8008b3a:	fb07 1516 	mls	r5, r7, r6, r1
 8008b3e:	2a63      	cmp	r2, #99	; 0x63
 8008b40:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8008b44:	4631      	mov	r1, r6
 8008b46:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8008b4a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008b4e:	dcf0      	bgt.n	8008b32 <__exponent+0x20>
 8008b50:	3130      	adds	r1, #48	; 0x30
 8008b52:	f1ae 0502 	sub.w	r5, lr, #2
 8008b56:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008b5a:	4629      	mov	r1, r5
 8008b5c:	1c44      	adds	r4, r0, #1
 8008b5e:	4561      	cmp	r1, ip
 8008b60:	d30a      	bcc.n	8008b78 <__exponent+0x66>
 8008b62:	f10d 0209 	add.w	r2, sp, #9
 8008b66:	eba2 020e 	sub.w	r2, r2, lr
 8008b6a:	4565      	cmp	r5, ip
 8008b6c:	bf88      	it	hi
 8008b6e:	2200      	movhi	r2, #0
 8008b70:	4413      	add	r3, r2
 8008b72:	1a18      	subs	r0, r3, r0
 8008b74:	b003      	add	sp, #12
 8008b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b78:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b7c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008b80:	e7ed      	b.n	8008b5e <__exponent+0x4c>
 8008b82:	2330      	movs	r3, #48	; 0x30
 8008b84:	3130      	adds	r1, #48	; 0x30
 8008b86:	7083      	strb	r3, [r0, #2]
 8008b88:	70c1      	strb	r1, [r0, #3]
 8008b8a:	1d03      	adds	r3, r0, #4
 8008b8c:	e7f1      	b.n	8008b72 <__exponent+0x60>
	...

08008b90 <_printf_float>:
 8008b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b94:	b091      	sub	sp, #68	; 0x44
 8008b96:	460c      	mov	r4, r1
 8008b98:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008b9c:	4616      	mov	r6, r2
 8008b9e:	461f      	mov	r7, r3
 8008ba0:	4605      	mov	r5, r0
 8008ba2:	f002 feef 	bl	800b984 <_localeconv_r>
 8008ba6:	6803      	ldr	r3, [r0, #0]
 8008ba8:	4618      	mov	r0, r3
 8008baa:	9309      	str	r3, [sp, #36]	; 0x24
 8008bac:	f7f7 fad0 	bl	8000150 <strlen>
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	930e      	str	r3, [sp, #56]	; 0x38
 8008bb4:	f8d8 3000 	ldr.w	r3, [r8]
 8008bb8:	900a      	str	r0, [sp, #40]	; 0x28
 8008bba:	3307      	adds	r3, #7
 8008bbc:	f023 0307 	bic.w	r3, r3, #7
 8008bc0:	f103 0208 	add.w	r2, r3, #8
 8008bc4:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008bc8:	f8d4 b000 	ldr.w	fp, [r4]
 8008bcc:	f8c8 2000 	str.w	r2, [r8]
 8008bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008bd8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8008bdc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008be0:	930b      	str	r3, [sp, #44]	; 0x2c
 8008be2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008be6:	4640      	mov	r0, r8
 8008be8:	4b9c      	ldr	r3, [pc, #624]	; (8008e5c <_printf_float+0x2cc>)
 8008bea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008bec:	f7f7 ff0e 	bl	8000a0c <__aeabi_dcmpun>
 8008bf0:	bb70      	cbnz	r0, 8008c50 <_printf_float+0xc0>
 8008bf2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008bf6:	4640      	mov	r0, r8
 8008bf8:	4b98      	ldr	r3, [pc, #608]	; (8008e5c <_printf_float+0x2cc>)
 8008bfa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008bfc:	f7f7 fee8 	bl	80009d0 <__aeabi_dcmple>
 8008c00:	bb30      	cbnz	r0, 8008c50 <_printf_float+0xc0>
 8008c02:	2200      	movs	r2, #0
 8008c04:	2300      	movs	r3, #0
 8008c06:	4640      	mov	r0, r8
 8008c08:	4651      	mov	r1, sl
 8008c0a:	f7f7 fed7 	bl	80009bc <__aeabi_dcmplt>
 8008c0e:	b110      	cbz	r0, 8008c16 <_printf_float+0x86>
 8008c10:	232d      	movs	r3, #45	; 0x2d
 8008c12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c16:	4b92      	ldr	r3, [pc, #584]	; (8008e60 <_printf_float+0x2d0>)
 8008c18:	4892      	ldr	r0, [pc, #584]	; (8008e64 <_printf_float+0x2d4>)
 8008c1a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008c1e:	bf94      	ite	ls
 8008c20:	4698      	movls	r8, r3
 8008c22:	4680      	movhi	r8, r0
 8008c24:	2303      	movs	r3, #3
 8008c26:	f04f 0a00 	mov.w	sl, #0
 8008c2a:	6123      	str	r3, [r4, #16]
 8008c2c:	f02b 0304 	bic.w	r3, fp, #4
 8008c30:	6023      	str	r3, [r4, #0]
 8008c32:	4633      	mov	r3, r6
 8008c34:	4621      	mov	r1, r4
 8008c36:	4628      	mov	r0, r5
 8008c38:	9700      	str	r7, [sp, #0]
 8008c3a:	aa0f      	add	r2, sp, #60	; 0x3c
 8008c3c:	f000 f9d4 	bl	8008fe8 <_printf_common>
 8008c40:	3001      	adds	r0, #1
 8008c42:	f040 8090 	bne.w	8008d66 <_printf_float+0x1d6>
 8008c46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c4a:	b011      	add	sp, #68	; 0x44
 8008c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c50:	4642      	mov	r2, r8
 8008c52:	4653      	mov	r3, sl
 8008c54:	4640      	mov	r0, r8
 8008c56:	4651      	mov	r1, sl
 8008c58:	f7f7 fed8 	bl	8000a0c <__aeabi_dcmpun>
 8008c5c:	b148      	cbz	r0, 8008c72 <_printf_float+0xe2>
 8008c5e:	f1ba 0f00 	cmp.w	sl, #0
 8008c62:	bfb8      	it	lt
 8008c64:	232d      	movlt	r3, #45	; 0x2d
 8008c66:	4880      	ldr	r0, [pc, #512]	; (8008e68 <_printf_float+0x2d8>)
 8008c68:	bfb8      	it	lt
 8008c6a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008c6e:	4b7f      	ldr	r3, [pc, #508]	; (8008e6c <_printf_float+0x2dc>)
 8008c70:	e7d3      	b.n	8008c1a <_printf_float+0x8a>
 8008c72:	6863      	ldr	r3, [r4, #4]
 8008c74:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008c78:	1c5a      	adds	r2, r3, #1
 8008c7a:	d142      	bne.n	8008d02 <_printf_float+0x172>
 8008c7c:	2306      	movs	r3, #6
 8008c7e:	6063      	str	r3, [r4, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	9206      	str	r2, [sp, #24]
 8008c84:	aa0e      	add	r2, sp, #56	; 0x38
 8008c86:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008c8a:	aa0d      	add	r2, sp, #52	; 0x34
 8008c8c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008c90:	9203      	str	r2, [sp, #12]
 8008c92:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008c96:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008c9a:	6023      	str	r3, [r4, #0]
 8008c9c:	6863      	ldr	r3, [r4, #4]
 8008c9e:	4642      	mov	r2, r8
 8008ca0:	9300      	str	r3, [sp, #0]
 8008ca2:	4628      	mov	r0, r5
 8008ca4:	4653      	mov	r3, sl
 8008ca6:	910b      	str	r1, [sp, #44]	; 0x2c
 8008ca8:	f7ff fed4 	bl	8008a54 <__cvt>
 8008cac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008cae:	4680      	mov	r8, r0
 8008cb0:	2947      	cmp	r1, #71	; 0x47
 8008cb2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008cb4:	d108      	bne.n	8008cc8 <_printf_float+0x138>
 8008cb6:	1cc8      	adds	r0, r1, #3
 8008cb8:	db02      	blt.n	8008cc0 <_printf_float+0x130>
 8008cba:	6863      	ldr	r3, [r4, #4]
 8008cbc:	4299      	cmp	r1, r3
 8008cbe:	dd40      	ble.n	8008d42 <_printf_float+0x1b2>
 8008cc0:	f1a9 0902 	sub.w	r9, r9, #2
 8008cc4:	fa5f f989 	uxtb.w	r9, r9
 8008cc8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008ccc:	d81f      	bhi.n	8008d0e <_printf_float+0x17e>
 8008cce:	464a      	mov	r2, r9
 8008cd0:	3901      	subs	r1, #1
 8008cd2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008cd6:	910d      	str	r1, [sp, #52]	; 0x34
 8008cd8:	f7ff ff1b 	bl	8008b12 <__exponent>
 8008cdc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008cde:	4682      	mov	sl, r0
 8008ce0:	1813      	adds	r3, r2, r0
 8008ce2:	2a01      	cmp	r2, #1
 8008ce4:	6123      	str	r3, [r4, #16]
 8008ce6:	dc02      	bgt.n	8008cee <_printf_float+0x15e>
 8008ce8:	6822      	ldr	r2, [r4, #0]
 8008cea:	07d2      	lsls	r2, r2, #31
 8008cec:	d501      	bpl.n	8008cf2 <_printf_float+0x162>
 8008cee:	3301      	adds	r3, #1
 8008cf0:	6123      	str	r3, [r4, #16]
 8008cf2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d09b      	beq.n	8008c32 <_printf_float+0xa2>
 8008cfa:	232d      	movs	r3, #45	; 0x2d
 8008cfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d00:	e797      	b.n	8008c32 <_printf_float+0xa2>
 8008d02:	2947      	cmp	r1, #71	; 0x47
 8008d04:	d1bc      	bne.n	8008c80 <_printf_float+0xf0>
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d1ba      	bne.n	8008c80 <_printf_float+0xf0>
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	e7b7      	b.n	8008c7e <_printf_float+0xee>
 8008d0e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008d12:	d118      	bne.n	8008d46 <_printf_float+0x1b6>
 8008d14:	2900      	cmp	r1, #0
 8008d16:	6863      	ldr	r3, [r4, #4]
 8008d18:	dd0b      	ble.n	8008d32 <_printf_float+0x1a2>
 8008d1a:	6121      	str	r1, [r4, #16]
 8008d1c:	b913      	cbnz	r3, 8008d24 <_printf_float+0x194>
 8008d1e:	6822      	ldr	r2, [r4, #0]
 8008d20:	07d0      	lsls	r0, r2, #31
 8008d22:	d502      	bpl.n	8008d2a <_printf_float+0x19a>
 8008d24:	3301      	adds	r3, #1
 8008d26:	440b      	add	r3, r1
 8008d28:	6123      	str	r3, [r4, #16]
 8008d2a:	f04f 0a00 	mov.w	sl, #0
 8008d2e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008d30:	e7df      	b.n	8008cf2 <_printf_float+0x162>
 8008d32:	b913      	cbnz	r3, 8008d3a <_printf_float+0x1aa>
 8008d34:	6822      	ldr	r2, [r4, #0]
 8008d36:	07d2      	lsls	r2, r2, #31
 8008d38:	d501      	bpl.n	8008d3e <_printf_float+0x1ae>
 8008d3a:	3302      	adds	r3, #2
 8008d3c:	e7f4      	b.n	8008d28 <_printf_float+0x198>
 8008d3e:	2301      	movs	r3, #1
 8008d40:	e7f2      	b.n	8008d28 <_printf_float+0x198>
 8008d42:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008d46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d48:	4299      	cmp	r1, r3
 8008d4a:	db05      	blt.n	8008d58 <_printf_float+0x1c8>
 8008d4c:	6823      	ldr	r3, [r4, #0]
 8008d4e:	6121      	str	r1, [r4, #16]
 8008d50:	07d8      	lsls	r0, r3, #31
 8008d52:	d5ea      	bpl.n	8008d2a <_printf_float+0x19a>
 8008d54:	1c4b      	adds	r3, r1, #1
 8008d56:	e7e7      	b.n	8008d28 <_printf_float+0x198>
 8008d58:	2900      	cmp	r1, #0
 8008d5a:	bfcc      	ite	gt
 8008d5c:	2201      	movgt	r2, #1
 8008d5e:	f1c1 0202 	rsble	r2, r1, #2
 8008d62:	4413      	add	r3, r2
 8008d64:	e7e0      	b.n	8008d28 <_printf_float+0x198>
 8008d66:	6823      	ldr	r3, [r4, #0]
 8008d68:	055a      	lsls	r2, r3, #21
 8008d6a:	d407      	bmi.n	8008d7c <_printf_float+0x1ec>
 8008d6c:	6923      	ldr	r3, [r4, #16]
 8008d6e:	4642      	mov	r2, r8
 8008d70:	4631      	mov	r1, r6
 8008d72:	4628      	mov	r0, r5
 8008d74:	47b8      	blx	r7
 8008d76:	3001      	adds	r0, #1
 8008d78:	d12b      	bne.n	8008dd2 <_printf_float+0x242>
 8008d7a:	e764      	b.n	8008c46 <_printf_float+0xb6>
 8008d7c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008d80:	f240 80dd 	bls.w	8008f3e <_printf_float+0x3ae>
 8008d84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008d88:	2200      	movs	r2, #0
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	f7f7 fe0c 	bl	80009a8 <__aeabi_dcmpeq>
 8008d90:	2800      	cmp	r0, #0
 8008d92:	d033      	beq.n	8008dfc <_printf_float+0x26c>
 8008d94:	2301      	movs	r3, #1
 8008d96:	4631      	mov	r1, r6
 8008d98:	4628      	mov	r0, r5
 8008d9a:	4a35      	ldr	r2, [pc, #212]	; (8008e70 <_printf_float+0x2e0>)
 8008d9c:	47b8      	blx	r7
 8008d9e:	3001      	adds	r0, #1
 8008da0:	f43f af51 	beq.w	8008c46 <_printf_float+0xb6>
 8008da4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008da8:	429a      	cmp	r2, r3
 8008daa:	db02      	blt.n	8008db2 <_printf_float+0x222>
 8008dac:	6823      	ldr	r3, [r4, #0]
 8008dae:	07d8      	lsls	r0, r3, #31
 8008db0:	d50f      	bpl.n	8008dd2 <_printf_float+0x242>
 8008db2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008db6:	4631      	mov	r1, r6
 8008db8:	4628      	mov	r0, r5
 8008dba:	47b8      	blx	r7
 8008dbc:	3001      	adds	r0, #1
 8008dbe:	f43f af42 	beq.w	8008c46 <_printf_float+0xb6>
 8008dc2:	f04f 0800 	mov.w	r8, #0
 8008dc6:	f104 091a 	add.w	r9, r4, #26
 8008dca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008dcc:	3b01      	subs	r3, #1
 8008dce:	4543      	cmp	r3, r8
 8008dd0:	dc09      	bgt.n	8008de6 <_printf_float+0x256>
 8008dd2:	6823      	ldr	r3, [r4, #0]
 8008dd4:	079b      	lsls	r3, r3, #30
 8008dd6:	f100 8102 	bmi.w	8008fde <_printf_float+0x44e>
 8008dda:	68e0      	ldr	r0, [r4, #12]
 8008ddc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008dde:	4298      	cmp	r0, r3
 8008de0:	bfb8      	it	lt
 8008de2:	4618      	movlt	r0, r3
 8008de4:	e731      	b.n	8008c4a <_printf_float+0xba>
 8008de6:	2301      	movs	r3, #1
 8008de8:	464a      	mov	r2, r9
 8008dea:	4631      	mov	r1, r6
 8008dec:	4628      	mov	r0, r5
 8008dee:	47b8      	blx	r7
 8008df0:	3001      	adds	r0, #1
 8008df2:	f43f af28 	beq.w	8008c46 <_printf_float+0xb6>
 8008df6:	f108 0801 	add.w	r8, r8, #1
 8008dfa:	e7e6      	b.n	8008dca <_printf_float+0x23a>
 8008dfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	dc38      	bgt.n	8008e74 <_printf_float+0x2e4>
 8008e02:	2301      	movs	r3, #1
 8008e04:	4631      	mov	r1, r6
 8008e06:	4628      	mov	r0, r5
 8008e08:	4a19      	ldr	r2, [pc, #100]	; (8008e70 <_printf_float+0x2e0>)
 8008e0a:	47b8      	blx	r7
 8008e0c:	3001      	adds	r0, #1
 8008e0e:	f43f af1a 	beq.w	8008c46 <_printf_float+0xb6>
 8008e12:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008e16:	4313      	orrs	r3, r2
 8008e18:	d102      	bne.n	8008e20 <_printf_float+0x290>
 8008e1a:	6823      	ldr	r3, [r4, #0]
 8008e1c:	07d9      	lsls	r1, r3, #31
 8008e1e:	d5d8      	bpl.n	8008dd2 <_printf_float+0x242>
 8008e20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e24:	4631      	mov	r1, r6
 8008e26:	4628      	mov	r0, r5
 8008e28:	47b8      	blx	r7
 8008e2a:	3001      	adds	r0, #1
 8008e2c:	f43f af0b 	beq.w	8008c46 <_printf_float+0xb6>
 8008e30:	f04f 0900 	mov.w	r9, #0
 8008e34:	f104 0a1a 	add.w	sl, r4, #26
 8008e38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e3a:	425b      	negs	r3, r3
 8008e3c:	454b      	cmp	r3, r9
 8008e3e:	dc01      	bgt.n	8008e44 <_printf_float+0x2b4>
 8008e40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e42:	e794      	b.n	8008d6e <_printf_float+0x1de>
 8008e44:	2301      	movs	r3, #1
 8008e46:	4652      	mov	r2, sl
 8008e48:	4631      	mov	r1, r6
 8008e4a:	4628      	mov	r0, r5
 8008e4c:	47b8      	blx	r7
 8008e4e:	3001      	adds	r0, #1
 8008e50:	f43f aef9 	beq.w	8008c46 <_printf_float+0xb6>
 8008e54:	f109 0901 	add.w	r9, r9, #1
 8008e58:	e7ee      	b.n	8008e38 <_printf_float+0x2a8>
 8008e5a:	bf00      	nop
 8008e5c:	7fefffff 	.word	0x7fefffff
 8008e60:	0800d414 	.word	0x0800d414
 8008e64:	0800d418 	.word	0x0800d418
 8008e68:	0800d420 	.word	0x0800d420
 8008e6c:	0800d41c 	.word	0x0800d41c
 8008e70:	0800d424 	.word	0x0800d424
 8008e74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	bfa8      	it	ge
 8008e7c:	461a      	movge	r2, r3
 8008e7e:	2a00      	cmp	r2, #0
 8008e80:	4691      	mov	r9, r2
 8008e82:	dc37      	bgt.n	8008ef4 <_printf_float+0x364>
 8008e84:	f04f 0b00 	mov.w	fp, #0
 8008e88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e8c:	f104 021a 	add.w	r2, r4, #26
 8008e90:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008e94:	ebaa 0309 	sub.w	r3, sl, r9
 8008e98:	455b      	cmp	r3, fp
 8008e9a:	dc33      	bgt.n	8008f04 <_printf_float+0x374>
 8008e9c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	db3b      	blt.n	8008f1c <_printf_float+0x38c>
 8008ea4:	6823      	ldr	r3, [r4, #0]
 8008ea6:	07da      	lsls	r2, r3, #31
 8008ea8:	d438      	bmi.n	8008f1c <_printf_float+0x38c>
 8008eaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008eac:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008eae:	eba3 020a 	sub.w	r2, r3, sl
 8008eb2:	eba3 0901 	sub.w	r9, r3, r1
 8008eb6:	4591      	cmp	r9, r2
 8008eb8:	bfa8      	it	ge
 8008eba:	4691      	movge	r9, r2
 8008ebc:	f1b9 0f00 	cmp.w	r9, #0
 8008ec0:	dc34      	bgt.n	8008f2c <_printf_float+0x39c>
 8008ec2:	f04f 0800 	mov.w	r8, #0
 8008ec6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008eca:	f104 0a1a 	add.w	sl, r4, #26
 8008ece:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008ed2:	1a9b      	subs	r3, r3, r2
 8008ed4:	eba3 0309 	sub.w	r3, r3, r9
 8008ed8:	4543      	cmp	r3, r8
 8008eda:	f77f af7a 	ble.w	8008dd2 <_printf_float+0x242>
 8008ede:	2301      	movs	r3, #1
 8008ee0:	4652      	mov	r2, sl
 8008ee2:	4631      	mov	r1, r6
 8008ee4:	4628      	mov	r0, r5
 8008ee6:	47b8      	blx	r7
 8008ee8:	3001      	adds	r0, #1
 8008eea:	f43f aeac 	beq.w	8008c46 <_printf_float+0xb6>
 8008eee:	f108 0801 	add.w	r8, r8, #1
 8008ef2:	e7ec      	b.n	8008ece <_printf_float+0x33e>
 8008ef4:	4613      	mov	r3, r2
 8008ef6:	4631      	mov	r1, r6
 8008ef8:	4642      	mov	r2, r8
 8008efa:	4628      	mov	r0, r5
 8008efc:	47b8      	blx	r7
 8008efe:	3001      	adds	r0, #1
 8008f00:	d1c0      	bne.n	8008e84 <_printf_float+0x2f4>
 8008f02:	e6a0      	b.n	8008c46 <_printf_float+0xb6>
 8008f04:	2301      	movs	r3, #1
 8008f06:	4631      	mov	r1, r6
 8008f08:	4628      	mov	r0, r5
 8008f0a:	920b      	str	r2, [sp, #44]	; 0x2c
 8008f0c:	47b8      	blx	r7
 8008f0e:	3001      	adds	r0, #1
 8008f10:	f43f ae99 	beq.w	8008c46 <_printf_float+0xb6>
 8008f14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008f16:	f10b 0b01 	add.w	fp, fp, #1
 8008f1a:	e7b9      	b.n	8008e90 <_printf_float+0x300>
 8008f1c:	4631      	mov	r1, r6
 8008f1e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f22:	4628      	mov	r0, r5
 8008f24:	47b8      	blx	r7
 8008f26:	3001      	adds	r0, #1
 8008f28:	d1bf      	bne.n	8008eaa <_printf_float+0x31a>
 8008f2a:	e68c      	b.n	8008c46 <_printf_float+0xb6>
 8008f2c:	464b      	mov	r3, r9
 8008f2e:	4631      	mov	r1, r6
 8008f30:	4628      	mov	r0, r5
 8008f32:	eb08 020a 	add.w	r2, r8, sl
 8008f36:	47b8      	blx	r7
 8008f38:	3001      	adds	r0, #1
 8008f3a:	d1c2      	bne.n	8008ec2 <_printf_float+0x332>
 8008f3c:	e683      	b.n	8008c46 <_printf_float+0xb6>
 8008f3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f40:	2a01      	cmp	r2, #1
 8008f42:	dc01      	bgt.n	8008f48 <_printf_float+0x3b8>
 8008f44:	07db      	lsls	r3, r3, #31
 8008f46:	d537      	bpl.n	8008fb8 <_printf_float+0x428>
 8008f48:	2301      	movs	r3, #1
 8008f4a:	4642      	mov	r2, r8
 8008f4c:	4631      	mov	r1, r6
 8008f4e:	4628      	mov	r0, r5
 8008f50:	47b8      	blx	r7
 8008f52:	3001      	adds	r0, #1
 8008f54:	f43f ae77 	beq.w	8008c46 <_printf_float+0xb6>
 8008f58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f5c:	4631      	mov	r1, r6
 8008f5e:	4628      	mov	r0, r5
 8008f60:	47b8      	blx	r7
 8008f62:	3001      	adds	r0, #1
 8008f64:	f43f ae6f 	beq.w	8008c46 <_printf_float+0xb6>
 8008f68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	2300      	movs	r3, #0
 8008f70:	f7f7 fd1a 	bl	80009a8 <__aeabi_dcmpeq>
 8008f74:	b9d8      	cbnz	r0, 8008fae <_printf_float+0x41e>
 8008f76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f78:	f108 0201 	add.w	r2, r8, #1
 8008f7c:	3b01      	subs	r3, #1
 8008f7e:	4631      	mov	r1, r6
 8008f80:	4628      	mov	r0, r5
 8008f82:	47b8      	blx	r7
 8008f84:	3001      	adds	r0, #1
 8008f86:	d10e      	bne.n	8008fa6 <_printf_float+0x416>
 8008f88:	e65d      	b.n	8008c46 <_printf_float+0xb6>
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	464a      	mov	r2, r9
 8008f8e:	4631      	mov	r1, r6
 8008f90:	4628      	mov	r0, r5
 8008f92:	47b8      	blx	r7
 8008f94:	3001      	adds	r0, #1
 8008f96:	f43f ae56 	beq.w	8008c46 <_printf_float+0xb6>
 8008f9a:	f108 0801 	add.w	r8, r8, #1
 8008f9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fa0:	3b01      	subs	r3, #1
 8008fa2:	4543      	cmp	r3, r8
 8008fa4:	dcf1      	bgt.n	8008f8a <_printf_float+0x3fa>
 8008fa6:	4653      	mov	r3, sl
 8008fa8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008fac:	e6e0      	b.n	8008d70 <_printf_float+0x1e0>
 8008fae:	f04f 0800 	mov.w	r8, #0
 8008fb2:	f104 091a 	add.w	r9, r4, #26
 8008fb6:	e7f2      	b.n	8008f9e <_printf_float+0x40e>
 8008fb8:	2301      	movs	r3, #1
 8008fba:	4642      	mov	r2, r8
 8008fbc:	e7df      	b.n	8008f7e <_printf_float+0x3ee>
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	464a      	mov	r2, r9
 8008fc2:	4631      	mov	r1, r6
 8008fc4:	4628      	mov	r0, r5
 8008fc6:	47b8      	blx	r7
 8008fc8:	3001      	adds	r0, #1
 8008fca:	f43f ae3c 	beq.w	8008c46 <_printf_float+0xb6>
 8008fce:	f108 0801 	add.w	r8, r8, #1
 8008fd2:	68e3      	ldr	r3, [r4, #12]
 8008fd4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008fd6:	1a5b      	subs	r3, r3, r1
 8008fd8:	4543      	cmp	r3, r8
 8008fda:	dcf0      	bgt.n	8008fbe <_printf_float+0x42e>
 8008fdc:	e6fd      	b.n	8008dda <_printf_float+0x24a>
 8008fde:	f04f 0800 	mov.w	r8, #0
 8008fe2:	f104 0919 	add.w	r9, r4, #25
 8008fe6:	e7f4      	b.n	8008fd2 <_printf_float+0x442>

08008fe8 <_printf_common>:
 8008fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fec:	4616      	mov	r6, r2
 8008fee:	4699      	mov	r9, r3
 8008ff0:	688a      	ldr	r2, [r1, #8]
 8008ff2:	690b      	ldr	r3, [r1, #16]
 8008ff4:	4607      	mov	r7, r0
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	bfb8      	it	lt
 8008ffa:	4613      	movlt	r3, r2
 8008ffc:	6033      	str	r3, [r6, #0]
 8008ffe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009002:	460c      	mov	r4, r1
 8009004:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009008:	b10a      	cbz	r2, 800900e <_printf_common+0x26>
 800900a:	3301      	adds	r3, #1
 800900c:	6033      	str	r3, [r6, #0]
 800900e:	6823      	ldr	r3, [r4, #0]
 8009010:	0699      	lsls	r1, r3, #26
 8009012:	bf42      	ittt	mi
 8009014:	6833      	ldrmi	r3, [r6, #0]
 8009016:	3302      	addmi	r3, #2
 8009018:	6033      	strmi	r3, [r6, #0]
 800901a:	6825      	ldr	r5, [r4, #0]
 800901c:	f015 0506 	ands.w	r5, r5, #6
 8009020:	d106      	bne.n	8009030 <_printf_common+0x48>
 8009022:	f104 0a19 	add.w	sl, r4, #25
 8009026:	68e3      	ldr	r3, [r4, #12]
 8009028:	6832      	ldr	r2, [r6, #0]
 800902a:	1a9b      	subs	r3, r3, r2
 800902c:	42ab      	cmp	r3, r5
 800902e:	dc28      	bgt.n	8009082 <_printf_common+0x9a>
 8009030:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009034:	1e13      	subs	r3, r2, #0
 8009036:	6822      	ldr	r2, [r4, #0]
 8009038:	bf18      	it	ne
 800903a:	2301      	movne	r3, #1
 800903c:	0692      	lsls	r2, r2, #26
 800903e:	d42d      	bmi.n	800909c <_printf_common+0xb4>
 8009040:	4649      	mov	r1, r9
 8009042:	4638      	mov	r0, r7
 8009044:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009048:	47c0      	blx	r8
 800904a:	3001      	adds	r0, #1
 800904c:	d020      	beq.n	8009090 <_printf_common+0xa8>
 800904e:	6823      	ldr	r3, [r4, #0]
 8009050:	68e5      	ldr	r5, [r4, #12]
 8009052:	f003 0306 	and.w	r3, r3, #6
 8009056:	2b04      	cmp	r3, #4
 8009058:	bf18      	it	ne
 800905a:	2500      	movne	r5, #0
 800905c:	6832      	ldr	r2, [r6, #0]
 800905e:	f04f 0600 	mov.w	r6, #0
 8009062:	68a3      	ldr	r3, [r4, #8]
 8009064:	bf08      	it	eq
 8009066:	1aad      	subeq	r5, r5, r2
 8009068:	6922      	ldr	r2, [r4, #16]
 800906a:	bf08      	it	eq
 800906c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009070:	4293      	cmp	r3, r2
 8009072:	bfc4      	itt	gt
 8009074:	1a9b      	subgt	r3, r3, r2
 8009076:	18ed      	addgt	r5, r5, r3
 8009078:	341a      	adds	r4, #26
 800907a:	42b5      	cmp	r5, r6
 800907c:	d11a      	bne.n	80090b4 <_printf_common+0xcc>
 800907e:	2000      	movs	r0, #0
 8009080:	e008      	b.n	8009094 <_printf_common+0xac>
 8009082:	2301      	movs	r3, #1
 8009084:	4652      	mov	r2, sl
 8009086:	4649      	mov	r1, r9
 8009088:	4638      	mov	r0, r7
 800908a:	47c0      	blx	r8
 800908c:	3001      	adds	r0, #1
 800908e:	d103      	bne.n	8009098 <_printf_common+0xb0>
 8009090:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009098:	3501      	adds	r5, #1
 800909a:	e7c4      	b.n	8009026 <_printf_common+0x3e>
 800909c:	2030      	movs	r0, #48	; 0x30
 800909e:	18e1      	adds	r1, r4, r3
 80090a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80090a4:	1c5a      	adds	r2, r3, #1
 80090a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80090aa:	4422      	add	r2, r4
 80090ac:	3302      	adds	r3, #2
 80090ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80090b2:	e7c5      	b.n	8009040 <_printf_common+0x58>
 80090b4:	2301      	movs	r3, #1
 80090b6:	4622      	mov	r2, r4
 80090b8:	4649      	mov	r1, r9
 80090ba:	4638      	mov	r0, r7
 80090bc:	47c0      	blx	r8
 80090be:	3001      	adds	r0, #1
 80090c0:	d0e6      	beq.n	8009090 <_printf_common+0xa8>
 80090c2:	3601      	adds	r6, #1
 80090c4:	e7d9      	b.n	800907a <_printf_common+0x92>
	...

080090c8 <_printf_i>:
 80090c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090cc:	7e0f      	ldrb	r7, [r1, #24]
 80090ce:	4691      	mov	r9, r2
 80090d0:	2f78      	cmp	r7, #120	; 0x78
 80090d2:	4680      	mov	r8, r0
 80090d4:	460c      	mov	r4, r1
 80090d6:	469a      	mov	sl, r3
 80090d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80090da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80090de:	d807      	bhi.n	80090f0 <_printf_i+0x28>
 80090e0:	2f62      	cmp	r7, #98	; 0x62
 80090e2:	d80a      	bhi.n	80090fa <_printf_i+0x32>
 80090e4:	2f00      	cmp	r7, #0
 80090e6:	f000 80d9 	beq.w	800929c <_printf_i+0x1d4>
 80090ea:	2f58      	cmp	r7, #88	; 0x58
 80090ec:	f000 80a4 	beq.w	8009238 <_printf_i+0x170>
 80090f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80090f8:	e03a      	b.n	8009170 <_printf_i+0xa8>
 80090fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80090fe:	2b15      	cmp	r3, #21
 8009100:	d8f6      	bhi.n	80090f0 <_printf_i+0x28>
 8009102:	a101      	add	r1, pc, #4	; (adr r1, 8009108 <_printf_i+0x40>)
 8009104:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009108:	08009161 	.word	0x08009161
 800910c:	08009175 	.word	0x08009175
 8009110:	080090f1 	.word	0x080090f1
 8009114:	080090f1 	.word	0x080090f1
 8009118:	080090f1 	.word	0x080090f1
 800911c:	080090f1 	.word	0x080090f1
 8009120:	08009175 	.word	0x08009175
 8009124:	080090f1 	.word	0x080090f1
 8009128:	080090f1 	.word	0x080090f1
 800912c:	080090f1 	.word	0x080090f1
 8009130:	080090f1 	.word	0x080090f1
 8009134:	08009283 	.word	0x08009283
 8009138:	080091a5 	.word	0x080091a5
 800913c:	08009265 	.word	0x08009265
 8009140:	080090f1 	.word	0x080090f1
 8009144:	080090f1 	.word	0x080090f1
 8009148:	080092a5 	.word	0x080092a5
 800914c:	080090f1 	.word	0x080090f1
 8009150:	080091a5 	.word	0x080091a5
 8009154:	080090f1 	.word	0x080090f1
 8009158:	080090f1 	.word	0x080090f1
 800915c:	0800926d 	.word	0x0800926d
 8009160:	682b      	ldr	r3, [r5, #0]
 8009162:	1d1a      	adds	r2, r3, #4
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	602a      	str	r2, [r5, #0]
 8009168:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800916c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009170:	2301      	movs	r3, #1
 8009172:	e0a4      	b.n	80092be <_printf_i+0x1f6>
 8009174:	6820      	ldr	r0, [r4, #0]
 8009176:	6829      	ldr	r1, [r5, #0]
 8009178:	0606      	lsls	r6, r0, #24
 800917a:	f101 0304 	add.w	r3, r1, #4
 800917e:	d50a      	bpl.n	8009196 <_printf_i+0xce>
 8009180:	680e      	ldr	r6, [r1, #0]
 8009182:	602b      	str	r3, [r5, #0]
 8009184:	2e00      	cmp	r6, #0
 8009186:	da03      	bge.n	8009190 <_printf_i+0xc8>
 8009188:	232d      	movs	r3, #45	; 0x2d
 800918a:	4276      	negs	r6, r6
 800918c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009190:	230a      	movs	r3, #10
 8009192:	485e      	ldr	r0, [pc, #376]	; (800930c <_printf_i+0x244>)
 8009194:	e019      	b.n	80091ca <_printf_i+0x102>
 8009196:	680e      	ldr	r6, [r1, #0]
 8009198:	f010 0f40 	tst.w	r0, #64	; 0x40
 800919c:	602b      	str	r3, [r5, #0]
 800919e:	bf18      	it	ne
 80091a0:	b236      	sxthne	r6, r6
 80091a2:	e7ef      	b.n	8009184 <_printf_i+0xbc>
 80091a4:	682b      	ldr	r3, [r5, #0]
 80091a6:	6820      	ldr	r0, [r4, #0]
 80091a8:	1d19      	adds	r1, r3, #4
 80091aa:	6029      	str	r1, [r5, #0]
 80091ac:	0601      	lsls	r1, r0, #24
 80091ae:	d501      	bpl.n	80091b4 <_printf_i+0xec>
 80091b0:	681e      	ldr	r6, [r3, #0]
 80091b2:	e002      	b.n	80091ba <_printf_i+0xf2>
 80091b4:	0646      	lsls	r6, r0, #25
 80091b6:	d5fb      	bpl.n	80091b0 <_printf_i+0xe8>
 80091b8:	881e      	ldrh	r6, [r3, #0]
 80091ba:	2f6f      	cmp	r7, #111	; 0x6f
 80091bc:	bf0c      	ite	eq
 80091be:	2308      	moveq	r3, #8
 80091c0:	230a      	movne	r3, #10
 80091c2:	4852      	ldr	r0, [pc, #328]	; (800930c <_printf_i+0x244>)
 80091c4:	2100      	movs	r1, #0
 80091c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80091ca:	6865      	ldr	r5, [r4, #4]
 80091cc:	2d00      	cmp	r5, #0
 80091ce:	bfa8      	it	ge
 80091d0:	6821      	ldrge	r1, [r4, #0]
 80091d2:	60a5      	str	r5, [r4, #8]
 80091d4:	bfa4      	itt	ge
 80091d6:	f021 0104 	bicge.w	r1, r1, #4
 80091da:	6021      	strge	r1, [r4, #0]
 80091dc:	b90e      	cbnz	r6, 80091e2 <_printf_i+0x11a>
 80091de:	2d00      	cmp	r5, #0
 80091e0:	d04d      	beq.n	800927e <_printf_i+0x1b6>
 80091e2:	4615      	mov	r5, r2
 80091e4:	fbb6 f1f3 	udiv	r1, r6, r3
 80091e8:	fb03 6711 	mls	r7, r3, r1, r6
 80091ec:	5dc7      	ldrb	r7, [r0, r7]
 80091ee:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80091f2:	4637      	mov	r7, r6
 80091f4:	42bb      	cmp	r3, r7
 80091f6:	460e      	mov	r6, r1
 80091f8:	d9f4      	bls.n	80091e4 <_printf_i+0x11c>
 80091fa:	2b08      	cmp	r3, #8
 80091fc:	d10b      	bne.n	8009216 <_printf_i+0x14e>
 80091fe:	6823      	ldr	r3, [r4, #0]
 8009200:	07de      	lsls	r6, r3, #31
 8009202:	d508      	bpl.n	8009216 <_printf_i+0x14e>
 8009204:	6923      	ldr	r3, [r4, #16]
 8009206:	6861      	ldr	r1, [r4, #4]
 8009208:	4299      	cmp	r1, r3
 800920a:	bfde      	ittt	le
 800920c:	2330      	movle	r3, #48	; 0x30
 800920e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009212:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009216:	1b52      	subs	r2, r2, r5
 8009218:	6122      	str	r2, [r4, #16]
 800921a:	464b      	mov	r3, r9
 800921c:	4621      	mov	r1, r4
 800921e:	4640      	mov	r0, r8
 8009220:	f8cd a000 	str.w	sl, [sp]
 8009224:	aa03      	add	r2, sp, #12
 8009226:	f7ff fedf 	bl	8008fe8 <_printf_common>
 800922a:	3001      	adds	r0, #1
 800922c:	d14c      	bne.n	80092c8 <_printf_i+0x200>
 800922e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009232:	b004      	add	sp, #16
 8009234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009238:	4834      	ldr	r0, [pc, #208]	; (800930c <_printf_i+0x244>)
 800923a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800923e:	6829      	ldr	r1, [r5, #0]
 8009240:	6823      	ldr	r3, [r4, #0]
 8009242:	f851 6b04 	ldr.w	r6, [r1], #4
 8009246:	6029      	str	r1, [r5, #0]
 8009248:	061d      	lsls	r5, r3, #24
 800924a:	d514      	bpl.n	8009276 <_printf_i+0x1ae>
 800924c:	07df      	lsls	r7, r3, #31
 800924e:	bf44      	itt	mi
 8009250:	f043 0320 	orrmi.w	r3, r3, #32
 8009254:	6023      	strmi	r3, [r4, #0]
 8009256:	b91e      	cbnz	r6, 8009260 <_printf_i+0x198>
 8009258:	6823      	ldr	r3, [r4, #0]
 800925a:	f023 0320 	bic.w	r3, r3, #32
 800925e:	6023      	str	r3, [r4, #0]
 8009260:	2310      	movs	r3, #16
 8009262:	e7af      	b.n	80091c4 <_printf_i+0xfc>
 8009264:	6823      	ldr	r3, [r4, #0]
 8009266:	f043 0320 	orr.w	r3, r3, #32
 800926a:	6023      	str	r3, [r4, #0]
 800926c:	2378      	movs	r3, #120	; 0x78
 800926e:	4828      	ldr	r0, [pc, #160]	; (8009310 <_printf_i+0x248>)
 8009270:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009274:	e7e3      	b.n	800923e <_printf_i+0x176>
 8009276:	0659      	lsls	r1, r3, #25
 8009278:	bf48      	it	mi
 800927a:	b2b6      	uxthmi	r6, r6
 800927c:	e7e6      	b.n	800924c <_printf_i+0x184>
 800927e:	4615      	mov	r5, r2
 8009280:	e7bb      	b.n	80091fa <_printf_i+0x132>
 8009282:	682b      	ldr	r3, [r5, #0]
 8009284:	6826      	ldr	r6, [r4, #0]
 8009286:	1d18      	adds	r0, r3, #4
 8009288:	6961      	ldr	r1, [r4, #20]
 800928a:	6028      	str	r0, [r5, #0]
 800928c:	0635      	lsls	r5, r6, #24
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	d501      	bpl.n	8009296 <_printf_i+0x1ce>
 8009292:	6019      	str	r1, [r3, #0]
 8009294:	e002      	b.n	800929c <_printf_i+0x1d4>
 8009296:	0670      	lsls	r0, r6, #25
 8009298:	d5fb      	bpl.n	8009292 <_printf_i+0x1ca>
 800929a:	8019      	strh	r1, [r3, #0]
 800929c:	2300      	movs	r3, #0
 800929e:	4615      	mov	r5, r2
 80092a0:	6123      	str	r3, [r4, #16]
 80092a2:	e7ba      	b.n	800921a <_printf_i+0x152>
 80092a4:	682b      	ldr	r3, [r5, #0]
 80092a6:	2100      	movs	r1, #0
 80092a8:	1d1a      	adds	r2, r3, #4
 80092aa:	602a      	str	r2, [r5, #0]
 80092ac:	681d      	ldr	r5, [r3, #0]
 80092ae:	6862      	ldr	r2, [r4, #4]
 80092b0:	4628      	mov	r0, r5
 80092b2:	f002 fb85 	bl	800b9c0 <memchr>
 80092b6:	b108      	cbz	r0, 80092bc <_printf_i+0x1f4>
 80092b8:	1b40      	subs	r0, r0, r5
 80092ba:	6060      	str	r0, [r4, #4]
 80092bc:	6863      	ldr	r3, [r4, #4]
 80092be:	6123      	str	r3, [r4, #16]
 80092c0:	2300      	movs	r3, #0
 80092c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092c6:	e7a8      	b.n	800921a <_printf_i+0x152>
 80092c8:	462a      	mov	r2, r5
 80092ca:	4649      	mov	r1, r9
 80092cc:	4640      	mov	r0, r8
 80092ce:	6923      	ldr	r3, [r4, #16]
 80092d0:	47d0      	blx	sl
 80092d2:	3001      	adds	r0, #1
 80092d4:	d0ab      	beq.n	800922e <_printf_i+0x166>
 80092d6:	6823      	ldr	r3, [r4, #0]
 80092d8:	079b      	lsls	r3, r3, #30
 80092da:	d413      	bmi.n	8009304 <_printf_i+0x23c>
 80092dc:	68e0      	ldr	r0, [r4, #12]
 80092de:	9b03      	ldr	r3, [sp, #12]
 80092e0:	4298      	cmp	r0, r3
 80092e2:	bfb8      	it	lt
 80092e4:	4618      	movlt	r0, r3
 80092e6:	e7a4      	b.n	8009232 <_printf_i+0x16a>
 80092e8:	2301      	movs	r3, #1
 80092ea:	4632      	mov	r2, r6
 80092ec:	4649      	mov	r1, r9
 80092ee:	4640      	mov	r0, r8
 80092f0:	47d0      	blx	sl
 80092f2:	3001      	adds	r0, #1
 80092f4:	d09b      	beq.n	800922e <_printf_i+0x166>
 80092f6:	3501      	adds	r5, #1
 80092f8:	68e3      	ldr	r3, [r4, #12]
 80092fa:	9903      	ldr	r1, [sp, #12]
 80092fc:	1a5b      	subs	r3, r3, r1
 80092fe:	42ab      	cmp	r3, r5
 8009300:	dcf2      	bgt.n	80092e8 <_printf_i+0x220>
 8009302:	e7eb      	b.n	80092dc <_printf_i+0x214>
 8009304:	2500      	movs	r5, #0
 8009306:	f104 0619 	add.w	r6, r4, #25
 800930a:	e7f5      	b.n	80092f8 <_printf_i+0x230>
 800930c:	0800d426 	.word	0x0800d426
 8009310:	0800d437 	.word	0x0800d437

08009314 <_scanf_float>:
 8009314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009318:	b087      	sub	sp, #28
 800931a:	9303      	str	r3, [sp, #12]
 800931c:	688b      	ldr	r3, [r1, #8]
 800931e:	4617      	mov	r7, r2
 8009320:	1e5a      	subs	r2, r3, #1
 8009322:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009326:	bf85      	ittet	hi
 8009328:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800932c:	195b      	addhi	r3, r3, r5
 800932e:	2300      	movls	r3, #0
 8009330:	9302      	strhi	r3, [sp, #8]
 8009332:	bf88      	it	hi
 8009334:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009338:	468b      	mov	fp, r1
 800933a:	f04f 0500 	mov.w	r5, #0
 800933e:	bf8c      	ite	hi
 8009340:	608b      	strhi	r3, [r1, #8]
 8009342:	9302      	strls	r3, [sp, #8]
 8009344:	680b      	ldr	r3, [r1, #0]
 8009346:	4680      	mov	r8, r0
 8009348:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800934c:	f84b 3b1c 	str.w	r3, [fp], #28
 8009350:	460c      	mov	r4, r1
 8009352:	465e      	mov	r6, fp
 8009354:	46aa      	mov	sl, r5
 8009356:	46a9      	mov	r9, r5
 8009358:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800935c:	9501      	str	r5, [sp, #4]
 800935e:	68a2      	ldr	r2, [r4, #8]
 8009360:	b152      	cbz	r2, 8009378 <_scanf_float+0x64>
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	2b4e      	cmp	r3, #78	; 0x4e
 8009368:	d864      	bhi.n	8009434 <_scanf_float+0x120>
 800936a:	2b40      	cmp	r3, #64	; 0x40
 800936c:	d83c      	bhi.n	80093e8 <_scanf_float+0xd4>
 800936e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009372:	b2c8      	uxtb	r0, r1
 8009374:	280e      	cmp	r0, #14
 8009376:	d93a      	bls.n	80093ee <_scanf_float+0xda>
 8009378:	f1b9 0f00 	cmp.w	r9, #0
 800937c:	d003      	beq.n	8009386 <_scanf_float+0x72>
 800937e:	6823      	ldr	r3, [r4, #0]
 8009380:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009384:	6023      	str	r3, [r4, #0]
 8009386:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800938a:	f1ba 0f01 	cmp.w	sl, #1
 800938e:	f200 8113 	bhi.w	80095b8 <_scanf_float+0x2a4>
 8009392:	455e      	cmp	r6, fp
 8009394:	f200 8105 	bhi.w	80095a2 <_scanf_float+0x28e>
 8009398:	2501      	movs	r5, #1
 800939a:	4628      	mov	r0, r5
 800939c:	b007      	add	sp, #28
 800939e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093a2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80093a6:	2a0d      	cmp	r2, #13
 80093a8:	d8e6      	bhi.n	8009378 <_scanf_float+0x64>
 80093aa:	a101      	add	r1, pc, #4	; (adr r1, 80093b0 <_scanf_float+0x9c>)
 80093ac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80093b0:	080094ef 	.word	0x080094ef
 80093b4:	08009379 	.word	0x08009379
 80093b8:	08009379 	.word	0x08009379
 80093bc:	08009379 	.word	0x08009379
 80093c0:	0800954f 	.word	0x0800954f
 80093c4:	08009527 	.word	0x08009527
 80093c8:	08009379 	.word	0x08009379
 80093cc:	08009379 	.word	0x08009379
 80093d0:	080094fd 	.word	0x080094fd
 80093d4:	08009379 	.word	0x08009379
 80093d8:	08009379 	.word	0x08009379
 80093dc:	08009379 	.word	0x08009379
 80093e0:	08009379 	.word	0x08009379
 80093e4:	080094b5 	.word	0x080094b5
 80093e8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80093ec:	e7db      	b.n	80093a6 <_scanf_float+0x92>
 80093ee:	290e      	cmp	r1, #14
 80093f0:	d8c2      	bhi.n	8009378 <_scanf_float+0x64>
 80093f2:	a001      	add	r0, pc, #4	; (adr r0, 80093f8 <_scanf_float+0xe4>)
 80093f4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80093f8:	080094a7 	.word	0x080094a7
 80093fc:	08009379 	.word	0x08009379
 8009400:	080094a7 	.word	0x080094a7
 8009404:	0800953b 	.word	0x0800953b
 8009408:	08009379 	.word	0x08009379
 800940c:	08009455 	.word	0x08009455
 8009410:	08009491 	.word	0x08009491
 8009414:	08009491 	.word	0x08009491
 8009418:	08009491 	.word	0x08009491
 800941c:	08009491 	.word	0x08009491
 8009420:	08009491 	.word	0x08009491
 8009424:	08009491 	.word	0x08009491
 8009428:	08009491 	.word	0x08009491
 800942c:	08009491 	.word	0x08009491
 8009430:	08009491 	.word	0x08009491
 8009434:	2b6e      	cmp	r3, #110	; 0x6e
 8009436:	d809      	bhi.n	800944c <_scanf_float+0x138>
 8009438:	2b60      	cmp	r3, #96	; 0x60
 800943a:	d8b2      	bhi.n	80093a2 <_scanf_float+0x8e>
 800943c:	2b54      	cmp	r3, #84	; 0x54
 800943e:	d077      	beq.n	8009530 <_scanf_float+0x21c>
 8009440:	2b59      	cmp	r3, #89	; 0x59
 8009442:	d199      	bne.n	8009378 <_scanf_float+0x64>
 8009444:	2d07      	cmp	r5, #7
 8009446:	d197      	bne.n	8009378 <_scanf_float+0x64>
 8009448:	2508      	movs	r5, #8
 800944a:	e029      	b.n	80094a0 <_scanf_float+0x18c>
 800944c:	2b74      	cmp	r3, #116	; 0x74
 800944e:	d06f      	beq.n	8009530 <_scanf_float+0x21c>
 8009450:	2b79      	cmp	r3, #121	; 0x79
 8009452:	e7f6      	b.n	8009442 <_scanf_float+0x12e>
 8009454:	6821      	ldr	r1, [r4, #0]
 8009456:	05c8      	lsls	r0, r1, #23
 8009458:	d51a      	bpl.n	8009490 <_scanf_float+0x17c>
 800945a:	9b02      	ldr	r3, [sp, #8]
 800945c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009460:	6021      	str	r1, [r4, #0]
 8009462:	f109 0901 	add.w	r9, r9, #1
 8009466:	b11b      	cbz	r3, 8009470 <_scanf_float+0x15c>
 8009468:	3b01      	subs	r3, #1
 800946a:	3201      	adds	r2, #1
 800946c:	9302      	str	r3, [sp, #8]
 800946e:	60a2      	str	r2, [r4, #8]
 8009470:	68a3      	ldr	r3, [r4, #8]
 8009472:	3b01      	subs	r3, #1
 8009474:	60a3      	str	r3, [r4, #8]
 8009476:	6923      	ldr	r3, [r4, #16]
 8009478:	3301      	adds	r3, #1
 800947a:	6123      	str	r3, [r4, #16]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	3b01      	subs	r3, #1
 8009480:	2b00      	cmp	r3, #0
 8009482:	607b      	str	r3, [r7, #4]
 8009484:	f340 8084 	ble.w	8009590 <_scanf_float+0x27c>
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	3301      	adds	r3, #1
 800948c:	603b      	str	r3, [r7, #0]
 800948e:	e766      	b.n	800935e <_scanf_float+0x4a>
 8009490:	eb1a 0f05 	cmn.w	sl, r5
 8009494:	f47f af70 	bne.w	8009378 <_scanf_float+0x64>
 8009498:	6822      	ldr	r2, [r4, #0]
 800949a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800949e:	6022      	str	r2, [r4, #0]
 80094a0:	f806 3b01 	strb.w	r3, [r6], #1
 80094a4:	e7e4      	b.n	8009470 <_scanf_float+0x15c>
 80094a6:	6822      	ldr	r2, [r4, #0]
 80094a8:	0610      	lsls	r0, r2, #24
 80094aa:	f57f af65 	bpl.w	8009378 <_scanf_float+0x64>
 80094ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80094b2:	e7f4      	b.n	800949e <_scanf_float+0x18a>
 80094b4:	f1ba 0f00 	cmp.w	sl, #0
 80094b8:	d10e      	bne.n	80094d8 <_scanf_float+0x1c4>
 80094ba:	f1b9 0f00 	cmp.w	r9, #0
 80094be:	d10e      	bne.n	80094de <_scanf_float+0x1ca>
 80094c0:	6822      	ldr	r2, [r4, #0]
 80094c2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80094c6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80094ca:	d108      	bne.n	80094de <_scanf_float+0x1ca>
 80094cc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80094d0:	f04f 0a01 	mov.w	sl, #1
 80094d4:	6022      	str	r2, [r4, #0]
 80094d6:	e7e3      	b.n	80094a0 <_scanf_float+0x18c>
 80094d8:	f1ba 0f02 	cmp.w	sl, #2
 80094dc:	d055      	beq.n	800958a <_scanf_float+0x276>
 80094de:	2d01      	cmp	r5, #1
 80094e0:	d002      	beq.n	80094e8 <_scanf_float+0x1d4>
 80094e2:	2d04      	cmp	r5, #4
 80094e4:	f47f af48 	bne.w	8009378 <_scanf_float+0x64>
 80094e8:	3501      	adds	r5, #1
 80094ea:	b2ed      	uxtb	r5, r5
 80094ec:	e7d8      	b.n	80094a0 <_scanf_float+0x18c>
 80094ee:	f1ba 0f01 	cmp.w	sl, #1
 80094f2:	f47f af41 	bne.w	8009378 <_scanf_float+0x64>
 80094f6:	f04f 0a02 	mov.w	sl, #2
 80094fa:	e7d1      	b.n	80094a0 <_scanf_float+0x18c>
 80094fc:	b97d      	cbnz	r5, 800951e <_scanf_float+0x20a>
 80094fe:	f1b9 0f00 	cmp.w	r9, #0
 8009502:	f47f af3c 	bne.w	800937e <_scanf_float+0x6a>
 8009506:	6822      	ldr	r2, [r4, #0]
 8009508:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800950c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009510:	f47f af39 	bne.w	8009386 <_scanf_float+0x72>
 8009514:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009518:	2501      	movs	r5, #1
 800951a:	6022      	str	r2, [r4, #0]
 800951c:	e7c0      	b.n	80094a0 <_scanf_float+0x18c>
 800951e:	2d03      	cmp	r5, #3
 8009520:	d0e2      	beq.n	80094e8 <_scanf_float+0x1d4>
 8009522:	2d05      	cmp	r5, #5
 8009524:	e7de      	b.n	80094e4 <_scanf_float+0x1d0>
 8009526:	2d02      	cmp	r5, #2
 8009528:	f47f af26 	bne.w	8009378 <_scanf_float+0x64>
 800952c:	2503      	movs	r5, #3
 800952e:	e7b7      	b.n	80094a0 <_scanf_float+0x18c>
 8009530:	2d06      	cmp	r5, #6
 8009532:	f47f af21 	bne.w	8009378 <_scanf_float+0x64>
 8009536:	2507      	movs	r5, #7
 8009538:	e7b2      	b.n	80094a0 <_scanf_float+0x18c>
 800953a:	6822      	ldr	r2, [r4, #0]
 800953c:	0591      	lsls	r1, r2, #22
 800953e:	f57f af1b 	bpl.w	8009378 <_scanf_float+0x64>
 8009542:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009546:	6022      	str	r2, [r4, #0]
 8009548:	f8cd 9004 	str.w	r9, [sp, #4]
 800954c:	e7a8      	b.n	80094a0 <_scanf_float+0x18c>
 800954e:	6822      	ldr	r2, [r4, #0]
 8009550:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009554:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009558:	d006      	beq.n	8009568 <_scanf_float+0x254>
 800955a:	0550      	lsls	r0, r2, #21
 800955c:	f57f af0c 	bpl.w	8009378 <_scanf_float+0x64>
 8009560:	f1b9 0f00 	cmp.w	r9, #0
 8009564:	f43f af0f 	beq.w	8009386 <_scanf_float+0x72>
 8009568:	0591      	lsls	r1, r2, #22
 800956a:	bf58      	it	pl
 800956c:	9901      	ldrpl	r1, [sp, #4]
 800956e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009572:	bf58      	it	pl
 8009574:	eba9 0101 	subpl.w	r1, r9, r1
 8009578:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800957c:	f04f 0900 	mov.w	r9, #0
 8009580:	bf58      	it	pl
 8009582:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009586:	6022      	str	r2, [r4, #0]
 8009588:	e78a      	b.n	80094a0 <_scanf_float+0x18c>
 800958a:	f04f 0a03 	mov.w	sl, #3
 800958e:	e787      	b.n	80094a0 <_scanf_float+0x18c>
 8009590:	4639      	mov	r1, r7
 8009592:	4640      	mov	r0, r8
 8009594:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009598:	4798      	blx	r3
 800959a:	2800      	cmp	r0, #0
 800959c:	f43f aedf 	beq.w	800935e <_scanf_float+0x4a>
 80095a0:	e6ea      	b.n	8009378 <_scanf_float+0x64>
 80095a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80095a6:	463a      	mov	r2, r7
 80095a8:	4640      	mov	r0, r8
 80095aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80095ae:	4798      	blx	r3
 80095b0:	6923      	ldr	r3, [r4, #16]
 80095b2:	3b01      	subs	r3, #1
 80095b4:	6123      	str	r3, [r4, #16]
 80095b6:	e6ec      	b.n	8009392 <_scanf_float+0x7e>
 80095b8:	1e6b      	subs	r3, r5, #1
 80095ba:	2b06      	cmp	r3, #6
 80095bc:	d825      	bhi.n	800960a <_scanf_float+0x2f6>
 80095be:	2d02      	cmp	r5, #2
 80095c0:	d836      	bhi.n	8009630 <_scanf_float+0x31c>
 80095c2:	455e      	cmp	r6, fp
 80095c4:	f67f aee8 	bls.w	8009398 <_scanf_float+0x84>
 80095c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80095cc:	463a      	mov	r2, r7
 80095ce:	4640      	mov	r0, r8
 80095d0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80095d4:	4798      	blx	r3
 80095d6:	6923      	ldr	r3, [r4, #16]
 80095d8:	3b01      	subs	r3, #1
 80095da:	6123      	str	r3, [r4, #16]
 80095dc:	e7f1      	b.n	80095c2 <_scanf_float+0x2ae>
 80095de:	9802      	ldr	r0, [sp, #8]
 80095e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80095e4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80095e8:	463a      	mov	r2, r7
 80095ea:	9002      	str	r0, [sp, #8]
 80095ec:	4640      	mov	r0, r8
 80095ee:	4798      	blx	r3
 80095f0:	6923      	ldr	r3, [r4, #16]
 80095f2:	3b01      	subs	r3, #1
 80095f4:	6123      	str	r3, [r4, #16]
 80095f6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80095fa:	fa5f fa8a 	uxtb.w	sl, sl
 80095fe:	f1ba 0f02 	cmp.w	sl, #2
 8009602:	d1ec      	bne.n	80095de <_scanf_float+0x2ca>
 8009604:	3d03      	subs	r5, #3
 8009606:	b2ed      	uxtb	r5, r5
 8009608:	1b76      	subs	r6, r6, r5
 800960a:	6823      	ldr	r3, [r4, #0]
 800960c:	05da      	lsls	r2, r3, #23
 800960e:	d52f      	bpl.n	8009670 <_scanf_float+0x35c>
 8009610:	055b      	lsls	r3, r3, #21
 8009612:	d510      	bpl.n	8009636 <_scanf_float+0x322>
 8009614:	455e      	cmp	r6, fp
 8009616:	f67f aebf 	bls.w	8009398 <_scanf_float+0x84>
 800961a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800961e:	463a      	mov	r2, r7
 8009620:	4640      	mov	r0, r8
 8009622:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009626:	4798      	blx	r3
 8009628:	6923      	ldr	r3, [r4, #16]
 800962a:	3b01      	subs	r3, #1
 800962c:	6123      	str	r3, [r4, #16]
 800962e:	e7f1      	b.n	8009614 <_scanf_float+0x300>
 8009630:	46aa      	mov	sl, r5
 8009632:	9602      	str	r6, [sp, #8]
 8009634:	e7df      	b.n	80095f6 <_scanf_float+0x2e2>
 8009636:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800963a:	6923      	ldr	r3, [r4, #16]
 800963c:	2965      	cmp	r1, #101	; 0x65
 800963e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8009642:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8009646:	6123      	str	r3, [r4, #16]
 8009648:	d00c      	beq.n	8009664 <_scanf_float+0x350>
 800964a:	2945      	cmp	r1, #69	; 0x45
 800964c:	d00a      	beq.n	8009664 <_scanf_float+0x350>
 800964e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009652:	463a      	mov	r2, r7
 8009654:	4640      	mov	r0, r8
 8009656:	4798      	blx	r3
 8009658:	6923      	ldr	r3, [r4, #16]
 800965a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800965e:	3b01      	subs	r3, #1
 8009660:	1eb5      	subs	r5, r6, #2
 8009662:	6123      	str	r3, [r4, #16]
 8009664:	463a      	mov	r2, r7
 8009666:	4640      	mov	r0, r8
 8009668:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800966c:	4798      	blx	r3
 800966e:	462e      	mov	r6, r5
 8009670:	6825      	ldr	r5, [r4, #0]
 8009672:	f015 0510 	ands.w	r5, r5, #16
 8009676:	d155      	bne.n	8009724 <_scanf_float+0x410>
 8009678:	7035      	strb	r5, [r6, #0]
 800967a:	6823      	ldr	r3, [r4, #0]
 800967c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009684:	d11b      	bne.n	80096be <_scanf_float+0x3aa>
 8009686:	9b01      	ldr	r3, [sp, #4]
 8009688:	454b      	cmp	r3, r9
 800968a:	eba3 0209 	sub.w	r2, r3, r9
 800968e:	d123      	bne.n	80096d8 <_scanf_float+0x3c4>
 8009690:	2200      	movs	r2, #0
 8009692:	4659      	mov	r1, fp
 8009694:	4640      	mov	r0, r8
 8009696:	f000 fe83 	bl	800a3a0 <_strtod_r>
 800969a:	6822      	ldr	r2, [r4, #0]
 800969c:	9b03      	ldr	r3, [sp, #12]
 800969e:	f012 0f02 	tst.w	r2, #2
 80096a2:	4606      	mov	r6, r0
 80096a4:	460f      	mov	r7, r1
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	d021      	beq.n	80096ee <_scanf_float+0x3da>
 80096aa:	1d1a      	adds	r2, r3, #4
 80096ac:	9903      	ldr	r1, [sp, #12]
 80096ae:	600a      	str	r2, [r1, #0]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	e9c3 6700 	strd	r6, r7, [r3]
 80096b6:	68e3      	ldr	r3, [r4, #12]
 80096b8:	3301      	adds	r3, #1
 80096ba:	60e3      	str	r3, [r4, #12]
 80096bc:	e66d      	b.n	800939a <_scanf_float+0x86>
 80096be:	9b04      	ldr	r3, [sp, #16]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d0e5      	beq.n	8009690 <_scanf_float+0x37c>
 80096c4:	9905      	ldr	r1, [sp, #20]
 80096c6:	230a      	movs	r3, #10
 80096c8:	462a      	mov	r2, r5
 80096ca:	4640      	mov	r0, r8
 80096cc:	3101      	adds	r1, #1
 80096ce:	f000 ff45 	bl	800a55c <_strtol_r>
 80096d2:	9b04      	ldr	r3, [sp, #16]
 80096d4:	9e05      	ldr	r6, [sp, #20]
 80096d6:	1ac2      	subs	r2, r0, r3
 80096d8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80096dc:	429e      	cmp	r6, r3
 80096de:	bf28      	it	cs
 80096e0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80096e4:	4630      	mov	r0, r6
 80096e6:	4910      	ldr	r1, [pc, #64]	; (8009728 <_scanf_float+0x414>)
 80096e8:	f000 f826 	bl	8009738 <siprintf>
 80096ec:	e7d0      	b.n	8009690 <_scanf_float+0x37c>
 80096ee:	f012 0f04 	tst.w	r2, #4
 80096f2:	f103 0204 	add.w	r2, r3, #4
 80096f6:	d1d9      	bne.n	80096ac <_scanf_float+0x398>
 80096f8:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80096fc:	f8cc 2000 	str.w	r2, [ip]
 8009700:	f8d3 8000 	ldr.w	r8, [r3]
 8009704:	4602      	mov	r2, r0
 8009706:	460b      	mov	r3, r1
 8009708:	f7f7 f980 	bl	8000a0c <__aeabi_dcmpun>
 800970c:	b128      	cbz	r0, 800971a <_scanf_float+0x406>
 800970e:	4807      	ldr	r0, [pc, #28]	; (800972c <_scanf_float+0x418>)
 8009710:	f000 f80e 	bl	8009730 <nanf>
 8009714:	f8c8 0000 	str.w	r0, [r8]
 8009718:	e7cd      	b.n	80096b6 <_scanf_float+0x3a2>
 800971a:	4630      	mov	r0, r6
 800971c:	4639      	mov	r1, r7
 800971e:	f7f7 f9d3 	bl	8000ac8 <__aeabi_d2f>
 8009722:	e7f7      	b.n	8009714 <_scanf_float+0x400>
 8009724:	2500      	movs	r5, #0
 8009726:	e638      	b.n	800939a <_scanf_float+0x86>
 8009728:	0800d448 	.word	0x0800d448
 800972c:	0800d54f 	.word	0x0800d54f

08009730 <nanf>:
 8009730:	4800      	ldr	r0, [pc, #0]	; (8009734 <nanf+0x4>)
 8009732:	4770      	bx	lr
 8009734:	7fc00000 	.word	0x7fc00000

08009738 <siprintf>:
 8009738:	b40e      	push	{r1, r2, r3}
 800973a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800973e:	b500      	push	{lr}
 8009740:	b09c      	sub	sp, #112	; 0x70
 8009742:	ab1d      	add	r3, sp, #116	; 0x74
 8009744:	9002      	str	r0, [sp, #8]
 8009746:	9006      	str	r0, [sp, #24]
 8009748:	9107      	str	r1, [sp, #28]
 800974a:	9104      	str	r1, [sp, #16]
 800974c:	4808      	ldr	r0, [pc, #32]	; (8009770 <siprintf+0x38>)
 800974e:	4909      	ldr	r1, [pc, #36]	; (8009774 <siprintf+0x3c>)
 8009750:	f853 2b04 	ldr.w	r2, [r3], #4
 8009754:	9105      	str	r1, [sp, #20]
 8009756:	6800      	ldr	r0, [r0, #0]
 8009758:	a902      	add	r1, sp, #8
 800975a:	9301      	str	r3, [sp, #4]
 800975c:	f002 ff50 	bl	800c600 <_svfiprintf_r>
 8009760:	2200      	movs	r2, #0
 8009762:	9b02      	ldr	r3, [sp, #8]
 8009764:	701a      	strb	r2, [r3, #0]
 8009766:	b01c      	add	sp, #112	; 0x70
 8009768:	f85d eb04 	ldr.w	lr, [sp], #4
 800976c:	b003      	add	sp, #12
 800976e:	4770      	bx	lr
 8009770:	2000017c 	.word	0x2000017c
 8009774:	ffff0208 	.word	0xffff0208

08009778 <strcpy>:
 8009778:	4603      	mov	r3, r0
 800977a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800977e:	f803 2b01 	strb.w	r2, [r3], #1
 8009782:	2a00      	cmp	r2, #0
 8009784:	d1f9      	bne.n	800977a <strcpy+0x2>
 8009786:	4770      	bx	lr

08009788 <sulp>:
 8009788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800978c:	460f      	mov	r7, r1
 800978e:	4690      	mov	r8, r2
 8009790:	f002 fca2 	bl	800c0d8 <__ulp>
 8009794:	4604      	mov	r4, r0
 8009796:	460d      	mov	r5, r1
 8009798:	f1b8 0f00 	cmp.w	r8, #0
 800979c:	d011      	beq.n	80097c2 <sulp+0x3a>
 800979e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80097a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	dd0b      	ble.n	80097c2 <sulp+0x3a>
 80097aa:	2400      	movs	r4, #0
 80097ac:	051b      	lsls	r3, r3, #20
 80097ae:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80097b2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80097b6:	4622      	mov	r2, r4
 80097b8:	462b      	mov	r3, r5
 80097ba:	f7f6 fe8d 	bl	80004d8 <__aeabi_dmul>
 80097be:	4604      	mov	r4, r0
 80097c0:	460d      	mov	r5, r1
 80097c2:	4620      	mov	r0, r4
 80097c4:	4629      	mov	r1, r5
 80097c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097ca:	0000      	movs	r0, r0
 80097cc:	0000      	movs	r0, r0
	...

080097d0 <_strtod_l>:
 80097d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097d4:	469b      	mov	fp, r3
 80097d6:	2300      	movs	r3, #0
 80097d8:	b09f      	sub	sp, #124	; 0x7c
 80097da:	931a      	str	r3, [sp, #104]	; 0x68
 80097dc:	4b9e      	ldr	r3, [pc, #632]	; (8009a58 <_strtod_l+0x288>)
 80097de:	4682      	mov	sl, r0
 80097e0:	681f      	ldr	r7, [r3, #0]
 80097e2:	460e      	mov	r6, r1
 80097e4:	4638      	mov	r0, r7
 80097e6:	9215      	str	r2, [sp, #84]	; 0x54
 80097e8:	f7f6 fcb2 	bl	8000150 <strlen>
 80097ec:	f04f 0800 	mov.w	r8, #0
 80097f0:	4604      	mov	r4, r0
 80097f2:	f04f 0900 	mov.w	r9, #0
 80097f6:	9619      	str	r6, [sp, #100]	; 0x64
 80097f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80097fa:	781a      	ldrb	r2, [r3, #0]
 80097fc:	2a2b      	cmp	r2, #43	; 0x2b
 80097fe:	d04c      	beq.n	800989a <_strtod_l+0xca>
 8009800:	d83a      	bhi.n	8009878 <_strtod_l+0xa8>
 8009802:	2a0d      	cmp	r2, #13
 8009804:	d833      	bhi.n	800986e <_strtod_l+0x9e>
 8009806:	2a08      	cmp	r2, #8
 8009808:	d833      	bhi.n	8009872 <_strtod_l+0xa2>
 800980a:	2a00      	cmp	r2, #0
 800980c:	d03d      	beq.n	800988a <_strtod_l+0xba>
 800980e:	2300      	movs	r3, #0
 8009810:	930a      	str	r3, [sp, #40]	; 0x28
 8009812:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8009814:	782b      	ldrb	r3, [r5, #0]
 8009816:	2b30      	cmp	r3, #48	; 0x30
 8009818:	f040 80aa 	bne.w	8009970 <_strtod_l+0x1a0>
 800981c:	786b      	ldrb	r3, [r5, #1]
 800981e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009822:	2b58      	cmp	r3, #88	; 0x58
 8009824:	d166      	bne.n	80098f4 <_strtod_l+0x124>
 8009826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009828:	4650      	mov	r0, sl
 800982a:	9301      	str	r3, [sp, #4]
 800982c:	ab1a      	add	r3, sp, #104	; 0x68
 800982e:	9300      	str	r3, [sp, #0]
 8009830:	4a8a      	ldr	r2, [pc, #552]	; (8009a5c <_strtod_l+0x28c>)
 8009832:	f8cd b008 	str.w	fp, [sp, #8]
 8009836:	ab1b      	add	r3, sp, #108	; 0x6c
 8009838:	a919      	add	r1, sp, #100	; 0x64
 800983a:	f001 fda5 	bl	800b388 <__gethex>
 800983e:	f010 0607 	ands.w	r6, r0, #7
 8009842:	4604      	mov	r4, r0
 8009844:	d005      	beq.n	8009852 <_strtod_l+0x82>
 8009846:	2e06      	cmp	r6, #6
 8009848:	d129      	bne.n	800989e <_strtod_l+0xce>
 800984a:	2300      	movs	r3, #0
 800984c:	3501      	adds	r5, #1
 800984e:	9519      	str	r5, [sp, #100]	; 0x64
 8009850:	930a      	str	r3, [sp, #40]	; 0x28
 8009852:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009854:	2b00      	cmp	r3, #0
 8009856:	f040 858a 	bne.w	800a36e <_strtod_l+0xb9e>
 800985a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800985c:	b1d3      	cbz	r3, 8009894 <_strtod_l+0xc4>
 800985e:	4642      	mov	r2, r8
 8009860:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009864:	4610      	mov	r0, r2
 8009866:	4619      	mov	r1, r3
 8009868:	b01f      	add	sp, #124	; 0x7c
 800986a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800986e:	2a20      	cmp	r2, #32
 8009870:	d1cd      	bne.n	800980e <_strtod_l+0x3e>
 8009872:	3301      	adds	r3, #1
 8009874:	9319      	str	r3, [sp, #100]	; 0x64
 8009876:	e7bf      	b.n	80097f8 <_strtod_l+0x28>
 8009878:	2a2d      	cmp	r2, #45	; 0x2d
 800987a:	d1c8      	bne.n	800980e <_strtod_l+0x3e>
 800987c:	2201      	movs	r2, #1
 800987e:	920a      	str	r2, [sp, #40]	; 0x28
 8009880:	1c5a      	adds	r2, r3, #1
 8009882:	9219      	str	r2, [sp, #100]	; 0x64
 8009884:	785b      	ldrb	r3, [r3, #1]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d1c3      	bne.n	8009812 <_strtod_l+0x42>
 800988a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800988c:	9619      	str	r6, [sp, #100]	; 0x64
 800988e:	2b00      	cmp	r3, #0
 8009890:	f040 856b 	bne.w	800a36a <_strtod_l+0xb9a>
 8009894:	4642      	mov	r2, r8
 8009896:	464b      	mov	r3, r9
 8009898:	e7e4      	b.n	8009864 <_strtod_l+0x94>
 800989a:	2200      	movs	r2, #0
 800989c:	e7ef      	b.n	800987e <_strtod_l+0xae>
 800989e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80098a0:	b13a      	cbz	r2, 80098b2 <_strtod_l+0xe2>
 80098a2:	2135      	movs	r1, #53	; 0x35
 80098a4:	a81c      	add	r0, sp, #112	; 0x70
 80098a6:	f002 fd1b 	bl	800c2e0 <__copybits>
 80098aa:	4650      	mov	r0, sl
 80098ac:	991a      	ldr	r1, [sp, #104]	; 0x68
 80098ae:	f002 f8e3 	bl	800ba78 <_Bfree>
 80098b2:	3e01      	subs	r6, #1
 80098b4:	2e04      	cmp	r6, #4
 80098b6:	d806      	bhi.n	80098c6 <_strtod_l+0xf6>
 80098b8:	e8df f006 	tbb	[pc, r6]
 80098bc:	1714030a 	.word	0x1714030a
 80098c0:	0a          	.byte	0x0a
 80098c1:	00          	.byte	0x00
 80098c2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80098c6:	0721      	lsls	r1, r4, #28
 80098c8:	d5c3      	bpl.n	8009852 <_strtod_l+0x82>
 80098ca:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80098ce:	e7c0      	b.n	8009852 <_strtod_l+0x82>
 80098d0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80098d2:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80098d6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80098da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80098de:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80098e2:	e7f0      	b.n	80098c6 <_strtod_l+0xf6>
 80098e4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009a60 <_strtod_l+0x290>
 80098e8:	e7ed      	b.n	80098c6 <_strtod_l+0xf6>
 80098ea:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80098ee:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80098f2:	e7e8      	b.n	80098c6 <_strtod_l+0xf6>
 80098f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80098f6:	1c5a      	adds	r2, r3, #1
 80098f8:	9219      	str	r2, [sp, #100]	; 0x64
 80098fa:	785b      	ldrb	r3, [r3, #1]
 80098fc:	2b30      	cmp	r3, #48	; 0x30
 80098fe:	d0f9      	beq.n	80098f4 <_strtod_l+0x124>
 8009900:	2b00      	cmp	r3, #0
 8009902:	d0a6      	beq.n	8009852 <_strtod_l+0x82>
 8009904:	2301      	movs	r3, #1
 8009906:	9307      	str	r3, [sp, #28]
 8009908:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800990a:	220a      	movs	r2, #10
 800990c:	9308      	str	r3, [sp, #32]
 800990e:	2300      	movs	r3, #0
 8009910:	469b      	mov	fp, r3
 8009912:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8009916:	9819      	ldr	r0, [sp, #100]	; 0x64
 8009918:	7805      	ldrb	r5, [r0, #0]
 800991a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800991e:	b2d9      	uxtb	r1, r3
 8009920:	2909      	cmp	r1, #9
 8009922:	d927      	bls.n	8009974 <_strtod_l+0x1a4>
 8009924:	4622      	mov	r2, r4
 8009926:	4639      	mov	r1, r7
 8009928:	f003 f8d8 	bl	800cadc <strncmp>
 800992c:	2800      	cmp	r0, #0
 800992e:	d033      	beq.n	8009998 <_strtod_l+0x1c8>
 8009930:	2000      	movs	r0, #0
 8009932:	462a      	mov	r2, r5
 8009934:	465c      	mov	r4, fp
 8009936:	4603      	mov	r3, r0
 8009938:	9004      	str	r0, [sp, #16]
 800993a:	2a65      	cmp	r2, #101	; 0x65
 800993c:	d001      	beq.n	8009942 <_strtod_l+0x172>
 800993e:	2a45      	cmp	r2, #69	; 0x45
 8009940:	d114      	bne.n	800996c <_strtod_l+0x19c>
 8009942:	b91c      	cbnz	r4, 800994c <_strtod_l+0x17c>
 8009944:	9a07      	ldr	r2, [sp, #28]
 8009946:	4302      	orrs	r2, r0
 8009948:	d09f      	beq.n	800988a <_strtod_l+0xba>
 800994a:	2400      	movs	r4, #0
 800994c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800994e:	1c72      	adds	r2, r6, #1
 8009950:	9219      	str	r2, [sp, #100]	; 0x64
 8009952:	7872      	ldrb	r2, [r6, #1]
 8009954:	2a2b      	cmp	r2, #43	; 0x2b
 8009956:	d079      	beq.n	8009a4c <_strtod_l+0x27c>
 8009958:	2a2d      	cmp	r2, #45	; 0x2d
 800995a:	f000 8083 	beq.w	8009a64 <_strtod_l+0x294>
 800995e:	2700      	movs	r7, #0
 8009960:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009964:	2909      	cmp	r1, #9
 8009966:	f240 8083 	bls.w	8009a70 <_strtod_l+0x2a0>
 800996a:	9619      	str	r6, [sp, #100]	; 0x64
 800996c:	2500      	movs	r5, #0
 800996e:	e09f      	b.n	8009ab0 <_strtod_l+0x2e0>
 8009970:	2300      	movs	r3, #0
 8009972:	e7c8      	b.n	8009906 <_strtod_l+0x136>
 8009974:	f1bb 0f08 	cmp.w	fp, #8
 8009978:	bfd5      	itete	le
 800997a:	9906      	ldrle	r1, [sp, #24]
 800997c:	9905      	ldrgt	r1, [sp, #20]
 800997e:	fb02 3301 	mlale	r3, r2, r1, r3
 8009982:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009986:	f100 0001 	add.w	r0, r0, #1
 800998a:	bfd4      	ite	le
 800998c:	9306      	strle	r3, [sp, #24]
 800998e:	9305      	strgt	r3, [sp, #20]
 8009990:	f10b 0b01 	add.w	fp, fp, #1
 8009994:	9019      	str	r0, [sp, #100]	; 0x64
 8009996:	e7be      	b.n	8009916 <_strtod_l+0x146>
 8009998:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800999a:	191a      	adds	r2, r3, r4
 800999c:	9219      	str	r2, [sp, #100]	; 0x64
 800999e:	5d1a      	ldrb	r2, [r3, r4]
 80099a0:	f1bb 0f00 	cmp.w	fp, #0
 80099a4:	d036      	beq.n	8009a14 <_strtod_l+0x244>
 80099a6:	465c      	mov	r4, fp
 80099a8:	9004      	str	r0, [sp, #16]
 80099aa:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80099ae:	2b09      	cmp	r3, #9
 80099b0:	d912      	bls.n	80099d8 <_strtod_l+0x208>
 80099b2:	2301      	movs	r3, #1
 80099b4:	e7c1      	b.n	800993a <_strtod_l+0x16a>
 80099b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80099b8:	3001      	adds	r0, #1
 80099ba:	1c5a      	adds	r2, r3, #1
 80099bc:	9219      	str	r2, [sp, #100]	; 0x64
 80099be:	785a      	ldrb	r2, [r3, #1]
 80099c0:	2a30      	cmp	r2, #48	; 0x30
 80099c2:	d0f8      	beq.n	80099b6 <_strtod_l+0x1e6>
 80099c4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80099c8:	2b08      	cmp	r3, #8
 80099ca:	f200 84d5 	bhi.w	800a378 <_strtod_l+0xba8>
 80099ce:	9004      	str	r0, [sp, #16]
 80099d0:	2000      	movs	r0, #0
 80099d2:	4604      	mov	r4, r0
 80099d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80099d6:	9308      	str	r3, [sp, #32]
 80099d8:	3a30      	subs	r2, #48	; 0x30
 80099da:	f100 0301 	add.w	r3, r0, #1
 80099de:	d013      	beq.n	8009a08 <_strtod_l+0x238>
 80099e0:	9904      	ldr	r1, [sp, #16]
 80099e2:	1905      	adds	r5, r0, r4
 80099e4:	4419      	add	r1, r3
 80099e6:	9104      	str	r1, [sp, #16]
 80099e8:	4623      	mov	r3, r4
 80099ea:	210a      	movs	r1, #10
 80099ec:	42ab      	cmp	r3, r5
 80099ee:	d113      	bne.n	8009a18 <_strtod_l+0x248>
 80099f0:	1823      	adds	r3, r4, r0
 80099f2:	2b08      	cmp	r3, #8
 80099f4:	f104 0401 	add.w	r4, r4, #1
 80099f8:	4404      	add	r4, r0
 80099fa:	dc1b      	bgt.n	8009a34 <_strtod_l+0x264>
 80099fc:	230a      	movs	r3, #10
 80099fe:	9906      	ldr	r1, [sp, #24]
 8009a00:	fb03 2301 	mla	r3, r3, r1, r2
 8009a04:	9306      	str	r3, [sp, #24]
 8009a06:	2300      	movs	r3, #0
 8009a08:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	1c51      	adds	r1, r2, #1
 8009a0e:	9119      	str	r1, [sp, #100]	; 0x64
 8009a10:	7852      	ldrb	r2, [r2, #1]
 8009a12:	e7ca      	b.n	80099aa <_strtod_l+0x1da>
 8009a14:	4658      	mov	r0, fp
 8009a16:	e7d3      	b.n	80099c0 <_strtod_l+0x1f0>
 8009a18:	2b08      	cmp	r3, #8
 8009a1a:	dc04      	bgt.n	8009a26 <_strtod_l+0x256>
 8009a1c:	9f06      	ldr	r7, [sp, #24]
 8009a1e:	434f      	muls	r7, r1
 8009a20:	9706      	str	r7, [sp, #24]
 8009a22:	3301      	adds	r3, #1
 8009a24:	e7e2      	b.n	80099ec <_strtod_l+0x21c>
 8009a26:	1c5f      	adds	r7, r3, #1
 8009a28:	2f10      	cmp	r7, #16
 8009a2a:	bfde      	ittt	le
 8009a2c:	9f05      	ldrle	r7, [sp, #20]
 8009a2e:	434f      	mulle	r7, r1
 8009a30:	9705      	strle	r7, [sp, #20]
 8009a32:	e7f6      	b.n	8009a22 <_strtod_l+0x252>
 8009a34:	2c10      	cmp	r4, #16
 8009a36:	bfdf      	itttt	le
 8009a38:	230a      	movle	r3, #10
 8009a3a:	9905      	ldrle	r1, [sp, #20]
 8009a3c:	fb03 2301 	mlale	r3, r3, r1, r2
 8009a40:	9305      	strle	r3, [sp, #20]
 8009a42:	e7e0      	b.n	8009a06 <_strtod_l+0x236>
 8009a44:	2300      	movs	r3, #0
 8009a46:	9304      	str	r3, [sp, #16]
 8009a48:	2301      	movs	r3, #1
 8009a4a:	e77b      	b.n	8009944 <_strtod_l+0x174>
 8009a4c:	2700      	movs	r7, #0
 8009a4e:	1cb2      	adds	r2, r6, #2
 8009a50:	9219      	str	r2, [sp, #100]	; 0x64
 8009a52:	78b2      	ldrb	r2, [r6, #2]
 8009a54:	e784      	b.n	8009960 <_strtod_l+0x190>
 8009a56:	bf00      	nop
 8009a58:	0800d730 	.word	0x0800d730
 8009a5c:	0800d450 	.word	0x0800d450
 8009a60:	7ff00000 	.word	0x7ff00000
 8009a64:	2701      	movs	r7, #1
 8009a66:	e7f2      	b.n	8009a4e <_strtod_l+0x27e>
 8009a68:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009a6a:	1c51      	adds	r1, r2, #1
 8009a6c:	9119      	str	r1, [sp, #100]	; 0x64
 8009a6e:	7852      	ldrb	r2, [r2, #1]
 8009a70:	2a30      	cmp	r2, #48	; 0x30
 8009a72:	d0f9      	beq.n	8009a68 <_strtod_l+0x298>
 8009a74:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009a78:	2908      	cmp	r1, #8
 8009a7a:	f63f af77 	bhi.w	800996c <_strtod_l+0x19c>
 8009a7e:	f04f 0e0a 	mov.w	lr, #10
 8009a82:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8009a86:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009a88:	9209      	str	r2, [sp, #36]	; 0x24
 8009a8a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009a8c:	1c51      	adds	r1, r2, #1
 8009a8e:	9119      	str	r1, [sp, #100]	; 0x64
 8009a90:	7852      	ldrb	r2, [r2, #1]
 8009a92:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8009a96:	2d09      	cmp	r5, #9
 8009a98:	d935      	bls.n	8009b06 <_strtod_l+0x336>
 8009a9a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009a9c:	1b49      	subs	r1, r1, r5
 8009a9e:	2908      	cmp	r1, #8
 8009aa0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8009aa4:	dc02      	bgt.n	8009aac <_strtod_l+0x2dc>
 8009aa6:	4565      	cmp	r5, ip
 8009aa8:	bfa8      	it	ge
 8009aaa:	4665      	movge	r5, ip
 8009aac:	b107      	cbz	r7, 8009ab0 <_strtod_l+0x2e0>
 8009aae:	426d      	negs	r5, r5
 8009ab0:	2c00      	cmp	r4, #0
 8009ab2:	d14c      	bne.n	8009b4e <_strtod_l+0x37e>
 8009ab4:	9907      	ldr	r1, [sp, #28]
 8009ab6:	4301      	orrs	r1, r0
 8009ab8:	f47f aecb 	bne.w	8009852 <_strtod_l+0x82>
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	f47f aee4 	bne.w	800988a <_strtod_l+0xba>
 8009ac2:	2a69      	cmp	r2, #105	; 0x69
 8009ac4:	d026      	beq.n	8009b14 <_strtod_l+0x344>
 8009ac6:	dc23      	bgt.n	8009b10 <_strtod_l+0x340>
 8009ac8:	2a49      	cmp	r2, #73	; 0x49
 8009aca:	d023      	beq.n	8009b14 <_strtod_l+0x344>
 8009acc:	2a4e      	cmp	r2, #78	; 0x4e
 8009ace:	f47f aedc 	bne.w	800988a <_strtod_l+0xba>
 8009ad2:	499d      	ldr	r1, [pc, #628]	; (8009d48 <_strtod_l+0x578>)
 8009ad4:	a819      	add	r0, sp, #100	; 0x64
 8009ad6:	f001 fea5 	bl	800b824 <__match>
 8009ada:	2800      	cmp	r0, #0
 8009adc:	f43f aed5 	beq.w	800988a <_strtod_l+0xba>
 8009ae0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	2b28      	cmp	r3, #40	; 0x28
 8009ae6:	d12c      	bne.n	8009b42 <_strtod_l+0x372>
 8009ae8:	4998      	ldr	r1, [pc, #608]	; (8009d4c <_strtod_l+0x57c>)
 8009aea:	aa1c      	add	r2, sp, #112	; 0x70
 8009aec:	a819      	add	r0, sp, #100	; 0x64
 8009aee:	f001 fead 	bl	800b84c <__hexnan>
 8009af2:	2805      	cmp	r0, #5
 8009af4:	d125      	bne.n	8009b42 <_strtod_l+0x372>
 8009af6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009af8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8009afc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009b00:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009b04:	e6a5      	b.n	8009852 <_strtod_l+0x82>
 8009b06:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8009b0a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8009b0e:	e7bc      	b.n	8009a8a <_strtod_l+0x2ba>
 8009b10:	2a6e      	cmp	r2, #110	; 0x6e
 8009b12:	e7dc      	b.n	8009ace <_strtod_l+0x2fe>
 8009b14:	498e      	ldr	r1, [pc, #568]	; (8009d50 <_strtod_l+0x580>)
 8009b16:	a819      	add	r0, sp, #100	; 0x64
 8009b18:	f001 fe84 	bl	800b824 <__match>
 8009b1c:	2800      	cmp	r0, #0
 8009b1e:	f43f aeb4 	beq.w	800988a <_strtod_l+0xba>
 8009b22:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009b24:	498b      	ldr	r1, [pc, #556]	; (8009d54 <_strtod_l+0x584>)
 8009b26:	3b01      	subs	r3, #1
 8009b28:	a819      	add	r0, sp, #100	; 0x64
 8009b2a:	9319      	str	r3, [sp, #100]	; 0x64
 8009b2c:	f001 fe7a 	bl	800b824 <__match>
 8009b30:	b910      	cbnz	r0, 8009b38 <_strtod_l+0x368>
 8009b32:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009b34:	3301      	adds	r3, #1
 8009b36:	9319      	str	r3, [sp, #100]	; 0x64
 8009b38:	f04f 0800 	mov.w	r8, #0
 8009b3c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8009d58 <_strtod_l+0x588>
 8009b40:	e687      	b.n	8009852 <_strtod_l+0x82>
 8009b42:	4886      	ldr	r0, [pc, #536]	; (8009d5c <_strtod_l+0x58c>)
 8009b44:	f002 ffb4 	bl	800cab0 <nan>
 8009b48:	4680      	mov	r8, r0
 8009b4a:	4689      	mov	r9, r1
 8009b4c:	e681      	b.n	8009852 <_strtod_l+0x82>
 8009b4e:	9b04      	ldr	r3, [sp, #16]
 8009b50:	f1bb 0f00 	cmp.w	fp, #0
 8009b54:	bf08      	it	eq
 8009b56:	46a3      	moveq	fp, r4
 8009b58:	1aeb      	subs	r3, r5, r3
 8009b5a:	2c10      	cmp	r4, #16
 8009b5c:	9806      	ldr	r0, [sp, #24]
 8009b5e:	4626      	mov	r6, r4
 8009b60:	9307      	str	r3, [sp, #28]
 8009b62:	bfa8      	it	ge
 8009b64:	2610      	movge	r6, #16
 8009b66:	f7f6 fc3d 	bl	80003e4 <__aeabi_ui2d>
 8009b6a:	2c09      	cmp	r4, #9
 8009b6c:	4680      	mov	r8, r0
 8009b6e:	4689      	mov	r9, r1
 8009b70:	dd13      	ble.n	8009b9a <_strtod_l+0x3ca>
 8009b72:	4b7b      	ldr	r3, [pc, #492]	; (8009d60 <_strtod_l+0x590>)
 8009b74:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009b78:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009b7c:	f7f6 fcac 	bl	80004d8 <__aeabi_dmul>
 8009b80:	4680      	mov	r8, r0
 8009b82:	9805      	ldr	r0, [sp, #20]
 8009b84:	4689      	mov	r9, r1
 8009b86:	f7f6 fc2d 	bl	80003e4 <__aeabi_ui2d>
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	460b      	mov	r3, r1
 8009b8e:	4640      	mov	r0, r8
 8009b90:	4649      	mov	r1, r9
 8009b92:	f7f6 faeb 	bl	800016c <__adddf3>
 8009b96:	4680      	mov	r8, r0
 8009b98:	4689      	mov	r9, r1
 8009b9a:	2c0f      	cmp	r4, #15
 8009b9c:	dc36      	bgt.n	8009c0c <_strtod_l+0x43c>
 8009b9e:	9b07      	ldr	r3, [sp, #28]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	f43f ae56 	beq.w	8009852 <_strtod_l+0x82>
 8009ba6:	dd22      	ble.n	8009bee <_strtod_l+0x41e>
 8009ba8:	2b16      	cmp	r3, #22
 8009baa:	dc09      	bgt.n	8009bc0 <_strtod_l+0x3f0>
 8009bac:	496c      	ldr	r1, [pc, #432]	; (8009d60 <_strtod_l+0x590>)
 8009bae:	4642      	mov	r2, r8
 8009bb0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009bb4:	464b      	mov	r3, r9
 8009bb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bba:	f7f6 fc8d 	bl	80004d8 <__aeabi_dmul>
 8009bbe:	e7c3      	b.n	8009b48 <_strtod_l+0x378>
 8009bc0:	9a07      	ldr	r2, [sp, #28]
 8009bc2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	db20      	blt.n	8009c0c <_strtod_l+0x43c>
 8009bca:	4d65      	ldr	r5, [pc, #404]	; (8009d60 <_strtod_l+0x590>)
 8009bcc:	f1c4 040f 	rsb	r4, r4, #15
 8009bd0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009bd4:	4642      	mov	r2, r8
 8009bd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bda:	464b      	mov	r3, r9
 8009bdc:	f7f6 fc7c 	bl	80004d8 <__aeabi_dmul>
 8009be0:	9b07      	ldr	r3, [sp, #28]
 8009be2:	1b1c      	subs	r4, r3, r4
 8009be4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009be8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009bec:	e7e5      	b.n	8009bba <_strtod_l+0x3ea>
 8009bee:	9b07      	ldr	r3, [sp, #28]
 8009bf0:	3316      	adds	r3, #22
 8009bf2:	db0b      	blt.n	8009c0c <_strtod_l+0x43c>
 8009bf4:	9b04      	ldr	r3, [sp, #16]
 8009bf6:	4640      	mov	r0, r8
 8009bf8:	1b5d      	subs	r5, r3, r5
 8009bfa:	4b59      	ldr	r3, [pc, #356]	; (8009d60 <_strtod_l+0x590>)
 8009bfc:	4649      	mov	r1, r9
 8009bfe:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009c02:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009c06:	f7f6 fd91 	bl	800072c <__aeabi_ddiv>
 8009c0a:	e79d      	b.n	8009b48 <_strtod_l+0x378>
 8009c0c:	9b07      	ldr	r3, [sp, #28]
 8009c0e:	1ba6      	subs	r6, r4, r6
 8009c10:	441e      	add	r6, r3
 8009c12:	2e00      	cmp	r6, #0
 8009c14:	dd74      	ble.n	8009d00 <_strtod_l+0x530>
 8009c16:	f016 030f 	ands.w	r3, r6, #15
 8009c1a:	d00a      	beq.n	8009c32 <_strtod_l+0x462>
 8009c1c:	4950      	ldr	r1, [pc, #320]	; (8009d60 <_strtod_l+0x590>)
 8009c1e:	4642      	mov	r2, r8
 8009c20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009c24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c28:	464b      	mov	r3, r9
 8009c2a:	f7f6 fc55 	bl	80004d8 <__aeabi_dmul>
 8009c2e:	4680      	mov	r8, r0
 8009c30:	4689      	mov	r9, r1
 8009c32:	f036 060f 	bics.w	r6, r6, #15
 8009c36:	d052      	beq.n	8009cde <_strtod_l+0x50e>
 8009c38:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8009c3c:	dd27      	ble.n	8009c8e <_strtod_l+0x4be>
 8009c3e:	f04f 0b00 	mov.w	fp, #0
 8009c42:	f8cd b010 	str.w	fp, [sp, #16]
 8009c46:	f8cd b020 	str.w	fp, [sp, #32]
 8009c4a:	f8cd b018 	str.w	fp, [sp, #24]
 8009c4e:	2322      	movs	r3, #34	; 0x22
 8009c50:	f04f 0800 	mov.w	r8, #0
 8009c54:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8009d58 <_strtod_l+0x588>
 8009c58:	f8ca 3000 	str.w	r3, [sl]
 8009c5c:	9b08      	ldr	r3, [sp, #32]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	f43f adf7 	beq.w	8009852 <_strtod_l+0x82>
 8009c64:	4650      	mov	r0, sl
 8009c66:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009c68:	f001 ff06 	bl	800ba78 <_Bfree>
 8009c6c:	4650      	mov	r0, sl
 8009c6e:	9906      	ldr	r1, [sp, #24]
 8009c70:	f001 ff02 	bl	800ba78 <_Bfree>
 8009c74:	4650      	mov	r0, sl
 8009c76:	9904      	ldr	r1, [sp, #16]
 8009c78:	f001 fefe 	bl	800ba78 <_Bfree>
 8009c7c:	4650      	mov	r0, sl
 8009c7e:	9908      	ldr	r1, [sp, #32]
 8009c80:	f001 fefa 	bl	800ba78 <_Bfree>
 8009c84:	4659      	mov	r1, fp
 8009c86:	4650      	mov	r0, sl
 8009c88:	f001 fef6 	bl	800ba78 <_Bfree>
 8009c8c:	e5e1      	b.n	8009852 <_strtod_l+0x82>
 8009c8e:	4b35      	ldr	r3, [pc, #212]	; (8009d64 <_strtod_l+0x594>)
 8009c90:	4640      	mov	r0, r8
 8009c92:	9305      	str	r3, [sp, #20]
 8009c94:	2300      	movs	r3, #0
 8009c96:	4649      	mov	r1, r9
 8009c98:	461f      	mov	r7, r3
 8009c9a:	1136      	asrs	r6, r6, #4
 8009c9c:	2e01      	cmp	r6, #1
 8009c9e:	dc21      	bgt.n	8009ce4 <_strtod_l+0x514>
 8009ca0:	b10b      	cbz	r3, 8009ca6 <_strtod_l+0x4d6>
 8009ca2:	4680      	mov	r8, r0
 8009ca4:	4689      	mov	r9, r1
 8009ca6:	4b2f      	ldr	r3, [pc, #188]	; (8009d64 <_strtod_l+0x594>)
 8009ca8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009cac:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009cb0:	4642      	mov	r2, r8
 8009cb2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009cb6:	464b      	mov	r3, r9
 8009cb8:	f7f6 fc0e 	bl	80004d8 <__aeabi_dmul>
 8009cbc:	4b26      	ldr	r3, [pc, #152]	; (8009d58 <_strtod_l+0x588>)
 8009cbe:	460a      	mov	r2, r1
 8009cc0:	400b      	ands	r3, r1
 8009cc2:	4929      	ldr	r1, [pc, #164]	; (8009d68 <_strtod_l+0x598>)
 8009cc4:	4680      	mov	r8, r0
 8009cc6:	428b      	cmp	r3, r1
 8009cc8:	d8b9      	bhi.n	8009c3e <_strtod_l+0x46e>
 8009cca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009cce:	428b      	cmp	r3, r1
 8009cd0:	bf86      	itte	hi
 8009cd2:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8009cd6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8009d6c <_strtod_l+0x59c>
 8009cda:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009cde:	2300      	movs	r3, #0
 8009ce0:	9305      	str	r3, [sp, #20]
 8009ce2:	e07f      	b.n	8009de4 <_strtod_l+0x614>
 8009ce4:	07f2      	lsls	r2, r6, #31
 8009ce6:	d505      	bpl.n	8009cf4 <_strtod_l+0x524>
 8009ce8:	9b05      	ldr	r3, [sp, #20]
 8009cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cee:	f7f6 fbf3 	bl	80004d8 <__aeabi_dmul>
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	9a05      	ldr	r2, [sp, #20]
 8009cf6:	3701      	adds	r7, #1
 8009cf8:	3208      	adds	r2, #8
 8009cfa:	1076      	asrs	r6, r6, #1
 8009cfc:	9205      	str	r2, [sp, #20]
 8009cfe:	e7cd      	b.n	8009c9c <_strtod_l+0x4cc>
 8009d00:	d0ed      	beq.n	8009cde <_strtod_l+0x50e>
 8009d02:	4276      	negs	r6, r6
 8009d04:	f016 020f 	ands.w	r2, r6, #15
 8009d08:	d00a      	beq.n	8009d20 <_strtod_l+0x550>
 8009d0a:	4b15      	ldr	r3, [pc, #84]	; (8009d60 <_strtod_l+0x590>)
 8009d0c:	4640      	mov	r0, r8
 8009d0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d12:	4649      	mov	r1, r9
 8009d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d18:	f7f6 fd08 	bl	800072c <__aeabi_ddiv>
 8009d1c:	4680      	mov	r8, r0
 8009d1e:	4689      	mov	r9, r1
 8009d20:	1136      	asrs	r6, r6, #4
 8009d22:	d0dc      	beq.n	8009cde <_strtod_l+0x50e>
 8009d24:	2e1f      	cmp	r6, #31
 8009d26:	dd23      	ble.n	8009d70 <_strtod_l+0x5a0>
 8009d28:	f04f 0b00 	mov.w	fp, #0
 8009d2c:	f8cd b010 	str.w	fp, [sp, #16]
 8009d30:	f8cd b020 	str.w	fp, [sp, #32]
 8009d34:	f8cd b018 	str.w	fp, [sp, #24]
 8009d38:	2322      	movs	r3, #34	; 0x22
 8009d3a:	f04f 0800 	mov.w	r8, #0
 8009d3e:	f04f 0900 	mov.w	r9, #0
 8009d42:	f8ca 3000 	str.w	r3, [sl]
 8009d46:	e789      	b.n	8009c5c <_strtod_l+0x48c>
 8009d48:	0800d421 	.word	0x0800d421
 8009d4c:	0800d464 	.word	0x0800d464
 8009d50:	0800d419 	.word	0x0800d419
 8009d54:	0800d654 	.word	0x0800d654
 8009d58:	7ff00000 	.word	0x7ff00000
 8009d5c:	0800d54f 	.word	0x0800d54f
 8009d60:	0800d7c8 	.word	0x0800d7c8
 8009d64:	0800d7a0 	.word	0x0800d7a0
 8009d68:	7ca00000 	.word	0x7ca00000
 8009d6c:	7fefffff 	.word	0x7fefffff
 8009d70:	f016 0310 	ands.w	r3, r6, #16
 8009d74:	bf18      	it	ne
 8009d76:	236a      	movne	r3, #106	; 0x6a
 8009d78:	4640      	mov	r0, r8
 8009d7a:	9305      	str	r3, [sp, #20]
 8009d7c:	4649      	mov	r1, r9
 8009d7e:	2300      	movs	r3, #0
 8009d80:	4fb0      	ldr	r7, [pc, #704]	; (800a044 <_strtod_l+0x874>)
 8009d82:	07f2      	lsls	r2, r6, #31
 8009d84:	d504      	bpl.n	8009d90 <_strtod_l+0x5c0>
 8009d86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d8a:	f7f6 fba5 	bl	80004d8 <__aeabi_dmul>
 8009d8e:	2301      	movs	r3, #1
 8009d90:	1076      	asrs	r6, r6, #1
 8009d92:	f107 0708 	add.w	r7, r7, #8
 8009d96:	d1f4      	bne.n	8009d82 <_strtod_l+0x5b2>
 8009d98:	b10b      	cbz	r3, 8009d9e <_strtod_l+0x5ce>
 8009d9a:	4680      	mov	r8, r0
 8009d9c:	4689      	mov	r9, r1
 8009d9e:	9b05      	ldr	r3, [sp, #20]
 8009da0:	b1c3      	cbz	r3, 8009dd4 <_strtod_l+0x604>
 8009da2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009da6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	4649      	mov	r1, r9
 8009dae:	dd11      	ble.n	8009dd4 <_strtod_l+0x604>
 8009db0:	2b1f      	cmp	r3, #31
 8009db2:	f340 8127 	ble.w	800a004 <_strtod_l+0x834>
 8009db6:	2b34      	cmp	r3, #52	; 0x34
 8009db8:	bfd8      	it	le
 8009dba:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8009dbe:	f04f 0800 	mov.w	r8, #0
 8009dc2:	bfcf      	iteee	gt
 8009dc4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009dc8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009dcc:	fa03 f202 	lslle.w	r2, r3, r2
 8009dd0:	ea02 0901 	andle.w	r9, r2, r1
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	4640      	mov	r0, r8
 8009dda:	4649      	mov	r1, r9
 8009ddc:	f7f6 fde4 	bl	80009a8 <__aeabi_dcmpeq>
 8009de0:	2800      	cmp	r0, #0
 8009de2:	d1a1      	bne.n	8009d28 <_strtod_l+0x558>
 8009de4:	9b06      	ldr	r3, [sp, #24]
 8009de6:	465a      	mov	r2, fp
 8009de8:	9300      	str	r3, [sp, #0]
 8009dea:	4650      	mov	r0, sl
 8009dec:	4623      	mov	r3, r4
 8009dee:	9908      	ldr	r1, [sp, #32]
 8009df0:	f001 feaa 	bl	800bb48 <__s2b>
 8009df4:	9008      	str	r0, [sp, #32]
 8009df6:	2800      	cmp	r0, #0
 8009df8:	f43f af21 	beq.w	8009c3e <_strtod_l+0x46e>
 8009dfc:	9b04      	ldr	r3, [sp, #16]
 8009dfe:	f04f 0b00 	mov.w	fp, #0
 8009e02:	1b5d      	subs	r5, r3, r5
 8009e04:	9b07      	ldr	r3, [sp, #28]
 8009e06:	f8cd b010 	str.w	fp, [sp, #16]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	bfb4      	ite	lt
 8009e0e:	462b      	movlt	r3, r5
 8009e10:	2300      	movge	r3, #0
 8009e12:	930e      	str	r3, [sp, #56]	; 0x38
 8009e14:	9b07      	ldr	r3, [sp, #28]
 8009e16:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009e1a:	9314      	str	r3, [sp, #80]	; 0x50
 8009e1c:	9b08      	ldr	r3, [sp, #32]
 8009e1e:	4650      	mov	r0, sl
 8009e20:	6859      	ldr	r1, [r3, #4]
 8009e22:	f001 fde9 	bl	800b9f8 <_Balloc>
 8009e26:	9006      	str	r0, [sp, #24]
 8009e28:	2800      	cmp	r0, #0
 8009e2a:	f43f af10 	beq.w	8009c4e <_strtod_l+0x47e>
 8009e2e:	9b08      	ldr	r3, [sp, #32]
 8009e30:	300c      	adds	r0, #12
 8009e32:	691a      	ldr	r2, [r3, #16]
 8009e34:	f103 010c 	add.w	r1, r3, #12
 8009e38:	3202      	adds	r2, #2
 8009e3a:	0092      	lsls	r2, r2, #2
 8009e3c:	f001 fdce 	bl	800b9dc <memcpy>
 8009e40:	ab1c      	add	r3, sp, #112	; 0x70
 8009e42:	9301      	str	r3, [sp, #4]
 8009e44:	ab1b      	add	r3, sp, #108	; 0x6c
 8009e46:	9300      	str	r3, [sp, #0]
 8009e48:	4642      	mov	r2, r8
 8009e4a:	464b      	mov	r3, r9
 8009e4c:	4650      	mov	r0, sl
 8009e4e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8009e52:	f002 f9bb 	bl	800c1cc <__d2b>
 8009e56:	901a      	str	r0, [sp, #104]	; 0x68
 8009e58:	2800      	cmp	r0, #0
 8009e5a:	f43f aef8 	beq.w	8009c4e <_strtod_l+0x47e>
 8009e5e:	2101      	movs	r1, #1
 8009e60:	4650      	mov	r0, sl
 8009e62:	f001 ff09 	bl	800bc78 <__i2b>
 8009e66:	4603      	mov	r3, r0
 8009e68:	9004      	str	r0, [sp, #16]
 8009e6a:	2800      	cmp	r0, #0
 8009e6c:	f43f aeef 	beq.w	8009c4e <_strtod_l+0x47e>
 8009e70:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009e72:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009e74:	2d00      	cmp	r5, #0
 8009e76:	bfab      	itete	ge
 8009e78:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009e7a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8009e7c:	18ee      	addge	r6, r5, r3
 8009e7e:	1b5c      	sublt	r4, r3, r5
 8009e80:	9b05      	ldr	r3, [sp, #20]
 8009e82:	bfa8      	it	ge
 8009e84:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8009e86:	eba5 0503 	sub.w	r5, r5, r3
 8009e8a:	4415      	add	r5, r2
 8009e8c:	4b6e      	ldr	r3, [pc, #440]	; (800a048 <_strtod_l+0x878>)
 8009e8e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8009e92:	bfb8      	it	lt
 8009e94:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8009e96:	429d      	cmp	r5, r3
 8009e98:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009e9c:	f280 80c4 	bge.w	800a028 <_strtod_l+0x858>
 8009ea0:	1b5b      	subs	r3, r3, r5
 8009ea2:	2b1f      	cmp	r3, #31
 8009ea4:	f04f 0701 	mov.w	r7, #1
 8009ea8:	eba2 0203 	sub.w	r2, r2, r3
 8009eac:	f300 80b1 	bgt.w	800a012 <_strtod_l+0x842>
 8009eb0:	2500      	movs	r5, #0
 8009eb2:	fa07 f303 	lsl.w	r3, r7, r3
 8009eb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8009eb8:	18b7      	adds	r7, r6, r2
 8009eba:	9b05      	ldr	r3, [sp, #20]
 8009ebc:	42be      	cmp	r6, r7
 8009ebe:	4414      	add	r4, r2
 8009ec0:	441c      	add	r4, r3
 8009ec2:	4633      	mov	r3, r6
 8009ec4:	bfa8      	it	ge
 8009ec6:	463b      	movge	r3, r7
 8009ec8:	42a3      	cmp	r3, r4
 8009eca:	bfa8      	it	ge
 8009ecc:	4623      	movge	r3, r4
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	bfc2      	ittt	gt
 8009ed2:	1aff      	subgt	r7, r7, r3
 8009ed4:	1ae4      	subgt	r4, r4, r3
 8009ed6:	1af6      	subgt	r6, r6, r3
 8009ed8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	dd17      	ble.n	8009f0e <_strtod_l+0x73e>
 8009ede:	461a      	mov	r2, r3
 8009ee0:	4650      	mov	r0, sl
 8009ee2:	9904      	ldr	r1, [sp, #16]
 8009ee4:	f001 ff86 	bl	800bdf4 <__pow5mult>
 8009ee8:	9004      	str	r0, [sp, #16]
 8009eea:	2800      	cmp	r0, #0
 8009eec:	f43f aeaf 	beq.w	8009c4e <_strtod_l+0x47e>
 8009ef0:	4601      	mov	r1, r0
 8009ef2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009ef4:	4650      	mov	r0, sl
 8009ef6:	f001 fed5 	bl	800bca4 <__multiply>
 8009efa:	9009      	str	r0, [sp, #36]	; 0x24
 8009efc:	2800      	cmp	r0, #0
 8009efe:	f43f aea6 	beq.w	8009c4e <_strtod_l+0x47e>
 8009f02:	4650      	mov	r0, sl
 8009f04:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009f06:	f001 fdb7 	bl	800ba78 <_Bfree>
 8009f0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f0c:	931a      	str	r3, [sp, #104]	; 0x68
 8009f0e:	2f00      	cmp	r7, #0
 8009f10:	f300 808e 	bgt.w	800a030 <_strtod_l+0x860>
 8009f14:	9b07      	ldr	r3, [sp, #28]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	dd08      	ble.n	8009f2c <_strtod_l+0x75c>
 8009f1a:	4650      	mov	r0, sl
 8009f1c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009f1e:	9906      	ldr	r1, [sp, #24]
 8009f20:	f001 ff68 	bl	800bdf4 <__pow5mult>
 8009f24:	9006      	str	r0, [sp, #24]
 8009f26:	2800      	cmp	r0, #0
 8009f28:	f43f ae91 	beq.w	8009c4e <_strtod_l+0x47e>
 8009f2c:	2c00      	cmp	r4, #0
 8009f2e:	dd08      	ble.n	8009f42 <_strtod_l+0x772>
 8009f30:	4622      	mov	r2, r4
 8009f32:	4650      	mov	r0, sl
 8009f34:	9906      	ldr	r1, [sp, #24]
 8009f36:	f001 ffb7 	bl	800bea8 <__lshift>
 8009f3a:	9006      	str	r0, [sp, #24]
 8009f3c:	2800      	cmp	r0, #0
 8009f3e:	f43f ae86 	beq.w	8009c4e <_strtod_l+0x47e>
 8009f42:	2e00      	cmp	r6, #0
 8009f44:	dd08      	ble.n	8009f58 <_strtod_l+0x788>
 8009f46:	4632      	mov	r2, r6
 8009f48:	4650      	mov	r0, sl
 8009f4a:	9904      	ldr	r1, [sp, #16]
 8009f4c:	f001 ffac 	bl	800bea8 <__lshift>
 8009f50:	9004      	str	r0, [sp, #16]
 8009f52:	2800      	cmp	r0, #0
 8009f54:	f43f ae7b 	beq.w	8009c4e <_strtod_l+0x47e>
 8009f58:	4650      	mov	r0, sl
 8009f5a:	9a06      	ldr	r2, [sp, #24]
 8009f5c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009f5e:	f002 f82f 	bl	800bfc0 <__mdiff>
 8009f62:	4683      	mov	fp, r0
 8009f64:	2800      	cmp	r0, #0
 8009f66:	f43f ae72 	beq.w	8009c4e <_strtod_l+0x47e>
 8009f6a:	2400      	movs	r4, #0
 8009f6c:	68c3      	ldr	r3, [r0, #12]
 8009f6e:	9904      	ldr	r1, [sp, #16]
 8009f70:	60c4      	str	r4, [r0, #12]
 8009f72:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f74:	f002 f808 	bl	800bf88 <__mcmp>
 8009f78:	42a0      	cmp	r0, r4
 8009f7a:	da6b      	bge.n	800a054 <_strtod_l+0x884>
 8009f7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f7e:	ea53 0308 	orrs.w	r3, r3, r8
 8009f82:	f040 8091 	bne.w	800a0a8 <_strtod_l+0x8d8>
 8009f86:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	f040 808c 	bne.w	800a0a8 <_strtod_l+0x8d8>
 8009f90:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009f94:	0d1b      	lsrs	r3, r3, #20
 8009f96:	051b      	lsls	r3, r3, #20
 8009f98:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009f9c:	f240 8084 	bls.w	800a0a8 <_strtod_l+0x8d8>
 8009fa0:	f8db 3014 	ldr.w	r3, [fp, #20]
 8009fa4:	b91b      	cbnz	r3, 8009fae <_strtod_l+0x7de>
 8009fa6:	f8db 3010 	ldr.w	r3, [fp, #16]
 8009faa:	2b01      	cmp	r3, #1
 8009fac:	dd7c      	ble.n	800a0a8 <_strtod_l+0x8d8>
 8009fae:	4659      	mov	r1, fp
 8009fb0:	2201      	movs	r2, #1
 8009fb2:	4650      	mov	r0, sl
 8009fb4:	f001 ff78 	bl	800bea8 <__lshift>
 8009fb8:	9904      	ldr	r1, [sp, #16]
 8009fba:	4683      	mov	fp, r0
 8009fbc:	f001 ffe4 	bl	800bf88 <__mcmp>
 8009fc0:	2800      	cmp	r0, #0
 8009fc2:	dd71      	ble.n	800a0a8 <_strtod_l+0x8d8>
 8009fc4:	9905      	ldr	r1, [sp, #20]
 8009fc6:	464b      	mov	r3, r9
 8009fc8:	4a20      	ldr	r2, [pc, #128]	; (800a04c <_strtod_l+0x87c>)
 8009fca:	2900      	cmp	r1, #0
 8009fcc:	f000 808c 	beq.w	800a0e8 <_strtod_l+0x918>
 8009fd0:	ea02 0109 	and.w	r1, r2, r9
 8009fd4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009fd8:	f300 8086 	bgt.w	800a0e8 <_strtod_l+0x918>
 8009fdc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009fe0:	f77f aeaa 	ble.w	8009d38 <_strtod_l+0x568>
 8009fe4:	4640      	mov	r0, r8
 8009fe6:	4649      	mov	r1, r9
 8009fe8:	4b19      	ldr	r3, [pc, #100]	; (800a050 <_strtod_l+0x880>)
 8009fea:	2200      	movs	r2, #0
 8009fec:	f7f6 fa74 	bl	80004d8 <__aeabi_dmul>
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	4303      	orrs	r3, r0
 8009ff4:	bf08      	it	eq
 8009ff6:	2322      	moveq	r3, #34	; 0x22
 8009ff8:	4680      	mov	r8, r0
 8009ffa:	4689      	mov	r9, r1
 8009ffc:	bf08      	it	eq
 8009ffe:	f8ca 3000 	streq.w	r3, [sl]
 800a002:	e62f      	b.n	8009c64 <_strtod_l+0x494>
 800a004:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a008:	fa02 f303 	lsl.w	r3, r2, r3
 800a00c:	ea03 0808 	and.w	r8, r3, r8
 800a010:	e6e0      	b.n	8009dd4 <_strtod_l+0x604>
 800a012:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800a016:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800a01a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800a01e:	35e2      	adds	r5, #226	; 0xe2
 800a020:	fa07 f505 	lsl.w	r5, r7, r5
 800a024:	970f      	str	r7, [sp, #60]	; 0x3c
 800a026:	e747      	b.n	8009eb8 <_strtod_l+0x6e8>
 800a028:	2301      	movs	r3, #1
 800a02a:	2500      	movs	r5, #0
 800a02c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a02e:	e743      	b.n	8009eb8 <_strtod_l+0x6e8>
 800a030:	463a      	mov	r2, r7
 800a032:	4650      	mov	r0, sl
 800a034:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a036:	f001 ff37 	bl	800bea8 <__lshift>
 800a03a:	901a      	str	r0, [sp, #104]	; 0x68
 800a03c:	2800      	cmp	r0, #0
 800a03e:	f47f af69 	bne.w	8009f14 <_strtod_l+0x744>
 800a042:	e604      	b.n	8009c4e <_strtod_l+0x47e>
 800a044:	0800d478 	.word	0x0800d478
 800a048:	fffffc02 	.word	0xfffffc02
 800a04c:	7ff00000 	.word	0x7ff00000
 800a050:	39500000 	.word	0x39500000
 800a054:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a058:	d165      	bne.n	800a126 <_strtod_l+0x956>
 800a05a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a05c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a060:	b35a      	cbz	r2, 800a0ba <_strtod_l+0x8ea>
 800a062:	4a99      	ldr	r2, [pc, #612]	; (800a2c8 <_strtod_l+0xaf8>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d12b      	bne.n	800a0c0 <_strtod_l+0x8f0>
 800a068:	9b05      	ldr	r3, [sp, #20]
 800a06a:	4641      	mov	r1, r8
 800a06c:	b303      	cbz	r3, 800a0b0 <_strtod_l+0x8e0>
 800a06e:	464a      	mov	r2, r9
 800a070:	4b96      	ldr	r3, [pc, #600]	; (800a2cc <_strtod_l+0xafc>)
 800a072:	4013      	ands	r3, r2
 800a074:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a078:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a07c:	d81b      	bhi.n	800a0b6 <_strtod_l+0x8e6>
 800a07e:	0d1b      	lsrs	r3, r3, #20
 800a080:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a084:	fa02 f303 	lsl.w	r3, r2, r3
 800a088:	4299      	cmp	r1, r3
 800a08a:	d119      	bne.n	800a0c0 <_strtod_l+0x8f0>
 800a08c:	4b90      	ldr	r3, [pc, #576]	; (800a2d0 <_strtod_l+0xb00>)
 800a08e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a090:	429a      	cmp	r2, r3
 800a092:	d102      	bne.n	800a09a <_strtod_l+0x8ca>
 800a094:	3101      	adds	r1, #1
 800a096:	f43f adda 	beq.w	8009c4e <_strtod_l+0x47e>
 800a09a:	f04f 0800 	mov.w	r8, #0
 800a09e:	4b8b      	ldr	r3, [pc, #556]	; (800a2cc <_strtod_l+0xafc>)
 800a0a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0a2:	401a      	ands	r2, r3
 800a0a4:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800a0a8:	9b05      	ldr	r3, [sp, #20]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d19a      	bne.n	8009fe4 <_strtod_l+0x814>
 800a0ae:	e5d9      	b.n	8009c64 <_strtod_l+0x494>
 800a0b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a0b4:	e7e8      	b.n	800a088 <_strtod_l+0x8b8>
 800a0b6:	4613      	mov	r3, r2
 800a0b8:	e7e6      	b.n	800a088 <_strtod_l+0x8b8>
 800a0ba:	ea53 0308 	orrs.w	r3, r3, r8
 800a0be:	d081      	beq.n	8009fc4 <_strtod_l+0x7f4>
 800a0c0:	b1e5      	cbz	r5, 800a0fc <_strtod_l+0x92c>
 800a0c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0c4:	421d      	tst	r5, r3
 800a0c6:	d0ef      	beq.n	800a0a8 <_strtod_l+0x8d8>
 800a0c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0ca:	4640      	mov	r0, r8
 800a0cc:	4649      	mov	r1, r9
 800a0ce:	9a05      	ldr	r2, [sp, #20]
 800a0d0:	b1c3      	cbz	r3, 800a104 <_strtod_l+0x934>
 800a0d2:	f7ff fb59 	bl	8009788 <sulp>
 800a0d6:	4602      	mov	r2, r0
 800a0d8:	460b      	mov	r3, r1
 800a0da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a0de:	f7f6 f845 	bl	800016c <__adddf3>
 800a0e2:	4680      	mov	r8, r0
 800a0e4:	4689      	mov	r9, r1
 800a0e6:	e7df      	b.n	800a0a8 <_strtod_l+0x8d8>
 800a0e8:	4013      	ands	r3, r2
 800a0ea:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a0ee:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a0f2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800a0f6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a0fa:	e7d5      	b.n	800a0a8 <_strtod_l+0x8d8>
 800a0fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0fe:	ea13 0f08 	tst.w	r3, r8
 800a102:	e7e0      	b.n	800a0c6 <_strtod_l+0x8f6>
 800a104:	f7ff fb40 	bl	8009788 <sulp>
 800a108:	4602      	mov	r2, r0
 800a10a:	460b      	mov	r3, r1
 800a10c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a110:	f7f6 f82a 	bl	8000168 <__aeabi_dsub>
 800a114:	2200      	movs	r2, #0
 800a116:	2300      	movs	r3, #0
 800a118:	4680      	mov	r8, r0
 800a11a:	4689      	mov	r9, r1
 800a11c:	f7f6 fc44 	bl	80009a8 <__aeabi_dcmpeq>
 800a120:	2800      	cmp	r0, #0
 800a122:	d0c1      	beq.n	800a0a8 <_strtod_l+0x8d8>
 800a124:	e608      	b.n	8009d38 <_strtod_l+0x568>
 800a126:	4658      	mov	r0, fp
 800a128:	9904      	ldr	r1, [sp, #16]
 800a12a:	f002 f8ab 	bl	800c284 <__ratio>
 800a12e:	2200      	movs	r2, #0
 800a130:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a134:	4606      	mov	r6, r0
 800a136:	460f      	mov	r7, r1
 800a138:	f7f6 fc4a 	bl	80009d0 <__aeabi_dcmple>
 800a13c:	2800      	cmp	r0, #0
 800a13e:	d070      	beq.n	800a222 <_strtod_l+0xa52>
 800a140:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a142:	2b00      	cmp	r3, #0
 800a144:	d042      	beq.n	800a1cc <_strtod_l+0x9fc>
 800a146:	2600      	movs	r6, #0
 800a148:	4f62      	ldr	r7, [pc, #392]	; (800a2d4 <_strtod_l+0xb04>)
 800a14a:	4d62      	ldr	r5, [pc, #392]	; (800a2d4 <_strtod_l+0xb04>)
 800a14c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a14e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a152:	0d1b      	lsrs	r3, r3, #20
 800a154:	051b      	lsls	r3, r3, #20
 800a156:	930f      	str	r3, [sp, #60]	; 0x3c
 800a158:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a15a:	4b5f      	ldr	r3, [pc, #380]	; (800a2d8 <_strtod_l+0xb08>)
 800a15c:	429a      	cmp	r2, r3
 800a15e:	f040 80c3 	bne.w	800a2e8 <_strtod_l+0xb18>
 800a162:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a164:	4640      	mov	r0, r8
 800a166:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800a16a:	4649      	mov	r1, r9
 800a16c:	f001 ffb4 	bl	800c0d8 <__ulp>
 800a170:	4602      	mov	r2, r0
 800a172:	460b      	mov	r3, r1
 800a174:	4630      	mov	r0, r6
 800a176:	4639      	mov	r1, r7
 800a178:	f7f6 f9ae 	bl	80004d8 <__aeabi_dmul>
 800a17c:	4642      	mov	r2, r8
 800a17e:	464b      	mov	r3, r9
 800a180:	f7f5 fff4 	bl	800016c <__adddf3>
 800a184:	460b      	mov	r3, r1
 800a186:	4951      	ldr	r1, [pc, #324]	; (800a2cc <_strtod_l+0xafc>)
 800a188:	4a54      	ldr	r2, [pc, #336]	; (800a2dc <_strtod_l+0xb0c>)
 800a18a:	4019      	ands	r1, r3
 800a18c:	4291      	cmp	r1, r2
 800a18e:	4680      	mov	r8, r0
 800a190:	d95d      	bls.n	800a24e <_strtod_l+0xa7e>
 800a192:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a194:	4b4e      	ldr	r3, [pc, #312]	; (800a2d0 <_strtod_l+0xb00>)
 800a196:	429a      	cmp	r2, r3
 800a198:	d103      	bne.n	800a1a2 <_strtod_l+0x9d2>
 800a19a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a19c:	3301      	adds	r3, #1
 800a19e:	f43f ad56 	beq.w	8009c4e <_strtod_l+0x47e>
 800a1a2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800a1a6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800a2d0 <_strtod_l+0xb00>
 800a1aa:	4650      	mov	r0, sl
 800a1ac:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a1ae:	f001 fc63 	bl	800ba78 <_Bfree>
 800a1b2:	4650      	mov	r0, sl
 800a1b4:	9906      	ldr	r1, [sp, #24]
 800a1b6:	f001 fc5f 	bl	800ba78 <_Bfree>
 800a1ba:	4650      	mov	r0, sl
 800a1bc:	9904      	ldr	r1, [sp, #16]
 800a1be:	f001 fc5b 	bl	800ba78 <_Bfree>
 800a1c2:	4659      	mov	r1, fp
 800a1c4:	4650      	mov	r0, sl
 800a1c6:	f001 fc57 	bl	800ba78 <_Bfree>
 800a1ca:	e627      	b.n	8009e1c <_strtod_l+0x64c>
 800a1cc:	f1b8 0f00 	cmp.w	r8, #0
 800a1d0:	d119      	bne.n	800a206 <_strtod_l+0xa36>
 800a1d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a1d8:	b9e3      	cbnz	r3, 800a214 <_strtod_l+0xa44>
 800a1da:	2200      	movs	r2, #0
 800a1dc:	4630      	mov	r0, r6
 800a1de:	4639      	mov	r1, r7
 800a1e0:	4b3c      	ldr	r3, [pc, #240]	; (800a2d4 <_strtod_l+0xb04>)
 800a1e2:	f7f6 fbeb 	bl	80009bc <__aeabi_dcmplt>
 800a1e6:	b9c8      	cbnz	r0, 800a21c <_strtod_l+0xa4c>
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	4630      	mov	r0, r6
 800a1ec:	4639      	mov	r1, r7
 800a1ee:	4b3c      	ldr	r3, [pc, #240]	; (800a2e0 <_strtod_l+0xb10>)
 800a1f0:	f7f6 f972 	bl	80004d8 <__aeabi_dmul>
 800a1f4:	4604      	mov	r4, r0
 800a1f6:	460d      	mov	r5, r1
 800a1f8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a1fc:	9416      	str	r4, [sp, #88]	; 0x58
 800a1fe:	9317      	str	r3, [sp, #92]	; 0x5c
 800a200:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800a204:	e7a2      	b.n	800a14c <_strtod_l+0x97c>
 800a206:	f1b8 0f01 	cmp.w	r8, #1
 800a20a:	d103      	bne.n	800a214 <_strtod_l+0xa44>
 800a20c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a20e:	2b00      	cmp	r3, #0
 800a210:	f43f ad92 	beq.w	8009d38 <_strtod_l+0x568>
 800a214:	2600      	movs	r6, #0
 800a216:	2400      	movs	r4, #0
 800a218:	4f32      	ldr	r7, [pc, #200]	; (800a2e4 <_strtod_l+0xb14>)
 800a21a:	e796      	b.n	800a14a <_strtod_l+0x97a>
 800a21c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a21e:	4d30      	ldr	r5, [pc, #192]	; (800a2e0 <_strtod_l+0xb10>)
 800a220:	e7ea      	b.n	800a1f8 <_strtod_l+0xa28>
 800a222:	4b2f      	ldr	r3, [pc, #188]	; (800a2e0 <_strtod_l+0xb10>)
 800a224:	2200      	movs	r2, #0
 800a226:	4630      	mov	r0, r6
 800a228:	4639      	mov	r1, r7
 800a22a:	f7f6 f955 	bl	80004d8 <__aeabi_dmul>
 800a22e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a230:	4604      	mov	r4, r0
 800a232:	460d      	mov	r5, r1
 800a234:	b933      	cbnz	r3, 800a244 <_strtod_l+0xa74>
 800a236:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a23a:	9010      	str	r0, [sp, #64]	; 0x40
 800a23c:	9311      	str	r3, [sp, #68]	; 0x44
 800a23e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a242:	e783      	b.n	800a14c <_strtod_l+0x97c>
 800a244:	4602      	mov	r2, r0
 800a246:	460b      	mov	r3, r1
 800a248:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a24c:	e7f7      	b.n	800a23e <_strtod_l+0xa6e>
 800a24e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a252:	9b05      	ldr	r3, [sp, #20]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d1a8      	bne.n	800a1aa <_strtod_l+0x9da>
 800a258:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a25c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a25e:	0d1b      	lsrs	r3, r3, #20
 800a260:	051b      	lsls	r3, r3, #20
 800a262:	429a      	cmp	r2, r3
 800a264:	d1a1      	bne.n	800a1aa <_strtod_l+0x9da>
 800a266:	4620      	mov	r0, r4
 800a268:	4629      	mov	r1, r5
 800a26a:	f7f6 fc7d 	bl	8000b68 <__aeabi_d2lz>
 800a26e:	f7f6 f905 	bl	800047c <__aeabi_l2d>
 800a272:	4602      	mov	r2, r0
 800a274:	460b      	mov	r3, r1
 800a276:	4620      	mov	r0, r4
 800a278:	4629      	mov	r1, r5
 800a27a:	f7f5 ff75 	bl	8000168 <__aeabi_dsub>
 800a27e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a280:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a284:	ea43 0308 	orr.w	r3, r3, r8
 800a288:	4313      	orrs	r3, r2
 800a28a:	4604      	mov	r4, r0
 800a28c:	460d      	mov	r5, r1
 800a28e:	d066      	beq.n	800a35e <_strtod_l+0xb8e>
 800a290:	a309      	add	r3, pc, #36	; (adr r3, 800a2b8 <_strtod_l+0xae8>)
 800a292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a296:	f7f6 fb91 	bl	80009bc <__aeabi_dcmplt>
 800a29a:	2800      	cmp	r0, #0
 800a29c:	f47f ace2 	bne.w	8009c64 <_strtod_l+0x494>
 800a2a0:	a307      	add	r3, pc, #28	; (adr r3, 800a2c0 <_strtod_l+0xaf0>)
 800a2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a6:	4620      	mov	r0, r4
 800a2a8:	4629      	mov	r1, r5
 800a2aa:	f7f6 fba5 	bl	80009f8 <__aeabi_dcmpgt>
 800a2ae:	2800      	cmp	r0, #0
 800a2b0:	f43f af7b 	beq.w	800a1aa <_strtod_l+0x9da>
 800a2b4:	e4d6      	b.n	8009c64 <_strtod_l+0x494>
 800a2b6:	bf00      	nop
 800a2b8:	94a03595 	.word	0x94a03595
 800a2bc:	3fdfffff 	.word	0x3fdfffff
 800a2c0:	35afe535 	.word	0x35afe535
 800a2c4:	3fe00000 	.word	0x3fe00000
 800a2c8:	000fffff 	.word	0x000fffff
 800a2cc:	7ff00000 	.word	0x7ff00000
 800a2d0:	7fefffff 	.word	0x7fefffff
 800a2d4:	3ff00000 	.word	0x3ff00000
 800a2d8:	7fe00000 	.word	0x7fe00000
 800a2dc:	7c9fffff 	.word	0x7c9fffff
 800a2e0:	3fe00000 	.word	0x3fe00000
 800a2e4:	bff00000 	.word	0xbff00000
 800a2e8:	9b05      	ldr	r3, [sp, #20]
 800a2ea:	b313      	cbz	r3, 800a332 <_strtod_l+0xb62>
 800a2ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2ee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a2f2:	d81e      	bhi.n	800a332 <_strtod_l+0xb62>
 800a2f4:	a326      	add	r3, pc, #152	; (adr r3, 800a390 <_strtod_l+0xbc0>)
 800a2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2fa:	4620      	mov	r0, r4
 800a2fc:	4629      	mov	r1, r5
 800a2fe:	f7f6 fb67 	bl	80009d0 <__aeabi_dcmple>
 800a302:	b190      	cbz	r0, 800a32a <_strtod_l+0xb5a>
 800a304:	4629      	mov	r1, r5
 800a306:	4620      	mov	r0, r4
 800a308:	f7f6 fbbe 	bl	8000a88 <__aeabi_d2uiz>
 800a30c:	2801      	cmp	r0, #1
 800a30e:	bf38      	it	cc
 800a310:	2001      	movcc	r0, #1
 800a312:	f7f6 f867 	bl	80003e4 <__aeabi_ui2d>
 800a316:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a318:	4604      	mov	r4, r0
 800a31a:	460d      	mov	r5, r1
 800a31c:	b9d3      	cbnz	r3, 800a354 <_strtod_l+0xb84>
 800a31e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a322:	9012      	str	r0, [sp, #72]	; 0x48
 800a324:	9313      	str	r3, [sp, #76]	; 0x4c
 800a326:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800a32a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a32c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800a330:	1a9f      	subs	r7, r3, r2
 800a332:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a336:	f001 fecf 	bl	800c0d8 <__ulp>
 800a33a:	4602      	mov	r2, r0
 800a33c:	460b      	mov	r3, r1
 800a33e:	4630      	mov	r0, r6
 800a340:	4639      	mov	r1, r7
 800a342:	f7f6 f8c9 	bl	80004d8 <__aeabi_dmul>
 800a346:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a34a:	f7f5 ff0f 	bl	800016c <__adddf3>
 800a34e:	4680      	mov	r8, r0
 800a350:	4689      	mov	r9, r1
 800a352:	e77e      	b.n	800a252 <_strtod_l+0xa82>
 800a354:	4602      	mov	r2, r0
 800a356:	460b      	mov	r3, r1
 800a358:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800a35c:	e7e3      	b.n	800a326 <_strtod_l+0xb56>
 800a35e:	a30e      	add	r3, pc, #56	; (adr r3, 800a398 <_strtod_l+0xbc8>)
 800a360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a364:	f7f6 fb2a 	bl	80009bc <__aeabi_dcmplt>
 800a368:	e7a1      	b.n	800a2ae <_strtod_l+0xade>
 800a36a:	2300      	movs	r3, #0
 800a36c:	930a      	str	r3, [sp, #40]	; 0x28
 800a36e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a370:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a372:	6013      	str	r3, [r2, #0]
 800a374:	f7ff ba71 	b.w	800985a <_strtod_l+0x8a>
 800a378:	2a65      	cmp	r2, #101	; 0x65
 800a37a:	f43f ab63 	beq.w	8009a44 <_strtod_l+0x274>
 800a37e:	2a45      	cmp	r2, #69	; 0x45
 800a380:	f43f ab60 	beq.w	8009a44 <_strtod_l+0x274>
 800a384:	2301      	movs	r3, #1
 800a386:	f7ff bb95 	b.w	8009ab4 <_strtod_l+0x2e4>
 800a38a:	bf00      	nop
 800a38c:	f3af 8000 	nop.w
 800a390:	ffc00000 	.word	0xffc00000
 800a394:	41dfffff 	.word	0x41dfffff
 800a398:	94a03595 	.word	0x94a03595
 800a39c:	3fcfffff 	.word	0x3fcfffff

0800a3a0 <_strtod_r>:
 800a3a0:	4b01      	ldr	r3, [pc, #4]	; (800a3a8 <_strtod_r+0x8>)
 800a3a2:	f7ff ba15 	b.w	80097d0 <_strtod_l>
 800a3a6:	bf00      	nop
 800a3a8:	200001e4 	.word	0x200001e4

0800a3ac <strtok>:
 800a3ac:	4b16      	ldr	r3, [pc, #88]	; (800a408 <strtok+0x5c>)
 800a3ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3b2:	681f      	ldr	r7, [r3, #0]
 800a3b4:	4605      	mov	r5, r0
 800a3b6:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800a3b8:	460e      	mov	r6, r1
 800a3ba:	b9ec      	cbnz	r4, 800a3f8 <strtok+0x4c>
 800a3bc:	2050      	movs	r0, #80	; 0x50
 800a3be:	f001 fae5 	bl	800b98c <malloc>
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	65b8      	str	r0, [r7, #88]	; 0x58
 800a3c6:	b920      	cbnz	r0, 800a3d2 <strtok+0x26>
 800a3c8:	2157      	movs	r1, #87	; 0x57
 800a3ca:	4b10      	ldr	r3, [pc, #64]	; (800a40c <strtok+0x60>)
 800a3cc:	4810      	ldr	r0, [pc, #64]	; (800a410 <strtok+0x64>)
 800a3ce:	f000 f8c7 	bl	800a560 <__assert_func>
 800a3d2:	e9c0 4400 	strd	r4, r4, [r0]
 800a3d6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a3da:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a3de:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a3e2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a3e6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a3ea:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a3ee:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a3f2:	6184      	str	r4, [r0, #24]
 800a3f4:	7704      	strb	r4, [r0, #28]
 800a3f6:	6244      	str	r4, [r0, #36]	; 0x24
 800a3f8:	4631      	mov	r1, r6
 800a3fa:	4628      	mov	r0, r5
 800a3fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a3fe:	2301      	movs	r3, #1
 800a400:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a404:	f000 b806 	b.w	800a414 <__strtok_r>
 800a408:	2000017c 	.word	0x2000017c
 800a40c:	0800d4a0 	.word	0x0800d4a0
 800a410:	0800d4b7 	.word	0x0800d4b7

0800a414 <__strtok_r>:
 800a414:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a416:	b908      	cbnz	r0, 800a41c <__strtok_r+0x8>
 800a418:	6810      	ldr	r0, [r2, #0]
 800a41a:	b188      	cbz	r0, 800a440 <__strtok_r+0x2c>
 800a41c:	4604      	mov	r4, r0
 800a41e:	460f      	mov	r7, r1
 800a420:	4620      	mov	r0, r4
 800a422:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a426:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a42a:	b91e      	cbnz	r6, 800a434 <__strtok_r+0x20>
 800a42c:	b965      	cbnz	r5, 800a448 <__strtok_r+0x34>
 800a42e:	4628      	mov	r0, r5
 800a430:	6015      	str	r5, [r2, #0]
 800a432:	e005      	b.n	800a440 <__strtok_r+0x2c>
 800a434:	42b5      	cmp	r5, r6
 800a436:	d1f6      	bne.n	800a426 <__strtok_r+0x12>
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d1f0      	bne.n	800a41e <__strtok_r+0xa>
 800a43c:	6014      	str	r4, [r2, #0]
 800a43e:	7003      	strb	r3, [r0, #0]
 800a440:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a442:	461c      	mov	r4, r3
 800a444:	e00c      	b.n	800a460 <__strtok_r+0x4c>
 800a446:	b915      	cbnz	r5, 800a44e <__strtok_r+0x3a>
 800a448:	460e      	mov	r6, r1
 800a44a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a44e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a452:	42ab      	cmp	r3, r5
 800a454:	d1f7      	bne.n	800a446 <__strtok_r+0x32>
 800a456:	2b00      	cmp	r3, #0
 800a458:	d0f3      	beq.n	800a442 <__strtok_r+0x2e>
 800a45a:	2300      	movs	r3, #0
 800a45c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a460:	6014      	str	r4, [r2, #0]
 800a462:	e7ed      	b.n	800a440 <__strtok_r+0x2c>

0800a464 <_strtol_l.constprop.0>:
 800a464:	2b01      	cmp	r3, #1
 800a466:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a46a:	4680      	mov	r8, r0
 800a46c:	d001      	beq.n	800a472 <_strtol_l.constprop.0+0xe>
 800a46e:	2b24      	cmp	r3, #36	; 0x24
 800a470:	d906      	bls.n	800a480 <_strtol_l.constprop.0+0x1c>
 800a472:	f7fe fabd 	bl	80089f0 <__errno>
 800a476:	2316      	movs	r3, #22
 800a478:	6003      	str	r3, [r0, #0]
 800a47a:	2000      	movs	r0, #0
 800a47c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a480:	460d      	mov	r5, r1
 800a482:	4f35      	ldr	r7, [pc, #212]	; (800a558 <_strtol_l.constprop.0+0xf4>)
 800a484:	4628      	mov	r0, r5
 800a486:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a48a:	5de6      	ldrb	r6, [r4, r7]
 800a48c:	f016 0608 	ands.w	r6, r6, #8
 800a490:	d1f8      	bne.n	800a484 <_strtol_l.constprop.0+0x20>
 800a492:	2c2d      	cmp	r4, #45	; 0x2d
 800a494:	d12f      	bne.n	800a4f6 <_strtol_l.constprop.0+0x92>
 800a496:	2601      	movs	r6, #1
 800a498:	782c      	ldrb	r4, [r5, #0]
 800a49a:	1c85      	adds	r5, r0, #2
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d057      	beq.n	800a550 <_strtol_l.constprop.0+0xec>
 800a4a0:	2b10      	cmp	r3, #16
 800a4a2:	d109      	bne.n	800a4b8 <_strtol_l.constprop.0+0x54>
 800a4a4:	2c30      	cmp	r4, #48	; 0x30
 800a4a6:	d107      	bne.n	800a4b8 <_strtol_l.constprop.0+0x54>
 800a4a8:	7828      	ldrb	r0, [r5, #0]
 800a4aa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a4ae:	2858      	cmp	r0, #88	; 0x58
 800a4b0:	d149      	bne.n	800a546 <_strtol_l.constprop.0+0xe2>
 800a4b2:	2310      	movs	r3, #16
 800a4b4:	786c      	ldrb	r4, [r5, #1]
 800a4b6:	3502      	adds	r5, #2
 800a4b8:	2700      	movs	r7, #0
 800a4ba:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800a4be:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 800a4c2:	fbbe f9f3 	udiv	r9, lr, r3
 800a4c6:	4638      	mov	r0, r7
 800a4c8:	fb03 ea19 	mls	sl, r3, r9, lr
 800a4cc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a4d0:	f1bc 0f09 	cmp.w	ip, #9
 800a4d4:	d814      	bhi.n	800a500 <_strtol_l.constprop.0+0x9c>
 800a4d6:	4664      	mov	r4, ip
 800a4d8:	42a3      	cmp	r3, r4
 800a4da:	dd22      	ble.n	800a522 <_strtol_l.constprop.0+0xbe>
 800a4dc:	2f00      	cmp	r7, #0
 800a4de:	db1d      	blt.n	800a51c <_strtol_l.constprop.0+0xb8>
 800a4e0:	4581      	cmp	r9, r0
 800a4e2:	d31b      	bcc.n	800a51c <_strtol_l.constprop.0+0xb8>
 800a4e4:	d101      	bne.n	800a4ea <_strtol_l.constprop.0+0x86>
 800a4e6:	45a2      	cmp	sl, r4
 800a4e8:	db18      	blt.n	800a51c <_strtol_l.constprop.0+0xb8>
 800a4ea:	2701      	movs	r7, #1
 800a4ec:	fb00 4003 	mla	r0, r0, r3, r4
 800a4f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a4f4:	e7ea      	b.n	800a4cc <_strtol_l.constprop.0+0x68>
 800a4f6:	2c2b      	cmp	r4, #43	; 0x2b
 800a4f8:	bf04      	itt	eq
 800a4fa:	782c      	ldrbeq	r4, [r5, #0]
 800a4fc:	1c85      	addeq	r5, r0, #2
 800a4fe:	e7cd      	b.n	800a49c <_strtol_l.constprop.0+0x38>
 800a500:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a504:	f1bc 0f19 	cmp.w	ip, #25
 800a508:	d801      	bhi.n	800a50e <_strtol_l.constprop.0+0xaa>
 800a50a:	3c37      	subs	r4, #55	; 0x37
 800a50c:	e7e4      	b.n	800a4d8 <_strtol_l.constprop.0+0x74>
 800a50e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a512:	f1bc 0f19 	cmp.w	ip, #25
 800a516:	d804      	bhi.n	800a522 <_strtol_l.constprop.0+0xbe>
 800a518:	3c57      	subs	r4, #87	; 0x57
 800a51a:	e7dd      	b.n	800a4d8 <_strtol_l.constprop.0+0x74>
 800a51c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a520:	e7e6      	b.n	800a4f0 <_strtol_l.constprop.0+0x8c>
 800a522:	2f00      	cmp	r7, #0
 800a524:	da07      	bge.n	800a536 <_strtol_l.constprop.0+0xd2>
 800a526:	2322      	movs	r3, #34	; 0x22
 800a528:	4670      	mov	r0, lr
 800a52a:	f8c8 3000 	str.w	r3, [r8]
 800a52e:	2a00      	cmp	r2, #0
 800a530:	d0a4      	beq.n	800a47c <_strtol_l.constprop.0+0x18>
 800a532:	1e69      	subs	r1, r5, #1
 800a534:	e005      	b.n	800a542 <_strtol_l.constprop.0+0xde>
 800a536:	b106      	cbz	r6, 800a53a <_strtol_l.constprop.0+0xd6>
 800a538:	4240      	negs	r0, r0
 800a53a:	2a00      	cmp	r2, #0
 800a53c:	d09e      	beq.n	800a47c <_strtol_l.constprop.0+0x18>
 800a53e:	2f00      	cmp	r7, #0
 800a540:	d1f7      	bne.n	800a532 <_strtol_l.constprop.0+0xce>
 800a542:	6011      	str	r1, [r2, #0]
 800a544:	e79a      	b.n	800a47c <_strtol_l.constprop.0+0x18>
 800a546:	2430      	movs	r4, #48	; 0x30
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d1b5      	bne.n	800a4b8 <_strtol_l.constprop.0+0x54>
 800a54c:	2308      	movs	r3, #8
 800a54e:	e7b3      	b.n	800a4b8 <_strtol_l.constprop.0+0x54>
 800a550:	2c30      	cmp	r4, #48	; 0x30
 800a552:	d0a9      	beq.n	800a4a8 <_strtol_l.constprop.0+0x44>
 800a554:	230a      	movs	r3, #10
 800a556:	e7af      	b.n	800a4b8 <_strtol_l.constprop.0+0x54>
 800a558:	0800d551 	.word	0x0800d551

0800a55c <_strtol_r>:
 800a55c:	f7ff bf82 	b.w	800a464 <_strtol_l.constprop.0>

0800a560 <__assert_func>:
 800a560:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a562:	4614      	mov	r4, r2
 800a564:	461a      	mov	r2, r3
 800a566:	4b09      	ldr	r3, [pc, #36]	; (800a58c <__assert_func+0x2c>)
 800a568:	4605      	mov	r5, r0
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	68d8      	ldr	r0, [r3, #12]
 800a56e:	b14c      	cbz	r4, 800a584 <__assert_func+0x24>
 800a570:	4b07      	ldr	r3, [pc, #28]	; (800a590 <__assert_func+0x30>)
 800a572:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a576:	9100      	str	r1, [sp, #0]
 800a578:	462b      	mov	r3, r5
 800a57a:	4906      	ldr	r1, [pc, #24]	; (800a594 <__assert_func+0x34>)
 800a57c:	f000 fe8a 	bl	800b294 <fiprintf>
 800a580:	f002 fb8e 	bl	800cca0 <abort>
 800a584:	4b04      	ldr	r3, [pc, #16]	; (800a598 <__assert_func+0x38>)
 800a586:	461c      	mov	r4, r3
 800a588:	e7f3      	b.n	800a572 <__assert_func+0x12>
 800a58a:	bf00      	nop
 800a58c:	2000017c 	.word	0x2000017c
 800a590:	0800d514 	.word	0x0800d514
 800a594:	0800d521 	.word	0x0800d521
 800a598:	0800d54f 	.word	0x0800d54f

0800a59c <quorem>:
 800a59c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5a0:	6903      	ldr	r3, [r0, #16]
 800a5a2:	690c      	ldr	r4, [r1, #16]
 800a5a4:	4607      	mov	r7, r0
 800a5a6:	42a3      	cmp	r3, r4
 800a5a8:	f2c0 8082 	blt.w	800a6b0 <quorem+0x114>
 800a5ac:	3c01      	subs	r4, #1
 800a5ae:	f100 0514 	add.w	r5, r0, #20
 800a5b2:	f101 0814 	add.w	r8, r1, #20
 800a5b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a5ba:	9301      	str	r3, [sp, #4]
 800a5bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a5c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a5c4:	3301      	adds	r3, #1
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	fbb2 f6f3 	udiv	r6, r2, r3
 800a5cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a5d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a5d4:	d331      	bcc.n	800a63a <quorem+0x9e>
 800a5d6:	f04f 0e00 	mov.w	lr, #0
 800a5da:	4640      	mov	r0, r8
 800a5dc:	46ac      	mov	ip, r5
 800a5de:	46f2      	mov	sl, lr
 800a5e0:	f850 2b04 	ldr.w	r2, [r0], #4
 800a5e4:	b293      	uxth	r3, r2
 800a5e6:	fb06 e303 	mla	r3, r6, r3, lr
 800a5ea:	0c12      	lsrs	r2, r2, #16
 800a5ec:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a5f0:	b29b      	uxth	r3, r3
 800a5f2:	fb06 e202 	mla	r2, r6, r2, lr
 800a5f6:	ebaa 0303 	sub.w	r3, sl, r3
 800a5fa:	f8dc a000 	ldr.w	sl, [ip]
 800a5fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a602:	fa1f fa8a 	uxth.w	sl, sl
 800a606:	4453      	add	r3, sl
 800a608:	f8dc a000 	ldr.w	sl, [ip]
 800a60c:	b292      	uxth	r2, r2
 800a60e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a612:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a616:	b29b      	uxth	r3, r3
 800a618:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a61c:	4581      	cmp	r9, r0
 800a61e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a622:	f84c 3b04 	str.w	r3, [ip], #4
 800a626:	d2db      	bcs.n	800a5e0 <quorem+0x44>
 800a628:	f855 300b 	ldr.w	r3, [r5, fp]
 800a62c:	b92b      	cbnz	r3, 800a63a <quorem+0x9e>
 800a62e:	9b01      	ldr	r3, [sp, #4]
 800a630:	3b04      	subs	r3, #4
 800a632:	429d      	cmp	r5, r3
 800a634:	461a      	mov	r2, r3
 800a636:	d32f      	bcc.n	800a698 <quorem+0xfc>
 800a638:	613c      	str	r4, [r7, #16]
 800a63a:	4638      	mov	r0, r7
 800a63c:	f001 fca4 	bl	800bf88 <__mcmp>
 800a640:	2800      	cmp	r0, #0
 800a642:	db25      	blt.n	800a690 <quorem+0xf4>
 800a644:	4628      	mov	r0, r5
 800a646:	f04f 0c00 	mov.w	ip, #0
 800a64a:	3601      	adds	r6, #1
 800a64c:	f858 1b04 	ldr.w	r1, [r8], #4
 800a650:	f8d0 e000 	ldr.w	lr, [r0]
 800a654:	b28b      	uxth	r3, r1
 800a656:	ebac 0303 	sub.w	r3, ip, r3
 800a65a:	fa1f f28e 	uxth.w	r2, lr
 800a65e:	4413      	add	r3, r2
 800a660:	0c0a      	lsrs	r2, r1, #16
 800a662:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a666:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a66a:	b29b      	uxth	r3, r3
 800a66c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a670:	45c1      	cmp	r9, r8
 800a672:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a676:	f840 3b04 	str.w	r3, [r0], #4
 800a67a:	d2e7      	bcs.n	800a64c <quorem+0xb0>
 800a67c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a680:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a684:	b922      	cbnz	r2, 800a690 <quorem+0xf4>
 800a686:	3b04      	subs	r3, #4
 800a688:	429d      	cmp	r5, r3
 800a68a:	461a      	mov	r2, r3
 800a68c:	d30a      	bcc.n	800a6a4 <quorem+0x108>
 800a68e:	613c      	str	r4, [r7, #16]
 800a690:	4630      	mov	r0, r6
 800a692:	b003      	add	sp, #12
 800a694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a698:	6812      	ldr	r2, [r2, #0]
 800a69a:	3b04      	subs	r3, #4
 800a69c:	2a00      	cmp	r2, #0
 800a69e:	d1cb      	bne.n	800a638 <quorem+0x9c>
 800a6a0:	3c01      	subs	r4, #1
 800a6a2:	e7c6      	b.n	800a632 <quorem+0x96>
 800a6a4:	6812      	ldr	r2, [r2, #0]
 800a6a6:	3b04      	subs	r3, #4
 800a6a8:	2a00      	cmp	r2, #0
 800a6aa:	d1f0      	bne.n	800a68e <quorem+0xf2>
 800a6ac:	3c01      	subs	r4, #1
 800a6ae:	e7eb      	b.n	800a688 <quorem+0xec>
 800a6b0:	2000      	movs	r0, #0
 800a6b2:	e7ee      	b.n	800a692 <quorem+0xf6>
 800a6b4:	0000      	movs	r0, r0
	...

0800a6b8 <_dtoa_r>:
 800a6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6bc:	4616      	mov	r6, r2
 800a6be:	461f      	mov	r7, r3
 800a6c0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a6c2:	b099      	sub	sp, #100	; 0x64
 800a6c4:	4605      	mov	r5, r0
 800a6c6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a6ca:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a6ce:	b974      	cbnz	r4, 800a6ee <_dtoa_r+0x36>
 800a6d0:	2010      	movs	r0, #16
 800a6d2:	f001 f95b 	bl	800b98c <malloc>
 800a6d6:	4602      	mov	r2, r0
 800a6d8:	6268      	str	r0, [r5, #36]	; 0x24
 800a6da:	b920      	cbnz	r0, 800a6e6 <_dtoa_r+0x2e>
 800a6dc:	21ea      	movs	r1, #234	; 0xea
 800a6de:	4ba8      	ldr	r3, [pc, #672]	; (800a980 <_dtoa_r+0x2c8>)
 800a6e0:	48a8      	ldr	r0, [pc, #672]	; (800a984 <_dtoa_r+0x2cc>)
 800a6e2:	f7ff ff3d 	bl	800a560 <__assert_func>
 800a6e6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a6ea:	6004      	str	r4, [r0, #0]
 800a6ec:	60c4      	str	r4, [r0, #12]
 800a6ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a6f0:	6819      	ldr	r1, [r3, #0]
 800a6f2:	b151      	cbz	r1, 800a70a <_dtoa_r+0x52>
 800a6f4:	685a      	ldr	r2, [r3, #4]
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	4093      	lsls	r3, r2
 800a6fa:	604a      	str	r2, [r1, #4]
 800a6fc:	608b      	str	r3, [r1, #8]
 800a6fe:	4628      	mov	r0, r5
 800a700:	f001 f9ba 	bl	800ba78 <_Bfree>
 800a704:	2200      	movs	r2, #0
 800a706:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a708:	601a      	str	r2, [r3, #0]
 800a70a:	1e3b      	subs	r3, r7, #0
 800a70c:	bfaf      	iteee	ge
 800a70e:	2300      	movge	r3, #0
 800a710:	2201      	movlt	r2, #1
 800a712:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a716:	9305      	strlt	r3, [sp, #20]
 800a718:	bfa8      	it	ge
 800a71a:	f8c8 3000 	strge.w	r3, [r8]
 800a71e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a722:	4b99      	ldr	r3, [pc, #612]	; (800a988 <_dtoa_r+0x2d0>)
 800a724:	bfb8      	it	lt
 800a726:	f8c8 2000 	strlt.w	r2, [r8]
 800a72a:	ea33 0309 	bics.w	r3, r3, r9
 800a72e:	d119      	bne.n	800a764 <_dtoa_r+0xac>
 800a730:	f242 730f 	movw	r3, #9999	; 0x270f
 800a734:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a736:	6013      	str	r3, [r2, #0]
 800a738:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a73c:	4333      	orrs	r3, r6
 800a73e:	f000 857f 	beq.w	800b240 <_dtoa_r+0xb88>
 800a742:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a744:	b953      	cbnz	r3, 800a75c <_dtoa_r+0xa4>
 800a746:	4b91      	ldr	r3, [pc, #580]	; (800a98c <_dtoa_r+0x2d4>)
 800a748:	e022      	b.n	800a790 <_dtoa_r+0xd8>
 800a74a:	4b91      	ldr	r3, [pc, #580]	; (800a990 <_dtoa_r+0x2d8>)
 800a74c:	9303      	str	r3, [sp, #12]
 800a74e:	3308      	adds	r3, #8
 800a750:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a752:	6013      	str	r3, [r2, #0]
 800a754:	9803      	ldr	r0, [sp, #12]
 800a756:	b019      	add	sp, #100	; 0x64
 800a758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a75c:	4b8b      	ldr	r3, [pc, #556]	; (800a98c <_dtoa_r+0x2d4>)
 800a75e:	9303      	str	r3, [sp, #12]
 800a760:	3303      	adds	r3, #3
 800a762:	e7f5      	b.n	800a750 <_dtoa_r+0x98>
 800a764:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a768:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a76c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a770:	2200      	movs	r2, #0
 800a772:	2300      	movs	r3, #0
 800a774:	f7f6 f918 	bl	80009a8 <__aeabi_dcmpeq>
 800a778:	4680      	mov	r8, r0
 800a77a:	b158      	cbz	r0, 800a794 <_dtoa_r+0xdc>
 800a77c:	2301      	movs	r3, #1
 800a77e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a780:	6013      	str	r3, [r2, #0]
 800a782:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a784:	2b00      	cmp	r3, #0
 800a786:	f000 8558 	beq.w	800b23a <_dtoa_r+0xb82>
 800a78a:	4882      	ldr	r0, [pc, #520]	; (800a994 <_dtoa_r+0x2dc>)
 800a78c:	6018      	str	r0, [r3, #0]
 800a78e:	1e43      	subs	r3, r0, #1
 800a790:	9303      	str	r3, [sp, #12]
 800a792:	e7df      	b.n	800a754 <_dtoa_r+0x9c>
 800a794:	ab16      	add	r3, sp, #88	; 0x58
 800a796:	9301      	str	r3, [sp, #4]
 800a798:	ab17      	add	r3, sp, #92	; 0x5c
 800a79a:	9300      	str	r3, [sp, #0]
 800a79c:	4628      	mov	r0, r5
 800a79e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a7a2:	f001 fd13 	bl	800c1cc <__d2b>
 800a7a6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a7aa:	4683      	mov	fp, r0
 800a7ac:	2c00      	cmp	r4, #0
 800a7ae:	d07f      	beq.n	800a8b0 <_dtoa_r+0x1f8>
 800a7b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a7b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7b6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a7ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7be:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a7c2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a7c6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	4b72      	ldr	r3, [pc, #456]	; (800a998 <_dtoa_r+0x2e0>)
 800a7ce:	f7f5 fccb 	bl	8000168 <__aeabi_dsub>
 800a7d2:	a365      	add	r3, pc, #404	; (adr r3, 800a968 <_dtoa_r+0x2b0>)
 800a7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d8:	f7f5 fe7e 	bl	80004d8 <__aeabi_dmul>
 800a7dc:	a364      	add	r3, pc, #400	; (adr r3, 800a970 <_dtoa_r+0x2b8>)
 800a7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e2:	f7f5 fcc3 	bl	800016c <__adddf3>
 800a7e6:	4606      	mov	r6, r0
 800a7e8:	4620      	mov	r0, r4
 800a7ea:	460f      	mov	r7, r1
 800a7ec:	f7f5 fe0a 	bl	8000404 <__aeabi_i2d>
 800a7f0:	a361      	add	r3, pc, #388	; (adr r3, 800a978 <_dtoa_r+0x2c0>)
 800a7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f6:	f7f5 fe6f 	bl	80004d8 <__aeabi_dmul>
 800a7fa:	4602      	mov	r2, r0
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	4630      	mov	r0, r6
 800a800:	4639      	mov	r1, r7
 800a802:	f7f5 fcb3 	bl	800016c <__adddf3>
 800a806:	4606      	mov	r6, r0
 800a808:	460f      	mov	r7, r1
 800a80a:	f7f6 f915 	bl	8000a38 <__aeabi_d2iz>
 800a80e:	2200      	movs	r2, #0
 800a810:	4682      	mov	sl, r0
 800a812:	2300      	movs	r3, #0
 800a814:	4630      	mov	r0, r6
 800a816:	4639      	mov	r1, r7
 800a818:	f7f6 f8d0 	bl	80009bc <__aeabi_dcmplt>
 800a81c:	b148      	cbz	r0, 800a832 <_dtoa_r+0x17a>
 800a81e:	4650      	mov	r0, sl
 800a820:	f7f5 fdf0 	bl	8000404 <__aeabi_i2d>
 800a824:	4632      	mov	r2, r6
 800a826:	463b      	mov	r3, r7
 800a828:	f7f6 f8be 	bl	80009a8 <__aeabi_dcmpeq>
 800a82c:	b908      	cbnz	r0, 800a832 <_dtoa_r+0x17a>
 800a82e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a832:	f1ba 0f16 	cmp.w	sl, #22
 800a836:	d858      	bhi.n	800a8ea <_dtoa_r+0x232>
 800a838:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a83c:	4b57      	ldr	r3, [pc, #348]	; (800a99c <_dtoa_r+0x2e4>)
 800a83e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a846:	f7f6 f8b9 	bl	80009bc <__aeabi_dcmplt>
 800a84a:	2800      	cmp	r0, #0
 800a84c:	d04f      	beq.n	800a8ee <_dtoa_r+0x236>
 800a84e:	2300      	movs	r3, #0
 800a850:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a854:	930f      	str	r3, [sp, #60]	; 0x3c
 800a856:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a858:	1b1c      	subs	r4, r3, r4
 800a85a:	1e63      	subs	r3, r4, #1
 800a85c:	9309      	str	r3, [sp, #36]	; 0x24
 800a85e:	bf49      	itett	mi
 800a860:	f1c4 0301 	rsbmi	r3, r4, #1
 800a864:	2300      	movpl	r3, #0
 800a866:	9306      	strmi	r3, [sp, #24]
 800a868:	2300      	movmi	r3, #0
 800a86a:	bf54      	ite	pl
 800a86c:	9306      	strpl	r3, [sp, #24]
 800a86e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a870:	f1ba 0f00 	cmp.w	sl, #0
 800a874:	db3d      	blt.n	800a8f2 <_dtoa_r+0x23a>
 800a876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a878:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a87c:	4453      	add	r3, sl
 800a87e:	9309      	str	r3, [sp, #36]	; 0x24
 800a880:	2300      	movs	r3, #0
 800a882:	930a      	str	r3, [sp, #40]	; 0x28
 800a884:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a886:	2b09      	cmp	r3, #9
 800a888:	f200 808c 	bhi.w	800a9a4 <_dtoa_r+0x2ec>
 800a88c:	2b05      	cmp	r3, #5
 800a88e:	bfc4      	itt	gt
 800a890:	3b04      	subgt	r3, #4
 800a892:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a894:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a896:	bfc8      	it	gt
 800a898:	2400      	movgt	r4, #0
 800a89a:	f1a3 0302 	sub.w	r3, r3, #2
 800a89e:	bfd8      	it	le
 800a8a0:	2401      	movle	r4, #1
 800a8a2:	2b03      	cmp	r3, #3
 800a8a4:	f200 808a 	bhi.w	800a9bc <_dtoa_r+0x304>
 800a8a8:	e8df f003 	tbb	[pc, r3]
 800a8ac:	5b4d4f2d 	.word	0x5b4d4f2d
 800a8b0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a8b4:	441c      	add	r4, r3
 800a8b6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a8ba:	2b20      	cmp	r3, #32
 800a8bc:	bfc3      	ittte	gt
 800a8be:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a8c2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800a8c6:	fa09 f303 	lslgt.w	r3, r9, r3
 800a8ca:	f1c3 0320 	rsble	r3, r3, #32
 800a8ce:	bfc6      	itte	gt
 800a8d0:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a8d4:	4318      	orrgt	r0, r3
 800a8d6:	fa06 f003 	lslle.w	r0, r6, r3
 800a8da:	f7f5 fd83 	bl	80003e4 <__aeabi_ui2d>
 800a8de:	2301      	movs	r3, #1
 800a8e0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a8e4:	3c01      	subs	r4, #1
 800a8e6:	9313      	str	r3, [sp, #76]	; 0x4c
 800a8e8:	e76f      	b.n	800a7ca <_dtoa_r+0x112>
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	e7b2      	b.n	800a854 <_dtoa_r+0x19c>
 800a8ee:	900f      	str	r0, [sp, #60]	; 0x3c
 800a8f0:	e7b1      	b.n	800a856 <_dtoa_r+0x19e>
 800a8f2:	9b06      	ldr	r3, [sp, #24]
 800a8f4:	eba3 030a 	sub.w	r3, r3, sl
 800a8f8:	9306      	str	r3, [sp, #24]
 800a8fa:	f1ca 0300 	rsb	r3, sl, #0
 800a8fe:	930a      	str	r3, [sp, #40]	; 0x28
 800a900:	2300      	movs	r3, #0
 800a902:	930e      	str	r3, [sp, #56]	; 0x38
 800a904:	e7be      	b.n	800a884 <_dtoa_r+0x1cc>
 800a906:	2300      	movs	r3, #0
 800a908:	930b      	str	r3, [sp, #44]	; 0x2c
 800a90a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	dc58      	bgt.n	800a9c2 <_dtoa_r+0x30a>
 800a910:	f04f 0901 	mov.w	r9, #1
 800a914:	464b      	mov	r3, r9
 800a916:	f8cd 9020 	str.w	r9, [sp, #32]
 800a91a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800a91e:	2200      	movs	r2, #0
 800a920:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a922:	6042      	str	r2, [r0, #4]
 800a924:	2204      	movs	r2, #4
 800a926:	f102 0614 	add.w	r6, r2, #20
 800a92a:	429e      	cmp	r6, r3
 800a92c:	6841      	ldr	r1, [r0, #4]
 800a92e:	d94e      	bls.n	800a9ce <_dtoa_r+0x316>
 800a930:	4628      	mov	r0, r5
 800a932:	f001 f861 	bl	800b9f8 <_Balloc>
 800a936:	9003      	str	r0, [sp, #12]
 800a938:	2800      	cmp	r0, #0
 800a93a:	d14c      	bne.n	800a9d6 <_dtoa_r+0x31e>
 800a93c:	4602      	mov	r2, r0
 800a93e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a942:	4b17      	ldr	r3, [pc, #92]	; (800a9a0 <_dtoa_r+0x2e8>)
 800a944:	e6cc      	b.n	800a6e0 <_dtoa_r+0x28>
 800a946:	2301      	movs	r3, #1
 800a948:	e7de      	b.n	800a908 <_dtoa_r+0x250>
 800a94a:	2300      	movs	r3, #0
 800a94c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a94e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a950:	eb0a 0903 	add.w	r9, sl, r3
 800a954:	f109 0301 	add.w	r3, r9, #1
 800a958:	2b01      	cmp	r3, #1
 800a95a:	9308      	str	r3, [sp, #32]
 800a95c:	bfb8      	it	lt
 800a95e:	2301      	movlt	r3, #1
 800a960:	e7dd      	b.n	800a91e <_dtoa_r+0x266>
 800a962:	2301      	movs	r3, #1
 800a964:	e7f2      	b.n	800a94c <_dtoa_r+0x294>
 800a966:	bf00      	nop
 800a968:	636f4361 	.word	0x636f4361
 800a96c:	3fd287a7 	.word	0x3fd287a7
 800a970:	8b60c8b3 	.word	0x8b60c8b3
 800a974:	3fc68a28 	.word	0x3fc68a28
 800a978:	509f79fb 	.word	0x509f79fb
 800a97c:	3fd34413 	.word	0x3fd34413
 800a980:	0800d4a0 	.word	0x0800d4a0
 800a984:	0800d65e 	.word	0x0800d65e
 800a988:	7ff00000 	.word	0x7ff00000
 800a98c:	0800d65a 	.word	0x0800d65a
 800a990:	0800d651 	.word	0x0800d651
 800a994:	0800d425 	.word	0x0800d425
 800a998:	3ff80000 	.word	0x3ff80000
 800a99c:	0800d7c8 	.word	0x0800d7c8
 800a9a0:	0800d6b9 	.word	0x0800d6b9
 800a9a4:	2401      	movs	r4, #1
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	940b      	str	r4, [sp, #44]	; 0x2c
 800a9aa:	9322      	str	r3, [sp, #136]	; 0x88
 800a9ac:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	2312      	movs	r3, #18
 800a9b4:	f8cd 9020 	str.w	r9, [sp, #32]
 800a9b8:	9223      	str	r2, [sp, #140]	; 0x8c
 800a9ba:	e7b0      	b.n	800a91e <_dtoa_r+0x266>
 800a9bc:	2301      	movs	r3, #1
 800a9be:	930b      	str	r3, [sp, #44]	; 0x2c
 800a9c0:	e7f4      	b.n	800a9ac <_dtoa_r+0x2f4>
 800a9c2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800a9c6:	464b      	mov	r3, r9
 800a9c8:	f8cd 9020 	str.w	r9, [sp, #32]
 800a9cc:	e7a7      	b.n	800a91e <_dtoa_r+0x266>
 800a9ce:	3101      	adds	r1, #1
 800a9d0:	6041      	str	r1, [r0, #4]
 800a9d2:	0052      	lsls	r2, r2, #1
 800a9d4:	e7a7      	b.n	800a926 <_dtoa_r+0x26e>
 800a9d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a9d8:	9a03      	ldr	r2, [sp, #12]
 800a9da:	601a      	str	r2, [r3, #0]
 800a9dc:	9b08      	ldr	r3, [sp, #32]
 800a9de:	2b0e      	cmp	r3, #14
 800a9e0:	f200 80a8 	bhi.w	800ab34 <_dtoa_r+0x47c>
 800a9e4:	2c00      	cmp	r4, #0
 800a9e6:	f000 80a5 	beq.w	800ab34 <_dtoa_r+0x47c>
 800a9ea:	f1ba 0f00 	cmp.w	sl, #0
 800a9ee:	dd34      	ble.n	800aa5a <_dtoa_r+0x3a2>
 800a9f0:	4a9a      	ldr	r2, [pc, #616]	; (800ac5c <_dtoa_r+0x5a4>)
 800a9f2:	f00a 030f 	and.w	r3, sl, #15
 800a9f6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a9fa:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a9fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aa02:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800aa06:	ea4f 142a 	mov.w	r4, sl, asr #4
 800aa0a:	d016      	beq.n	800aa3a <_dtoa_r+0x382>
 800aa0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aa10:	4b93      	ldr	r3, [pc, #588]	; (800ac60 <_dtoa_r+0x5a8>)
 800aa12:	2703      	movs	r7, #3
 800aa14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aa18:	f7f5 fe88 	bl	800072c <__aeabi_ddiv>
 800aa1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa20:	f004 040f 	and.w	r4, r4, #15
 800aa24:	4e8e      	ldr	r6, [pc, #568]	; (800ac60 <_dtoa_r+0x5a8>)
 800aa26:	b954      	cbnz	r4, 800aa3e <_dtoa_r+0x386>
 800aa28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800aa2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa30:	f7f5 fe7c 	bl	800072c <__aeabi_ddiv>
 800aa34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa38:	e029      	b.n	800aa8e <_dtoa_r+0x3d6>
 800aa3a:	2702      	movs	r7, #2
 800aa3c:	e7f2      	b.n	800aa24 <_dtoa_r+0x36c>
 800aa3e:	07e1      	lsls	r1, r4, #31
 800aa40:	d508      	bpl.n	800aa54 <_dtoa_r+0x39c>
 800aa42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800aa46:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aa4a:	f7f5 fd45 	bl	80004d8 <__aeabi_dmul>
 800aa4e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800aa52:	3701      	adds	r7, #1
 800aa54:	1064      	asrs	r4, r4, #1
 800aa56:	3608      	adds	r6, #8
 800aa58:	e7e5      	b.n	800aa26 <_dtoa_r+0x36e>
 800aa5a:	f000 80a5 	beq.w	800aba8 <_dtoa_r+0x4f0>
 800aa5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aa62:	f1ca 0400 	rsb	r4, sl, #0
 800aa66:	4b7d      	ldr	r3, [pc, #500]	; (800ac5c <_dtoa_r+0x5a4>)
 800aa68:	f004 020f 	and.w	r2, r4, #15
 800aa6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa74:	f7f5 fd30 	bl	80004d8 <__aeabi_dmul>
 800aa78:	2702      	movs	r7, #2
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa80:	4e77      	ldr	r6, [pc, #476]	; (800ac60 <_dtoa_r+0x5a8>)
 800aa82:	1124      	asrs	r4, r4, #4
 800aa84:	2c00      	cmp	r4, #0
 800aa86:	f040 8084 	bne.w	800ab92 <_dtoa_r+0x4da>
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d1d2      	bne.n	800aa34 <_dtoa_r+0x37c>
 800aa8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	f000 808b 	beq.w	800abac <_dtoa_r+0x4f4>
 800aa96:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800aa9a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800aa9e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	4b6f      	ldr	r3, [pc, #444]	; (800ac64 <_dtoa_r+0x5ac>)
 800aaa6:	f7f5 ff89 	bl	80009bc <__aeabi_dcmplt>
 800aaaa:	2800      	cmp	r0, #0
 800aaac:	d07e      	beq.n	800abac <_dtoa_r+0x4f4>
 800aaae:	9b08      	ldr	r3, [sp, #32]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d07b      	beq.n	800abac <_dtoa_r+0x4f4>
 800aab4:	f1b9 0f00 	cmp.w	r9, #0
 800aab8:	dd38      	ble.n	800ab2c <_dtoa_r+0x474>
 800aaba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800aabe:	2200      	movs	r2, #0
 800aac0:	4b69      	ldr	r3, [pc, #420]	; (800ac68 <_dtoa_r+0x5b0>)
 800aac2:	f7f5 fd09 	bl	80004d8 <__aeabi_dmul>
 800aac6:	464c      	mov	r4, r9
 800aac8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aacc:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 800aad0:	3701      	adds	r7, #1
 800aad2:	4638      	mov	r0, r7
 800aad4:	f7f5 fc96 	bl	8000404 <__aeabi_i2d>
 800aad8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aadc:	f7f5 fcfc 	bl	80004d8 <__aeabi_dmul>
 800aae0:	2200      	movs	r2, #0
 800aae2:	4b62      	ldr	r3, [pc, #392]	; (800ac6c <_dtoa_r+0x5b4>)
 800aae4:	f7f5 fb42 	bl	800016c <__adddf3>
 800aae8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800aaec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800aaf0:	9611      	str	r6, [sp, #68]	; 0x44
 800aaf2:	2c00      	cmp	r4, #0
 800aaf4:	d15d      	bne.n	800abb2 <_dtoa_r+0x4fa>
 800aaf6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aafa:	2200      	movs	r2, #0
 800aafc:	4b5c      	ldr	r3, [pc, #368]	; (800ac70 <_dtoa_r+0x5b8>)
 800aafe:	f7f5 fb33 	bl	8000168 <__aeabi_dsub>
 800ab02:	4602      	mov	r2, r0
 800ab04:	460b      	mov	r3, r1
 800ab06:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ab0a:	4633      	mov	r3, r6
 800ab0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ab0e:	f7f5 ff73 	bl	80009f8 <__aeabi_dcmpgt>
 800ab12:	2800      	cmp	r0, #0
 800ab14:	f040 829c 	bne.w	800b050 <_dtoa_r+0x998>
 800ab18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ab1e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ab22:	f7f5 ff4b 	bl	80009bc <__aeabi_dcmplt>
 800ab26:	2800      	cmp	r0, #0
 800ab28:	f040 8290 	bne.w	800b04c <_dtoa_r+0x994>
 800ab2c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800ab30:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ab34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	f2c0 8152 	blt.w	800ade0 <_dtoa_r+0x728>
 800ab3c:	f1ba 0f0e 	cmp.w	sl, #14
 800ab40:	f300 814e 	bgt.w	800ade0 <_dtoa_r+0x728>
 800ab44:	4b45      	ldr	r3, [pc, #276]	; (800ac5c <_dtoa_r+0x5a4>)
 800ab46:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ab4a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ab4e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800ab52:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	f280 80db 	bge.w	800ad10 <_dtoa_r+0x658>
 800ab5a:	9b08      	ldr	r3, [sp, #32]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	f300 80d7 	bgt.w	800ad10 <_dtoa_r+0x658>
 800ab62:	f040 8272 	bne.w	800b04a <_dtoa_r+0x992>
 800ab66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	4b40      	ldr	r3, [pc, #256]	; (800ac70 <_dtoa_r+0x5b8>)
 800ab6e:	f7f5 fcb3 	bl	80004d8 <__aeabi_dmul>
 800ab72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab76:	f7f5 ff35 	bl	80009e4 <__aeabi_dcmpge>
 800ab7a:	9c08      	ldr	r4, [sp, #32]
 800ab7c:	4626      	mov	r6, r4
 800ab7e:	2800      	cmp	r0, #0
 800ab80:	f040 8248 	bne.w	800b014 <_dtoa_r+0x95c>
 800ab84:	2331      	movs	r3, #49	; 0x31
 800ab86:	9f03      	ldr	r7, [sp, #12]
 800ab88:	f10a 0a01 	add.w	sl, sl, #1
 800ab8c:	f807 3b01 	strb.w	r3, [r7], #1
 800ab90:	e244      	b.n	800b01c <_dtoa_r+0x964>
 800ab92:	07e2      	lsls	r2, r4, #31
 800ab94:	d505      	bpl.n	800aba2 <_dtoa_r+0x4ea>
 800ab96:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ab9a:	f7f5 fc9d 	bl	80004d8 <__aeabi_dmul>
 800ab9e:	2301      	movs	r3, #1
 800aba0:	3701      	adds	r7, #1
 800aba2:	1064      	asrs	r4, r4, #1
 800aba4:	3608      	adds	r6, #8
 800aba6:	e76d      	b.n	800aa84 <_dtoa_r+0x3cc>
 800aba8:	2702      	movs	r7, #2
 800abaa:	e770      	b.n	800aa8e <_dtoa_r+0x3d6>
 800abac:	46d0      	mov	r8, sl
 800abae:	9c08      	ldr	r4, [sp, #32]
 800abb0:	e78f      	b.n	800aad2 <_dtoa_r+0x41a>
 800abb2:	9903      	ldr	r1, [sp, #12]
 800abb4:	4b29      	ldr	r3, [pc, #164]	; (800ac5c <_dtoa_r+0x5a4>)
 800abb6:	4421      	add	r1, r4
 800abb8:	9112      	str	r1, [sp, #72]	; 0x48
 800abba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800abbc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800abc0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800abc4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800abc8:	2900      	cmp	r1, #0
 800abca:	d055      	beq.n	800ac78 <_dtoa_r+0x5c0>
 800abcc:	2000      	movs	r0, #0
 800abce:	4929      	ldr	r1, [pc, #164]	; (800ac74 <_dtoa_r+0x5bc>)
 800abd0:	f7f5 fdac 	bl	800072c <__aeabi_ddiv>
 800abd4:	463b      	mov	r3, r7
 800abd6:	4632      	mov	r2, r6
 800abd8:	f7f5 fac6 	bl	8000168 <__aeabi_dsub>
 800abdc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800abe0:	9f03      	ldr	r7, [sp, #12]
 800abe2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800abe6:	f7f5 ff27 	bl	8000a38 <__aeabi_d2iz>
 800abea:	4604      	mov	r4, r0
 800abec:	f7f5 fc0a 	bl	8000404 <__aeabi_i2d>
 800abf0:	4602      	mov	r2, r0
 800abf2:	460b      	mov	r3, r1
 800abf4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800abf8:	f7f5 fab6 	bl	8000168 <__aeabi_dsub>
 800abfc:	4602      	mov	r2, r0
 800abfe:	460b      	mov	r3, r1
 800ac00:	3430      	adds	r4, #48	; 0x30
 800ac02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ac06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ac0a:	f807 4b01 	strb.w	r4, [r7], #1
 800ac0e:	f7f5 fed5 	bl	80009bc <__aeabi_dcmplt>
 800ac12:	2800      	cmp	r0, #0
 800ac14:	d174      	bne.n	800ad00 <_dtoa_r+0x648>
 800ac16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac1a:	2000      	movs	r0, #0
 800ac1c:	4911      	ldr	r1, [pc, #68]	; (800ac64 <_dtoa_r+0x5ac>)
 800ac1e:	f7f5 faa3 	bl	8000168 <__aeabi_dsub>
 800ac22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ac26:	f7f5 fec9 	bl	80009bc <__aeabi_dcmplt>
 800ac2a:	2800      	cmp	r0, #0
 800ac2c:	f040 80b7 	bne.w	800ad9e <_dtoa_r+0x6e6>
 800ac30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ac32:	429f      	cmp	r7, r3
 800ac34:	f43f af7a 	beq.w	800ab2c <_dtoa_r+0x474>
 800ac38:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	4b0a      	ldr	r3, [pc, #40]	; (800ac68 <_dtoa_r+0x5b0>)
 800ac40:	f7f5 fc4a 	bl	80004d8 <__aeabi_dmul>
 800ac44:	2200      	movs	r2, #0
 800ac46:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ac4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac4e:	4b06      	ldr	r3, [pc, #24]	; (800ac68 <_dtoa_r+0x5b0>)
 800ac50:	f7f5 fc42 	bl	80004d8 <__aeabi_dmul>
 800ac54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac58:	e7c3      	b.n	800abe2 <_dtoa_r+0x52a>
 800ac5a:	bf00      	nop
 800ac5c:	0800d7c8 	.word	0x0800d7c8
 800ac60:	0800d7a0 	.word	0x0800d7a0
 800ac64:	3ff00000 	.word	0x3ff00000
 800ac68:	40240000 	.word	0x40240000
 800ac6c:	401c0000 	.word	0x401c0000
 800ac70:	40140000 	.word	0x40140000
 800ac74:	3fe00000 	.word	0x3fe00000
 800ac78:	4630      	mov	r0, r6
 800ac7a:	4639      	mov	r1, r7
 800ac7c:	f7f5 fc2c 	bl	80004d8 <__aeabi_dmul>
 800ac80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ac82:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ac86:	9c03      	ldr	r4, [sp, #12]
 800ac88:	9314      	str	r3, [sp, #80]	; 0x50
 800ac8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac8e:	f7f5 fed3 	bl	8000a38 <__aeabi_d2iz>
 800ac92:	9015      	str	r0, [sp, #84]	; 0x54
 800ac94:	f7f5 fbb6 	bl	8000404 <__aeabi_i2d>
 800ac98:	4602      	mov	r2, r0
 800ac9a:	460b      	mov	r3, r1
 800ac9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aca0:	f7f5 fa62 	bl	8000168 <__aeabi_dsub>
 800aca4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aca6:	4606      	mov	r6, r0
 800aca8:	3330      	adds	r3, #48	; 0x30
 800acaa:	f804 3b01 	strb.w	r3, [r4], #1
 800acae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800acb0:	460f      	mov	r7, r1
 800acb2:	429c      	cmp	r4, r3
 800acb4:	f04f 0200 	mov.w	r2, #0
 800acb8:	d124      	bne.n	800ad04 <_dtoa_r+0x64c>
 800acba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800acbe:	4bb0      	ldr	r3, [pc, #704]	; (800af80 <_dtoa_r+0x8c8>)
 800acc0:	f7f5 fa54 	bl	800016c <__adddf3>
 800acc4:	4602      	mov	r2, r0
 800acc6:	460b      	mov	r3, r1
 800acc8:	4630      	mov	r0, r6
 800acca:	4639      	mov	r1, r7
 800accc:	f7f5 fe94 	bl	80009f8 <__aeabi_dcmpgt>
 800acd0:	2800      	cmp	r0, #0
 800acd2:	d163      	bne.n	800ad9c <_dtoa_r+0x6e4>
 800acd4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800acd8:	2000      	movs	r0, #0
 800acda:	49a9      	ldr	r1, [pc, #676]	; (800af80 <_dtoa_r+0x8c8>)
 800acdc:	f7f5 fa44 	bl	8000168 <__aeabi_dsub>
 800ace0:	4602      	mov	r2, r0
 800ace2:	460b      	mov	r3, r1
 800ace4:	4630      	mov	r0, r6
 800ace6:	4639      	mov	r1, r7
 800ace8:	f7f5 fe68 	bl	80009bc <__aeabi_dcmplt>
 800acec:	2800      	cmp	r0, #0
 800acee:	f43f af1d 	beq.w	800ab2c <_dtoa_r+0x474>
 800acf2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800acf4:	1e7b      	subs	r3, r7, #1
 800acf6:	9314      	str	r3, [sp, #80]	; 0x50
 800acf8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800acfc:	2b30      	cmp	r3, #48	; 0x30
 800acfe:	d0f8      	beq.n	800acf2 <_dtoa_r+0x63a>
 800ad00:	46c2      	mov	sl, r8
 800ad02:	e03b      	b.n	800ad7c <_dtoa_r+0x6c4>
 800ad04:	4b9f      	ldr	r3, [pc, #636]	; (800af84 <_dtoa_r+0x8cc>)
 800ad06:	f7f5 fbe7 	bl	80004d8 <__aeabi_dmul>
 800ad0a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad0e:	e7bc      	b.n	800ac8a <_dtoa_r+0x5d2>
 800ad10:	9f03      	ldr	r7, [sp, #12]
 800ad12:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ad16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ad1a:	4640      	mov	r0, r8
 800ad1c:	4649      	mov	r1, r9
 800ad1e:	f7f5 fd05 	bl	800072c <__aeabi_ddiv>
 800ad22:	f7f5 fe89 	bl	8000a38 <__aeabi_d2iz>
 800ad26:	4604      	mov	r4, r0
 800ad28:	f7f5 fb6c 	bl	8000404 <__aeabi_i2d>
 800ad2c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ad30:	f7f5 fbd2 	bl	80004d8 <__aeabi_dmul>
 800ad34:	4602      	mov	r2, r0
 800ad36:	460b      	mov	r3, r1
 800ad38:	4640      	mov	r0, r8
 800ad3a:	4649      	mov	r1, r9
 800ad3c:	f7f5 fa14 	bl	8000168 <__aeabi_dsub>
 800ad40:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800ad44:	f807 6b01 	strb.w	r6, [r7], #1
 800ad48:	9e03      	ldr	r6, [sp, #12]
 800ad4a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800ad4e:	1bbe      	subs	r6, r7, r6
 800ad50:	45b4      	cmp	ip, r6
 800ad52:	4602      	mov	r2, r0
 800ad54:	460b      	mov	r3, r1
 800ad56:	d136      	bne.n	800adc6 <_dtoa_r+0x70e>
 800ad58:	f7f5 fa08 	bl	800016c <__adddf3>
 800ad5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ad60:	4680      	mov	r8, r0
 800ad62:	4689      	mov	r9, r1
 800ad64:	f7f5 fe48 	bl	80009f8 <__aeabi_dcmpgt>
 800ad68:	bb58      	cbnz	r0, 800adc2 <_dtoa_r+0x70a>
 800ad6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ad6e:	4640      	mov	r0, r8
 800ad70:	4649      	mov	r1, r9
 800ad72:	f7f5 fe19 	bl	80009a8 <__aeabi_dcmpeq>
 800ad76:	b108      	cbz	r0, 800ad7c <_dtoa_r+0x6c4>
 800ad78:	07e1      	lsls	r1, r4, #31
 800ad7a:	d422      	bmi.n	800adc2 <_dtoa_r+0x70a>
 800ad7c:	4628      	mov	r0, r5
 800ad7e:	4659      	mov	r1, fp
 800ad80:	f000 fe7a 	bl	800ba78 <_Bfree>
 800ad84:	2300      	movs	r3, #0
 800ad86:	703b      	strb	r3, [r7, #0]
 800ad88:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ad8a:	f10a 0001 	add.w	r0, sl, #1
 800ad8e:	6018      	str	r0, [r3, #0]
 800ad90:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	f43f acde 	beq.w	800a754 <_dtoa_r+0x9c>
 800ad98:	601f      	str	r7, [r3, #0]
 800ad9a:	e4db      	b.n	800a754 <_dtoa_r+0x9c>
 800ad9c:	4627      	mov	r7, r4
 800ad9e:	463b      	mov	r3, r7
 800ada0:	461f      	mov	r7, r3
 800ada2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ada6:	2a39      	cmp	r2, #57	; 0x39
 800ada8:	d107      	bne.n	800adba <_dtoa_r+0x702>
 800adaa:	9a03      	ldr	r2, [sp, #12]
 800adac:	429a      	cmp	r2, r3
 800adae:	d1f7      	bne.n	800ada0 <_dtoa_r+0x6e8>
 800adb0:	2230      	movs	r2, #48	; 0x30
 800adb2:	9903      	ldr	r1, [sp, #12]
 800adb4:	f108 0801 	add.w	r8, r8, #1
 800adb8:	700a      	strb	r2, [r1, #0]
 800adba:	781a      	ldrb	r2, [r3, #0]
 800adbc:	3201      	adds	r2, #1
 800adbe:	701a      	strb	r2, [r3, #0]
 800adc0:	e79e      	b.n	800ad00 <_dtoa_r+0x648>
 800adc2:	46d0      	mov	r8, sl
 800adc4:	e7eb      	b.n	800ad9e <_dtoa_r+0x6e6>
 800adc6:	2200      	movs	r2, #0
 800adc8:	4b6e      	ldr	r3, [pc, #440]	; (800af84 <_dtoa_r+0x8cc>)
 800adca:	f7f5 fb85 	bl	80004d8 <__aeabi_dmul>
 800adce:	2200      	movs	r2, #0
 800add0:	2300      	movs	r3, #0
 800add2:	4680      	mov	r8, r0
 800add4:	4689      	mov	r9, r1
 800add6:	f7f5 fde7 	bl	80009a8 <__aeabi_dcmpeq>
 800adda:	2800      	cmp	r0, #0
 800addc:	d09b      	beq.n	800ad16 <_dtoa_r+0x65e>
 800adde:	e7cd      	b.n	800ad7c <_dtoa_r+0x6c4>
 800ade0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ade2:	2a00      	cmp	r2, #0
 800ade4:	f000 80d0 	beq.w	800af88 <_dtoa_r+0x8d0>
 800ade8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800adea:	2a01      	cmp	r2, #1
 800adec:	f300 80ae 	bgt.w	800af4c <_dtoa_r+0x894>
 800adf0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800adf2:	2a00      	cmp	r2, #0
 800adf4:	f000 80a6 	beq.w	800af44 <_dtoa_r+0x88c>
 800adf8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800adfc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800adfe:	9f06      	ldr	r7, [sp, #24]
 800ae00:	9a06      	ldr	r2, [sp, #24]
 800ae02:	2101      	movs	r1, #1
 800ae04:	441a      	add	r2, r3
 800ae06:	9206      	str	r2, [sp, #24]
 800ae08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae0a:	4628      	mov	r0, r5
 800ae0c:	441a      	add	r2, r3
 800ae0e:	9209      	str	r2, [sp, #36]	; 0x24
 800ae10:	f000 ff32 	bl	800bc78 <__i2b>
 800ae14:	4606      	mov	r6, r0
 800ae16:	2f00      	cmp	r7, #0
 800ae18:	dd0c      	ble.n	800ae34 <_dtoa_r+0x77c>
 800ae1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	dd09      	ble.n	800ae34 <_dtoa_r+0x77c>
 800ae20:	42bb      	cmp	r3, r7
 800ae22:	bfa8      	it	ge
 800ae24:	463b      	movge	r3, r7
 800ae26:	9a06      	ldr	r2, [sp, #24]
 800ae28:	1aff      	subs	r7, r7, r3
 800ae2a:	1ad2      	subs	r2, r2, r3
 800ae2c:	9206      	str	r2, [sp, #24]
 800ae2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae30:	1ad3      	subs	r3, r2, r3
 800ae32:	9309      	str	r3, [sp, #36]	; 0x24
 800ae34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae36:	b1f3      	cbz	r3, 800ae76 <_dtoa_r+0x7be>
 800ae38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	f000 80a8 	beq.w	800af90 <_dtoa_r+0x8d8>
 800ae40:	2c00      	cmp	r4, #0
 800ae42:	dd10      	ble.n	800ae66 <_dtoa_r+0x7ae>
 800ae44:	4631      	mov	r1, r6
 800ae46:	4622      	mov	r2, r4
 800ae48:	4628      	mov	r0, r5
 800ae4a:	f000 ffd3 	bl	800bdf4 <__pow5mult>
 800ae4e:	465a      	mov	r2, fp
 800ae50:	4601      	mov	r1, r0
 800ae52:	4606      	mov	r6, r0
 800ae54:	4628      	mov	r0, r5
 800ae56:	f000 ff25 	bl	800bca4 <__multiply>
 800ae5a:	4680      	mov	r8, r0
 800ae5c:	4659      	mov	r1, fp
 800ae5e:	4628      	mov	r0, r5
 800ae60:	f000 fe0a 	bl	800ba78 <_Bfree>
 800ae64:	46c3      	mov	fp, r8
 800ae66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae68:	1b1a      	subs	r2, r3, r4
 800ae6a:	d004      	beq.n	800ae76 <_dtoa_r+0x7be>
 800ae6c:	4659      	mov	r1, fp
 800ae6e:	4628      	mov	r0, r5
 800ae70:	f000 ffc0 	bl	800bdf4 <__pow5mult>
 800ae74:	4683      	mov	fp, r0
 800ae76:	2101      	movs	r1, #1
 800ae78:	4628      	mov	r0, r5
 800ae7a:	f000 fefd 	bl	800bc78 <__i2b>
 800ae7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae80:	4604      	mov	r4, r0
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	f340 8086 	ble.w	800af94 <_dtoa_r+0x8dc>
 800ae88:	461a      	mov	r2, r3
 800ae8a:	4601      	mov	r1, r0
 800ae8c:	4628      	mov	r0, r5
 800ae8e:	f000 ffb1 	bl	800bdf4 <__pow5mult>
 800ae92:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ae94:	4604      	mov	r4, r0
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	dd7f      	ble.n	800af9a <_dtoa_r+0x8e2>
 800ae9a:	f04f 0800 	mov.w	r8, #0
 800ae9e:	6923      	ldr	r3, [r4, #16]
 800aea0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aea4:	6918      	ldr	r0, [r3, #16]
 800aea6:	f000 fe99 	bl	800bbdc <__hi0bits>
 800aeaa:	f1c0 0020 	rsb	r0, r0, #32
 800aeae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeb0:	4418      	add	r0, r3
 800aeb2:	f010 001f 	ands.w	r0, r0, #31
 800aeb6:	f000 8092 	beq.w	800afde <_dtoa_r+0x926>
 800aeba:	f1c0 0320 	rsb	r3, r0, #32
 800aebe:	2b04      	cmp	r3, #4
 800aec0:	f340 808a 	ble.w	800afd8 <_dtoa_r+0x920>
 800aec4:	f1c0 001c 	rsb	r0, r0, #28
 800aec8:	9b06      	ldr	r3, [sp, #24]
 800aeca:	4407      	add	r7, r0
 800aecc:	4403      	add	r3, r0
 800aece:	9306      	str	r3, [sp, #24]
 800aed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aed2:	4403      	add	r3, r0
 800aed4:	9309      	str	r3, [sp, #36]	; 0x24
 800aed6:	9b06      	ldr	r3, [sp, #24]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	dd05      	ble.n	800aee8 <_dtoa_r+0x830>
 800aedc:	4659      	mov	r1, fp
 800aede:	461a      	mov	r2, r3
 800aee0:	4628      	mov	r0, r5
 800aee2:	f000 ffe1 	bl	800bea8 <__lshift>
 800aee6:	4683      	mov	fp, r0
 800aee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	dd05      	ble.n	800aefa <_dtoa_r+0x842>
 800aeee:	4621      	mov	r1, r4
 800aef0:	461a      	mov	r2, r3
 800aef2:	4628      	mov	r0, r5
 800aef4:	f000 ffd8 	bl	800bea8 <__lshift>
 800aef8:	4604      	mov	r4, r0
 800aefa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d070      	beq.n	800afe2 <_dtoa_r+0x92a>
 800af00:	4621      	mov	r1, r4
 800af02:	4658      	mov	r0, fp
 800af04:	f001 f840 	bl	800bf88 <__mcmp>
 800af08:	2800      	cmp	r0, #0
 800af0a:	da6a      	bge.n	800afe2 <_dtoa_r+0x92a>
 800af0c:	2300      	movs	r3, #0
 800af0e:	4659      	mov	r1, fp
 800af10:	220a      	movs	r2, #10
 800af12:	4628      	mov	r0, r5
 800af14:	f000 fdd2 	bl	800babc <__multadd>
 800af18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af1a:	4683      	mov	fp, r0
 800af1c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800af20:	2b00      	cmp	r3, #0
 800af22:	f000 8194 	beq.w	800b24e <_dtoa_r+0xb96>
 800af26:	4631      	mov	r1, r6
 800af28:	2300      	movs	r3, #0
 800af2a:	220a      	movs	r2, #10
 800af2c:	4628      	mov	r0, r5
 800af2e:	f000 fdc5 	bl	800babc <__multadd>
 800af32:	f1b9 0f00 	cmp.w	r9, #0
 800af36:	4606      	mov	r6, r0
 800af38:	f300 8093 	bgt.w	800b062 <_dtoa_r+0x9aa>
 800af3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800af3e:	2b02      	cmp	r3, #2
 800af40:	dc57      	bgt.n	800aff2 <_dtoa_r+0x93a>
 800af42:	e08e      	b.n	800b062 <_dtoa_r+0x9aa>
 800af44:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800af46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800af4a:	e757      	b.n	800adfc <_dtoa_r+0x744>
 800af4c:	9b08      	ldr	r3, [sp, #32]
 800af4e:	1e5c      	subs	r4, r3, #1
 800af50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af52:	42a3      	cmp	r3, r4
 800af54:	bfb7      	itett	lt
 800af56:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800af58:	1b1c      	subge	r4, r3, r4
 800af5a:	1ae2      	sublt	r2, r4, r3
 800af5c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800af5e:	bfbe      	ittt	lt
 800af60:	940a      	strlt	r4, [sp, #40]	; 0x28
 800af62:	189b      	addlt	r3, r3, r2
 800af64:	930e      	strlt	r3, [sp, #56]	; 0x38
 800af66:	9b08      	ldr	r3, [sp, #32]
 800af68:	bfb8      	it	lt
 800af6a:	2400      	movlt	r4, #0
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	bfbb      	ittet	lt
 800af70:	9b06      	ldrlt	r3, [sp, #24]
 800af72:	9a08      	ldrlt	r2, [sp, #32]
 800af74:	9f06      	ldrge	r7, [sp, #24]
 800af76:	1a9f      	sublt	r7, r3, r2
 800af78:	bfac      	ite	ge
 800af7a:	9b08      	ldrge	r3, [sp, #32]
 800af7c:	2300      	movlt	r3, #0
 800af7e:	e73f      	b.n	800ae00 <_dtoa_r+0x748>
 800af80:	3fe00000 	.word	0x3fe00000
 800af84:	40240000 	.word	0x40240000
 800af88:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800af8a:	9f06      	ldr	r7, [sp, #24]
 800af8c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800af8e:	e742      	b.n	800ae16 <_dtoa_r+0x75e>
 800af90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af92:	e76b      	b.n	800ae6c <_dtoa_r+0x7b4>
 800af94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800af96:	2b01      	cmp	r3, #1
 800af98:	dc19      	bgt.n	800afce <_dtoa_r+0x916>
 800af9a:	9b04      	ldr	r3, [sp, #16]
 800af9c:	b9bb      	cbnz	r3, 800afce <_dtoa_r+0x916>
 800af9e:	9b05      	ldr	r3, [sp, #20]
 800afa0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800afa4:	b99b      	cbnz	r3, 800afce <_dtoa_r+0x916>
 800afa6:	9b05      	ldr	r3, [sp, #20]
 800afa8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800afac:	0d1b      	lsrs	r3, r3, #20
 800afae:	051b      	lsls	r3, r3, #20
 800afb0:	b183      	cbz	r3, 800afd4 <_dtoa_r+0x91c>
 800afb2:	f04f 0801 	mov.w	r8, #1
 800afb6:	9b06      	ldr	r3, [sp, #24]
 800afb8:	3301      	adds	r3, #1
 800afba:	9306      	str	r3, [sp, #24]
 800afbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afbe:	3301      	adds	r3, #1
 800afc0:	9309      	str	r3, [sp, #36]	; 0x24
 800afc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	f47f af6a 	bne.w	800ae9e <_dtoa_r+0x7e6>
 800afca:	2001      	movs	r0, #1
 800afcc:	e76f      	b.n	800aeae <_dtoa_r+0x7f6>
 800afce:	f04f 0800 	mov.w	r8, #0
 800afd2:	e7f6      	b.n	800afc2 <_dtoa_r+0x90a>
 800afd4:	4698      	mov	r8, r3
 800afd6:	e7f4      	b.n	800afc2 <_dtoa_r+0x90a>
 800afd8:	f43f af7d 	beq.w	800aed6 <_dtoa_r+0x81e>
 800afdc:	4618      	mov	r0, r3
 800afde:	301c      	adds	r0, #28
 800afe0:	e772      	b.n	800aec8 <_dtoa_r+0x810>
 800afe2:	9b08      	ldr	r3, [sp, #32]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	dc36      	bgt.n	800b056 <_dtoa_r+0x99e>
 800afe8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800afea:	2b02      	cmp	r3, #2
 800afec:	dd33      	ble.n	800b056 <_dtoa_r+0x99e>
 800afee:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aff2:	f1b9 0f00 	cmp.w	r9, #0
 800aff6:	d10d      	bne.n	800b014 <_dtoa_r+0x95c>
 800aff8:	4621      	mov	r1, r4
 800affa:	464b      	mov	r3, r9
 800affc:	2205      	movs	r2, #5
 800affe:	4628      	mov	r0, r5
 800b000:	f000 fd5c 	bl	800babc <__multadd>
 800b004:	4601      	mov	r1, r0
 800b006:	4604      	mov	r4, r0
 800b008:	4658      	mov	r0, fp
 800b00a:	f000 ffbd 	bl	800bf88 <__mcmp>
 800b00e:	2800      	cmp	r0, #0
 800b010:	f73f adb8 	bgt.w	800ab84 <_dtoa_r+0x4cc>
 800b014:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b016:	9f03      	ldr	r7, [sp, #12]
 800b018:	ea6f 0a03 	mvn.w	sl, r3
 800b01c:	f04f 0800 	mov.w	r8, #0
 800b020:	4621      	mov	r1, r4
 800b022:	4628      	mov	r0, r5
 800b024:	f000 fd28 	bl	800ba78 <_Bfree>
 800b028:	2e00      	cmp	r6, #0
 800b02a:	f43f aea7 	beq.w	800ad7c <_dtoa_r+0x6c4>
 800b02e:	f1b8 0f00 	cmp.w	r8, #0
 800b032:	d005      	beq.n	800b040 <_dtoa_r+0x988>
 800b034:	45b0      	cmp	r8, r6
 800b036:	d003      	beq.n	800b040 <_dtoa_r+0x988>
 800b038:	4641      	mov	r1, r8
 800b03a:	4628      	mov	r0, r5
 800b03c:	f000 fd1c 	bl	800ba78 <_Bfree>
 800b040:	4631      	mov	r1, r6
 800b042:	4628      	mov	r0, r5
 800b044:	f000 fd18 	bl	800ba78 <_Bfree>
 800b048:	e698      	b.n	800ad7c <_dtoa_r+0x6c4>
 800b04a:	2400      	movs	r4, #0
 800b04c:	4626      	mov	r6, r4
 800b04e:	e7e1      	b.n	800b014 <_dtoa_r+0x95c>
 800b050:	46c2      	mov	sl, r8
 800b052:	4626      	mov	r6, r4
 800b054:	e596      	b.n	800ab84 <_dtoa_r+0x4cc>
 800b056:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b058:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	f000 80fd 	beq.w	800b25c <_dtoa_r+0xba4>
 800b062:	2f00      	cmp	r7, #0
 800b064:	dd05      	ble.n	800b072 <_dtoa_r+0x9ba>
 800b066:	4631      	mov	r1, r6
 800b068:	463a      	mov	r2, r7
 800b06a:	4628      	mov	r0, r5
 800b06c:	f000 ff1c 	bl	800bea8 <__lshift>
 800b070:	4606      	mov	r6, r0
 800b072:	f1b8 0f00 	cmp.w	r8, #0
 800b076:	d05c      	beq.n	800b132 <_dtoa_r+0xa7a>
 800b078:	4628      	mov	r0, r5
 800b07a:	6871      	ldr	r1, [r6, #4]
 800b07c:	f000 fcbc 	bl	800b9f8 <_Balloc>
 800b080:	4607      	mov	r7, r0
 800b082:	b928      	cbnz	r0, 800b090 <_dtoa_r+0x9d8>
 800b084:	4602      	mov	r2, r0
 800b086:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b08a:	4b7f      	ldr	r3, [pc, #508]	; (800b288 <_dtoa_r+0xbd0>)
 800b08c:	f7ff bb28 	b.w	800a6e0 <_dtoa_r+0x28>
 800b090:	6932      	ldr	r2, [r6, #16]
 800b092:	f106 010c 	add.w	r1, r6, #12
 800b096:	3202      	adds	r2, #2
 800b098:	0092      	lsls	r2, r2, #2
 800b09a:	300c      	adds	r0, #12
 800b09c:	f000 fc9e 	bl	800b9dc <memcpy>
 800b0a0:	2201      	movs	r2, #1
 800b0a2:	4639      	mov	r1, r7
 800b0a4:	4628      	mov	r0, r5
 800b0a6:	f000 feff 	bl	800bea8 <__lshift>
 800b0aa:	46b0      	mov	r8, r6
 800b0ac:	4606      	mov	r6, r0
 800b0ae:	9b03      	ldr	r3, [sp, #12]
 800b0b0:	3301      	adds	r3, #1
 800b0b2:	9308      	str	r3, [sp, #32]
 800b0b4:	9b03      	ldr	r3, [sp, #12]
 800b0b6:	444b      	add	r3, r9
 800b0b8:	930a      	str	r3, [sp, #40]	; 0x28
 800b0ba:	9b04      	ldr	r3, [sp, #16]
 800b0bc:	f003 0301 	and.w	r3, r3, #1
 800b0c0:	9309      	str	r3, [sp, #36]	; 0x24
 800b0c2:	9b08      	ldr	r3, [sp, #32]
 800b0c4:	4621      	mov	r1, r4
 800b0c6:	3b01      	subs	r3, #1
 800b0c8:	4658      	mov	r0, fp
 800b0ca:	9304      	str	r3, [sp, #16]
 800b0cc:	f7ff fa66 	bl	800a59c <quorem>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	4641      	mov	r1, r8
 800b0d4:	3330      	adds	r3, #48	; 0x30
 800b0d6:	9006      	str	r0, [sp, #24]
 800b0d8:	4658      	mov	r0, fp
 800b0da:	930b      	str	r3, [sp, #44]	; 0x2c
 800b0dc:	f000 ff54 	bl	800bf88 <__mcmp>
 800b0e0:	4632      	mov	r2, r6
 800b0e2:	4681      	mov	r9, r0
 800b0e4:	4621      	mov	r1, r4
 800b0e6:	4628      	mov	r0, r5
 800b0e8:	f000 ff6a 	bl	800bfc0 <__mdiff>
 800b0ec:	68c2      	ldr	r2, [r0, #12]
 800b0ee:	4607      	mov	r7, r0
 800b0f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0f2:	bb02      	cbnz	r2, 800b136 <_dtoa_r+0xa7e>
 800b0f4:	4601      	mov	r1, r0
 800b0f6:	4658      	mov	r0, fp
 800b0f8:	f000 ff46 	bl	800bf88 <__mcmp>
 800b0fc:	4602      	mov	r2, r0
 800b0fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b100:	4639      	mov	r1, r7
 800b102:	4628      	mov	r0, r5
 800b104:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800b108:	f000 fcb6 	bl	800ba78 <_Bfree>
 800b10c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b10e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b110:	9f08      	ldr	r7, [sp, #32]
 800b112:	ea43 0102 	orr.w	r1, r3, r2
 800b116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b118:	430b      	orrs	r3, r1
 800b11a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b11c:	d10d      	bne.n	800b13a <_dtoa_r+0xa82>
 800b11e:	2b39      	cmp	r3, #57	; 0x39
 800b120:	d029      	beq.n	800b176 <_dtoa_r+0xabe>
 800b122:	f1b9 0f00 	cmp.w	r9, #0
 800b126:	dd01      	ble.n	800b12c <_dtoa_r+0xa74>
 800b128:	9b06      	ldr	r3, [sp, #24]
 800b12a:	3331      	adds	r3, #49	; 0x31
 800b12c:	9a04      	ldr	r2, [sp, #16]
 800b12e:	7013      	strb	r3, [r2, #0]
 800b130:	e776      	b.n	800b020 <_dtoa_r+0x968>
 800b132:	4630      	mov	r0, r6
 800b134:	e7b9      	b.n	800b0aa <_dtoa_r+0x9f2>
 800b136:	2201      	movs	r2, #1
 800b138:	e7e2      	b.n	800b100 <_dtoa_r+0xa48>
 800b13a:	f1b9 0f00 	cmp.w	r9, #0
 800b13e:	db06      	blt.n	800b14e <_dtoa_r+0xa96>
 800b140:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b142:	ea41 0909 	orr.w	r9, r1, r9
 800b146:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b148:	ea59 0101 	orrs.w	r1, r9, r1
 800b14c:	d120      	bne.n	800b190 <_dtoa_r+0xad8>
 800b14e:	2a00      	cmp	r2, #0
 800b150:	ddec      	ble.n	800b12c <_dtoa_r+0xa74>
 800b152:	4659      	mov	r1, fp
 800b154:	2201      	movs	r2, #1
 800b156:	4628      	mov	r0, r5
 800b158:	9308      	str	r3, [sp, #32]
 800b15a:	f000 fea5 	bl	800bea8 <__lshift>
 800b15e:	4621      	mov	r1, r4
 800b160:	4683      	mov	fp, r0
 800b162:	f000 ff11 	bl	800bf88 <__mcmp>
 800b166:	2800      	cmp	r0, #0
 800b168:	9b08      	ldr	r3, [sp, #32]
 800b16a:	dc02      	bgt.n	800b172 <_dtoa_r+0xaba>
 800b16c:	d1de      	bne.n	800b12c <_dtoa_r+0xa74>
 800b16e:	07da      	lsls	r2, r3, #31
 800b170:	d5dc      	bpl.n	800b12c <_dtoa_r+0xa74>
 800b172:	2b39      	cmp	r3, #57	; 0x39
 800b174:	d1d8      	bne.n	800b128 <_dtoa_r+0xa70>
 800b176:	2339      	movs	r3, #57	; 0x39
 800b178:	9a04      	ldr	r2, [sp, #16]
 800b17a:	7013      	strb	r3, [r2, #0]
 800b17c:	463b      	mov	r3, r7
 800b17e:	461f      	mov	r7, r3
 800b180:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800b184:	3b01      	subs	r3, #1
 800b186:	2a39      	cmp	r2, #57	; 0x39
 800b188:	d050      	beq.n	800b22c <_dtoa_r+0xb74>
 800b18a:	3201      	adds	r2, #1
 800b18c:	701a      	strb	r2, [r3, #0]
 800b18e:	e747      	b.n	800b020 <_dtoa_r+0x968>
 800b190:	2a00      	cmp	r2, #0
 800b192:	dd03      	ble.n	800b19c <_dtoa_r+0xae4>
 800b194:	2b39      	cmp	r3, #57	; 0x39
 800b196:	d0ee      	beq.n	800b176 <_dtoa_r+0xabe>
 800b198:	3301      	adds	r3, #1
 800b19a:	e7c7      	b.n	800b12c <_dtoa_r+0xa74>
 800b19c:	9a08      	ldr	r2, [sp, #32]
 800b19e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b1a0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b1a4:	428a      	cmp	r2, r1
 800b1a6:	d02a      	beq.n	800b1fe <_dtoa_r+0xb46>
 800b1a8:	4659      	mov	r1, fp
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	220a      	movs	r2, #10
 800b1ae:	4628      	mov	r0, r5
 800b1b0:	f000 fc84 	bl	800babc <__multadd>
 800b1b4:	45b0      	cmp	r8, r6
 800b1b6:	4683      	mov	fp, r0
 800b1b8:	f04f 0300 	mov.w	r3, #0
 800b1bc:	f04f 020a 	mov.w	r2, #10
 800b1c0:	4641      	mov	r1, r8
 800b1c2:	4628      	mov	r0, r5
 800b1c4:	d107      	bne.n	800b1d6 <_dtoa_r+0xb1e>
 800b1c6:	f000 fc79 	bl	800babc <__multadd>
 800b1ca:	4680      	mov	r8, r0
 800b1cc:	4606      	mov	r6, r0
 800b1ce:	9b08      	ldr	r3, [sp, #32]
 800b1d0:	3301      	adds	r3, #1
 800b1d2:	9308      	str	r3, [sp, #32]
 800b1d4:	e775      	b.n	800b0c2 <_dtoa_r+0xa0a>
 800b1d6:	f000 fc71 	bl	800babc <__multadd>
 800b1da:	4631      	mov	r1, r6
 800b1dc:	4680      	mov	r8, r0
 800b1de:	2300      	movs	r3, #0
 800b1e0:	220a      	movs	r2, #10
 800b1e2:	4628      	mov	r0, r5
 800b1e4:	f000 fc6a 	bl	800babc <__multadd>
 800b1e8:	4606      	mov	r6, r0
 800b1ea:	e7f0      	b.n	800b1ce <_dtoa_r+0xb16>
 800b1ec:	f1b9 0f00 	cmp.w	r9, #0
 800b1f0:	bfcc      	ite	gt
 800b1f2:	464f      	movgt	r7, r9
 800b1f4:	2701      	movle	r7, #1
 800b1f6:	f04f 0800 	mov.w	r8, #0
 800b1fa:	9a03      	ldr	r2, [sp, #12]
 800b1fc:	4417      	add	r7, r2
 800b1fe:	4659      	mov	r1, fp
 800b200:	2201      	movs	r2, #1
 800b202:	4628      	mov	r0, r5
 800b204:	9308      	str	r3, [sp, #32]
 800b206:	f000 fe4f 	bl	800bea8 <__lshift>
 800b20a:	4621      	mov	r1, r4
 800b20c:	4683      	mov	fp, r0
 800b20e:	f000 febb 	bl	800bf88 <__mcmp>
 800b212:	2800      	cmp	r0, #0
 800b214:	dcb2      	bgt.n	800b17c <_dtoa_r+0xac4>
 800b216:	d102      	bne.n	800b21e <_dtoa_r+0xb66>
 800b218:	9b08      	ldr	r3, [sp, #32]
 800b21a:	07db      	lsls	r3, r3, #31
 800b21c:	d4ae      	bmi.n	800b17c <_dtoa_r+0xac4>
 800b21e:	463b      	mov	r3, r7
 800b220:	461f      	mov	r7, r3
 800b222:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b226:	2a30      	cmp	r2, #48	; 0x30
 800b228:	d0fa      	beq.n	800b220 <_dtoa_r+0xb68>
 800b22a:	e6f9      	b.n	800b020 <_dtoa_r+0x968>
 800b22c:	9a03      	ldr	r2, [sp, #12]
 800b22e:	429a      	cmp	r2, r3
 800b230:	d1a5      	bne.n	800b17e <_dtoa_r+0xac6>
 800b232:	2331      	movs	r3, #49	; 0x31
 800b234:	f10a 0a01 	add.w	sl, sl, #1
 800b238:	e779      	b.n	800b12e <_dtoa_r+0xa76>
 800b23a:	4b14      	ldr	r3, [pc, #80]	; (800b28c <_dtoa_r+0xbd4>)
 800b23c:	f7ff baa8 	b.w	800a790 <_dtoa_r+0xd8>
 800b240:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b242:	2b00      	cmp	r3, #0
 800b244:	f47f aa81 	bne.w	800a74a <_dtoa_r+0x92>
 800b248:	4b11      	ldr	r3, [pc, #68]	; (800b290 <_dtoa_r+0xbd8>)
 800b24a:	f7ff baa1 	b.w	800a790 <_dtoa_r+0xd8>
 800b24e:	f1b9 0f00 	cmp.w	r9, #0
 800b252:	dc03      	bgt.n	800b25c <_dtoa_r+0xba4>
 800b254:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b256:	2b02      	cmp	r3, #2
 800b258:	f73f aecb 	bgt.w	800aff2 <_dtoa_r+0x93a>
 800b25c:	9f03      	ldr	r7, [sp, #12]
 800b25e:	4621      	mov	r1, r4
 800b260:	4658      	mov	r0, fp
 800b262:	f7ff f99b 	bl	800a59c <quorem>
 800b266:	9a03      	ldr	r2, [sp, #12]
 800b268:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b26c:	f807 3b01 	strb.w	r3, [r7], #1
 800b270:	1aba      	subs	r2, r7, r2
 800b272:	4591      	cmp	r9, r2
 800b274:	ddba      	ble.n	800b1ec <_dtoa_r+0xb34>
 800b276:	4659      	mov	r1, fp
 800b278:	2300      	movs	r3, #0
 800b27a:	220a      	movs	r2, #10
 800b27c:	4628      	mov	r0, r5
 800b27e:	f000 fc1d 	bl	800babc <__multadd>
 800b282:	4683      	mov	fp, r0
 800b284:	e7eb      	b.n	800b25e <_dtoa_r+0xba6>
 800b286:	bf00      	nop
 800b288:	0800d6b9 	.word	0x0800d6b9
 800b28c:	0800d424 	.word	0x0800d424
 800b290:	0800d651 	.word	0x0800d651

0800b294 <fiprintf>:
 800b294:	b40e      	push	{r1, r2, r3}
 800b296:	b503      	push	{r0, r1, lr}
 800b298:	4601      	mov	r1, r0
 800b29a:	ab03      	add	r3, sp, #12
 800b29c:	4805      	ldr	r0, [pc, #20]	; (800b2b4 <fiprintf+0x20>)
 800b29e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2a2:	6800      	ldr	r0, [r0, #0]
 800b2a4:	9301      	str	r3, [sp, #4]
 800b2a6:	f001 fad3 	bl	800c850 <_vfiprintf_r>
 800b2aa:	b002      	add	sp, #8
 800b2ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2b0:	b003      	add	sp, #12
 800b2b2:	4770      	bx	lr
 800b2b4:	2000017c 	.word	0x2000017c

0800b2b8 <rshift>:
 800b2b8:	6903      	ldr	r3, [r0, #16]
 800b2ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b2be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b2c2:	f100 0414 	add.w	r4, r0, #20
 800b2c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b2ca:	dd46      	ble.n	800b35a <rshift+0xa2>
 800b2cc:	f011 011f 	ands.w	r1, r1, #31
 800b2d0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b2d4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b2d8:	d10c      	bne.n	800b2f4 <rshift+0x3c>
 800b2da:	4629      	mov	r1, r5
 800b2dc:	f100 0710 	add.w	r7, r0, #16
 800b2e0:	42b1      	cmp	r1, r6
 800b2e2:	d335      	bcc.n	800b350 <rshift+0x98>
 800b2e4:	1a9b      	subs	r3, r3, r2
 800b2e6:	009b      	lsls	r3, r3, #2
 800b2e8:	1eea      	subs	r2, r5, #3
 800b2ea:	4296      	cmp	r6, r2
 800b2ec:	bf38      	it	cc
 800b2ee:	2300      	movcc	r3, #0
 800b2f0:	4423      	add	r3, r4
 800b2f2:	e015      	b.n	800b320 <rshift+0x68>
 800b2f4:	46a1      	mov	r9, r4
 800b2f6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b2fa:	f1c1 0820 	rsb	r8, r1, #32
 800b2fe:	40cf      	lsrs	r7, r1
 800b300:	f105 0e04 	add.w	lr, r5, #4
 800b304:	4576      	cmp	r6, lr
 800b306:	46f4      	mov	ip, lr
 800b308:	d816      	bhi.n	800b338 <rshift+0x80>
 800b30a:	1a9a      	subs	r2, r3, r2
 800b30c:	0092      	lsls	r2, r2, #2
 800b30e:	3a04      	subs	r2, #4
 800b310:	3501      	adds	r5, #1
 800b312:	42ae      	cmp	r6, r5
 800b314:	bf38      	it	cc
 800b316:	2200      	movcc	r2, #0
 800b318:	18a3      	adds	r3, r4, r2
 800b31a:	50a7      	str	r7, [r4, r2]
 800b31c:	b107      	cbz	r7, 800b320 <rshift+0x68>
 800b31e:	3304      	adds	r3, #4
 800b320:	42a3      	cmp	r3, r4
 800b322:	eba3 0204 	sub.w	r2, r3, r4
 800b326:	bf08      	it	eq
 800b328:	2300      	moveq	r3, #0
 800b32a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b32e:	6102      	str	r2, [r0, #16]
 800b330:	bf08      	it	eq
 800b332:	6143      	streq	r3, [r0, #20]
 800b334:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b338:	f8dc c000 	ldr.w	ip, [ip]
 800b33c:	fa0c fc08 	lsl.w	ip, ip, r8
 800b340:	ea4c 0707 	orr.w	r7, ip, r7
 800b344:	f849 7b04 	str.w	r7, [r9], #4
 800b348:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b34c:	40cf      	lsrs	r7, r1
 800b34e:	e7d9      	b.n	800b304 <rshift+0x4c>
 800b350:	f851 cb04 	ldr.w	ip, [r1], #4
 800b354:	f847 cf04 	str.w	ip, [r7, #4]!
 800b358:	e7c2      	b.n	800b2e0 <rshift+0x28>
 800b35a:	4623      	mov	r3, r4
 800b35c:	e7e0      	b.n	800b320 <rshift+0x68>

0800b35e <__hexdig_fun>:
 800b35e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b362:	2b09      	cmp	r3, #9
 800b364:	d802      	bhi.n	800b36c <__hexdig_fun+0xe>
 800b366:	3820      	subs	r0, #32
 800b368:	b2c0      	uxtb	r0, r0
 800b36a:	4770      	bx	lr
 800b36c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b370:	2b05      	cmp	r3, #5
 800b372:	d801      	bhi.n	800b378 <__hexdig_fun+0x1a>
 800b374:	3847      	subs	r0, #71	; 0x47
 800b376:	e7f7      	b.n	800b368 <__hexdig_fun+0xa>
 800b378:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b37c:	2b05      	cmp	r3, #5
 800b37e:	d801      	bhi.n	800b384 <__hexdig_fun+0x26>
 800b380:	3827      	subs	r0, #39	; 0x27
 800b382:	e7f1      	b.n	800b368 <__hexdig_fun+0xa>
 800b384:	2000      	movs	r0, #0
 800b386:	4770      	bx	lr

0800b388 <__gethex>:
 800b388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b38c:	b08b      	sub	sp, #44	; 0x2c
 800b38e:	9305      	str	r3, [sp, #20]
 800b390:	4bb2      	ldr	r3, [pc, #712]	; (800b65c <__gethex+0x2d4>)
 800b392:	9002      	str	r0, [sp, #8]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	468b      	mov	fp, r1
 800b398:	4618      	mov	r0, r3
 800b39a:	4690      	mov	r8, r2
 800b39c:	9303      	str	r3, [sp, #12]
 800b39e:	f7f4 fed7 	bl	8000150 <strlen>
 800b3a2:	4682      	mov	sl, r0
 800b3a4:	9b03      	ldr	r3, [sp, #12]
 800b3a6:	f8db 2000 	ldr.w	r2, [fp]
 800b3aa:	4403      	add	r3, r0
 800b3ac:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b3b0:	9306      	str	r3, [sp, #24]
 800b3b2:	1c93      	adds	r3, r2, #2
 800b3b4:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b3b8:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b3bc:	32fe      	adds	r2, #254	; 0xfe
 800b3be:	18d1      	adds	r1, r2, r3
 800b3c0:	461f      	mov	r7, r3
 800b3c2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b3c6:	9101      	str	r1, [sp, #4]
 800b3c8:	2830      	cmp	r0, #48	; 0x30
 800b3ca:	d0f8      	beq.n	800b3be <__gethex+0x36>
 800b3cc:	f7ff ffc7 	bl	800b35e <__hexdig_fun>
 800b3d0:	4604      	mov	r4, r0
 800b3d2:	2800      	cmp	r0, #0
 800b3d4:	d13a      	bne.n	800b44c <__gethex+0xc4>
 800b3d6:	4652      	mov	r2, sl
 800b3d8:	4638      	mov	r0, r7
 800b3da:	9903      	ldr	r1, [sp, #12]
 800b3dc:	f001 fb7e 	bl	800cadc <strncmp>
 800b3e0:	4605      	mov	r5, r0
 800b3e2:	2800      	cmp	r0, #0
 800b3e4:	d166      	bne.n	800b4b4 <__gethex+0x12c>
 800b3e6:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b3ea:	eb07 060a 	add.w	r6, r7, sl
 800b3ee:	f7ff ffb6 	bl	800b35e <__hexdig_fun>
 800b3f2:	2800      	cmp	r0, #0
 800b3f4:	d060      	beq.n	800b4b8 <__gethex+0x130>
 800b3f6:	4633      	mov	r3, r6
 800b3f8:	7818      	ldrb	r0, [r3, #0]
 800b3fa:	461f      	mov	r7, r3
 800b3fc:	2830      	cmp	r0, #48	; 0x30
 800b3fe:	f103 0301 	add.w	r3, r3, #1
 800b402:	d0f9      	beq.n	800b3f8 <__gethex+0x70>
 800b404:	f7ff ffab 	bl	800b35e <__hexdig_fun>
 800b408:	2301      	movs	r3, #1
 800b40a:	fab0 f480 	clz	r4, r0
 800b40e:	4635      	mov	r5, r6
 800b410:	0964      	lsrs	r4, r4, #5
 800b412:	9301      	str	r3, [sp, #4]
 800b414:	463a      	mov	r2, r7
 800b416:	4616      	mov	r6, r2
 800b418:	7830      	ldrb	r0, [r6, #0]
 800b41a:	3201      	adds	r2, #1
 800b41c:	f7ff ff9f 	bl	800b35e <__hexdig_fun>
 800b420:	2800      	cmp	r0, #0
 800b422:	d1f8      	bne.n	800b416 <__gethex+0x8e>
 800b424:	4652      	mov	r2, sl
 800b426:	4630      	mov	r0, r6
 800b428:	9903      	ldr	r1, [sp, #12]
 800b42a:	f001 fb57 	bl	800cadc <strncmp>
 800b42e:	b980      	cbnz	r0, 800b452 <__gethex+0xca>
 800b430:	b94d      	cbnz	r5, 800b446 <__gethex+0xbe>
 800b432:	eb06 050a 	add.w	r5, r6, sl
 800b436:	462a      	mov	r2, r5
 800b438:	4616      	mov	r6, r2
 800b43a:	7830      	ldrb	r0, [r6, #0]
 800b43c:	3201      	adds	r2, #1
 800b43e:	f7ff ff8e 	bl	800b35e <__hexdig_fun>
 800b442:	2800      	cmp	r0, #0
 800b444:	d1f8      	bne.n	800b438 <__gethex+0xb0>
 800b446:	1bad      	subs	r5, r5, r6
 800b448:	00ad      	lsls	r5, r5, #2
 800b44a:	e004      	b.n	800b456 <__gethex+0xce>
 800b44c:	2400      	movs	r4, #0
 800b44e:	4625      	mov	r5, r4
 800b450:	e7e0      	b.n	800b414 <__gethex+0x8c>
 800b452:	2d00      	cmp	r5, #0
 800b454:	d1f7      	bne.n	800b446 <__gethex+0xbe>
 800b456:	7833      	ldrb	r3, [r6, #0]
 800b458:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b45c:	2b50      	cmp	r3, #80	; 0x50
 800b45e:	d139      	bne.n	800b4d4 <__gethex+0x14c>
 800b460:	7873      	ldrb	r3, [r6, #1]
 800b462:	2b2b      	cmp	r3, #43	; 0x2b
 800b464:	d02a      	beq.n	800b4bc <__gethex+0x134>
 800b466:	2b2d      	cmp	r3, #45	; 0x2d
 800b468:	d02c      	beq.n	800b4c4 <__gethex+0x13c>
 800b46a:	f04f 0900 	mov.w	r9, #0
 800b46e:	1c71      	adds	r1, r6, #1
 800b470:	7808      	ldrb	r0, [r1, #0]
 800b472:	f7ff ff74 	bl	800b35e <__hexdig_fun>
 800b476:	1e43      	subs	r3, r0, #1
 800b478:	b2db      	uxtb	r3, r3
 800b47a:	2b18      	cmp	r3, #24
 800b47c:	d82a      	bhi.n	800b4d4 <__gethex+0x14c>
 800b47e:	f1a0 0210 	sub.w	r2, r0, #16
 800b482:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b486:	f7ff ff6a 	bl	800b35e <__hexdig_fun>
 800b48a:	1e43      	subs	r3, r0, #1
 800b48c:	b2db      	uxtb	r3, r3
 800b48e:	2b18      	cmp	r3, #24
 800b490:	d91b      	bls.n	800b4ca <__gethex+0x142>
 800b492:	f1b9 0f00 	cmp.w	r9, #0
 800b496:	d000      	beq.n	800b49a <__gethex+0x112>
 800b498:	4252      	negs	r2, r2
 800b49a:	4415      	add	r5, r2
 800b49c:	f8cb 1000 	str.w	r1, [fp]
 800b4a0:	b1d4      	cbz	r4, 800b4d8 <__gethex+0x150>
 800b4a2:	9b01      	ldr	r3, [sp, #4]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	bf14      	ite	ne
 800b4a8:	2700      	movne	r7, #0
 800b4aa:	2706      	moveq	r7, #6
 800b4ac:	4638      	mov	r0, r7
 800b4ae:	b00b      	add	sp, #44	; 0x2c
 800b4b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4b4:	463e      	mov	r6, r7
 800b4b6:	4625      	mov	r5, r4
 800b4b8:	2401      	movs	r4, #1
 800b4ba:	e7cc      	b.n	800b456 <__gethex+0xce>
 800b4bc:	f04f 0900 	mov.w	r9, #0
 800b4c0:	1cb1      	adds	r1, r6, #2
 800b4c2:	e7d5      	b.n	800b470 <__gethex+0xe8>
 800b4c4:	f04f 0901 	mov.w	r9, #1
 800b4c8:	e7fa      	b.n	800b4c0 <__gethex+0x138>
 800b4ca:	230a      	movs	r3, #10
 800b4cc:	fb03 0202 	mla	r2, r3, r2, r0
 800b4d0:	3a10      	subs	r2, #16
 800b4d2:	e7d6      	b.n	800b482 <__gethex+0xfa>
 800b4d4:	4631      	mov	r1, r6
 800b4d6:	e7e1      	b.n	800b49c <__gethex+0x114>
 800b4d8:	4621      	mov	r1, r4
 800b4da:	1bf3      	subs	r3, r6, r7
 800b4dc:	3b01      	subs	r3, #1
 800b4de:	2b07      	cmp	r3, #7
 800b4e0:	dc0a      	bgt.n	800b4f8 <__gethex+0x170>
 800b4e2:	9802      	ldr	r0, [sp, #8]
 800b4e4:	f000 fa88 	bl	800b9f8 <_Balloc>
 800b4e8:	4604      	mov	r4, r0
 800b4ea:	b940      	cbnz	r0, 800b4fe <__gethex+0x176>
 800b4ec:	4602      	mov	r2, r0
 800b4ee:	21de      	movs	r1, #222	; 0xde
 800b4f0:	4b5b      	ldr	r3, [pc, #364]	; (800b660 <__gethex+0x2d8>)
 800b4f2:	485c      	ldr	r0, [pc, #368]	; (800b664 <__gethex+0x2dc>)
 800b4f4:	f7ff f834 	bl	800a560 <__assert_func>
 800b4f8:	3101      	adds	r1, #1
 800b4fa:	105b      	asrs	r3, r3, #1
 800b4fc:	e7ef      	b.n	800b4de <__gethex+0x156>
 800b4fe:	f04f 0b00 	mov.w	fp, #0
 800b502:	f100 0914 	add.w	r9, r0, #20
 800b506:	f1ca 0301 	rsb	r3, sl, #1
 800b50a:	f8cd 9010 	str.w	r9, [sp, #16]
 800b50e:	f8cd b004 	str.w	fp, [sp, #4]
 800b512:	9308      	str	r3, [sp, #32]
 800b514:	42b7      	cmp	r7, r6
 800b516:	d33f      	bcc.n	800b598 <__gethex+0x210>
 800b518:	9f04      	ldr	r7, [sp, #16]
 800b51a:	9b01      	ldr	r3, [sp, #4]
 800b51c:	f847 3b04 	str.w	r3, [r7], #4
 800b520:	eba7 0709 	sub.w	r7, r7, r9
 800b524:	10bf      	asrs	r7, r7, #2
 800b526:	6127      	str	r7, [r4, #16]
 800b528:	4618      	mov	r0, r3
 800b52a:	f000 fb57 	bl	800bbdc <__hi0bits>
 800b52e:	017f      	lsls	r7, r7, #5
 800b530:	f8d8 6000 	ldr.w	r6, [r8]
 800b534:	1a3f      	subs	r7, r7, r0
 800b536:	42b7      	cmp	r7, r6
 800b538:	dd62      	ble.n	800b600 <__gethex+0x278>
 800b53a:	1bbf      	subs	r7, r7, r6
 800b53c:	4639      	mov	r1, r7
 800b53e:	4620      	mov	r0, r4
 800b540:	f000 fef1 	bl	800c326 <__any_on>
 800b544:	4682      	mov	sl, r0
 800b546:	b1a8      	cbz	r0, 800b574 <__gethex+0x1ec>
 800b548:	f04f 0a01 	mov.w	sl, #1
 800b54c:	1e7b      	subs	r3, r7, #1
 800b54e:	1159      	asrs	r1, r3, #5
 800b550:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b554:	f003 021f 	and.w	r2, r3, #31
 800b558:	fa0a f202 	lsl.w	r2, sl, r2
 800b55c:	420a      	tst	r2, r1
 800b55e:	d009      	beq.n	800b574 <__gethex+0x1ec>
 800b560:	4553      	cmp	r3, sl
 800b562:	dd05      	ble.n	800b570 <__gethex+0x1e8>
 800b564:	4620      	mov	r0, r4
 800b566:	1eb9      	subs	r1, r7, #2
 800b568:	f000 fedd 	bl	800c326 <__any_on>
 800b56c:	2800      	cmp	r0, #0
 800b56e:	d144      	bne.n	800b5fa <__gethex+0x272>
 800b570:	f04f 0a02 	mov.w	sl, #2
 800b574:	4639      	mov	r1, r7
 800b576:	4620      	mov	r0, r4
 800b578:	f7ff fe9e 	bl	800b2b8 <rshift>
 800b57c:	443d      	add	r5, r7
 800b57e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b582:	42ab      	cmp	r3, r5
 800b584:	da4a      	bge.n	800b61c <__gethex+0x294>
 800b586:	4621      	mov	r1, r4
 800b588:	9802      	ldr	r0, [sp, #8]
 800b58a:	f000 fa75 	bl	800ba78 <_Bfree>
 800b58e:	2300      	movs	r3, #0
 800b590:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b592:	27a3      	movs	r7, #163	; 0xa3
 800b594:	6013      	str	r3, [r2, #0]
 800b596:	e789      	b.n	800b4ac <__gethex+0x124>
 800b598:	1e73      	subs	r3, r6, #1
 800b59a:	9a06      	ldr	r2, [sp, #24]
 800b59c:	9307      	str	r3, [sp, #28]
 800b59e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	d019      	beq.n	800b5da <__gethex+0x252>
 800b5a6:	f1bb 0f20 	cmp.w	fp, #32
 800b5aa:	d107      	bne.n	800b5bc <__gethex+0x234>
 800b5ac:	9b04      	ldr	r3, [sp, #16]
 800b5ae:	9a01      	ldr	r2, [sp, #4]
 800b5b0:	f843 2b04 	str.w	r2, [r3], #4
 800b5b4:	9304      	str	r3, [sp, #16]
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	469b      	mov	fp, r3
 800b5ba:	9301      	str	r3, [sp, #4]
 800b5bc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b5c0:	f7ff fecd 	bl	800b35e <__hexdig_fun>
 800b5c4:	9b01      	ldr	r3, [sp, #4]
 800b5c6:	f000 000f 	and.w	r0, r0, #15
 800b5ca:	fa00 f00b 	lsl.w	r0, r0, fp
 800b5ce:	4303      	orrs	r3, r0
 800b5d0:	9301      	str	r3, [sp, #4]
 800b5d2:	f10b 0b04 	add.w	fp, fp, #4
 800b5d6:	9b07      	ldr	r3, [sp, #28]
 800b5d8:	e00d      	b.n	800b5f6 <__gethex+0x26e>
 800b5da:	9a08      	ldr	r2, [sp, #32]
 800b5dc:	1e73      	subs	r3, r6, #1
 800b5de:	4413      	add	r3, r2
 800b5e0:	42bb      	cmp	r3, r7
 800b5e2:	d3e0      	bcc.n	800b5a6 <__gethex+0x21e>
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	4652      	mov	r2, sl
 800b5e8:	9903      	ldr	r1, [sp, #12]
 800b5ea:	9309      	str	r3, [sp, #36]	; 0x24
 800b5ec:	f001 fa76 	bl	800cadc <strncmp>
 800b5f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5f2:	2800      	cmp	r0, #0
 800b5f4:	d1d7      	bne.n	800b5a6 <__gethex+0x21e>
 800b5f6:	461e      	mov	r6, r3
 800b5f8:	e78c      	b.n	800b514 <__gethex+0x18c>
 800b5fa:	f04f 0a03 	mov.w	sl, #3
 800b5fe:	e7b9      	b.n	800b574 <__gethex+0x1ec>
 800b600:	da09      	bge.n	800b616 <__gethex+0x28e>
 800b602:	1bf7      	subs	r7, r6, r7
 800b604:	4621      	mov	r1, r4
 800b606:	463a      	mov	r2, r7
 800b608:	9802      	ldr	r0, [sp, #8]
 800b60a:	f000 fc4d 	bl	800bea8 <__lshift>
 800b60e:	4604      	mov	r4, r0
 800b610:	1bed      	subs	r5, r5, r7
 800b612:	f100 0914 	add.w	r9, r0, #20
 800b616:	f04f 0a00 	mov.w	sl, #0
 800b61a:	e7b0      	b.n	800b57e <__gethex+0x1f6>
 800b61c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b620:	42a8      	cmp	r0, r5
 800b622:	dd72      	ble.n	800b70a <__gethex+0x382>
 800b624:	1b45      	subs	r5, r0, r5
 800b626:	42ae      	cmp	r6, r5
 800b628:	dc35      	bgt.n	800b696 <__gethex+0x30e>
 800b62a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b62e:	2b02      	cmp	r3, #2
 800b630:	d029      	beq.n	800b686 <__gethex+0x2fe>
 800b632:	2b03      	cmp	r3, #3
 800b634:	d02b      	beq.n	800b68e <__gethex+0x306>
 800b636:	2b01      	cmp	r3, #1
 800b638:	d11c      	bne.n	800b674 <__gethex+0x2ec>
 800b63a:	42ae      	cmp	r6, r5
 800b63c:	d11a      	bne.n	800b674 <__gethex+0x2ec>
 800b63e:	2e01      	cmp	r6, #1
 800b640:	d112      	bne.n	800b668 <__gethex+0x2e0>
 800b642:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b646:	9a05      	ldr	r2, [sp, #20]
 800b648:	2762      	movs	r7, #98	; 0x62
 800b64a:	6013      	str	r3, [r2, #0]
 800b64c:	2301      	movs	r3, #1
 800b64e:	6123      	str	r3, [r4, #16]
 800b650:	f8c9 3000 	str.w	r3, [r9]
 800b654:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b656:	601c      	str	r4, [r3, #0]
 800b658:	e728      	b.n	800b4ac <__gethex+0x124>
 800b65a:	bf00      	nop
 800b65c:	0800d730 	.word	0x0800d730
 800b660:	0800d6b9 	.word	0x0800d6b9
 800b664:	0800d6ca 	.word	0x0800d6ca
 800b668:	4620      	mov	r0, r4
 800b66a:	1e71      	subs	r1, r6, #1
 800b66c:	f000 fe5b 	bl	800c326 <__any_on>
 800b670:	2800      	cmp	r0, #0
 800b672:	d1e6      	bne.n	800b642 <__gethex+0x2ba>
 800b674:	4621      	mov	r1, r4
 800b676:	9802      	ldr	r0, [sp, #8]
 800b678:	f000 f9fe 	bl	800ba78 <_Bfree>
 800b67c:	2300      	movs	r3, #0
 800b67e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b680:	2750      	movs	r7, #80	; 0x50
 800b682:	6013      	str	r3, [r2, #0]
 800b684:	e712      	b.n	800b4ac <__gethex+0x124>
 800b686:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d1f3      	bne.n	800b674 <__gethex+0x2ec>
 800b68c:	e7d9      	b.n	800b642 <__gethex+0x2ba>
 800b68e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b690:	2b00      	cmp	r3, #0
 800b692:	d1d6      	bne.n	800b642 <__gethex+0x2ba>
 800b694:	e7ee      	b.n	800b674 <__gethex+0x2ec>
 800b696:	1e6f      	subs	r7, r5, #1
 800b698:	f1ba 0f00 	cmp.w	sl, #0
 800b69c:	d132      	bne.n	800b704 <__gethex+0x37c>
 800b69e:	b127      	cbz	r7, 800b6aa <__gethex+0x322>
 800b6a0:	4639      	mov	r1, r7
 800b6a2:	4620      	mov	r0, r4
 800b6a4:	f000 fe3f 	bl	800c326 <__any_on>
 800b6a8:	4682      	mov	sl, r0
 800b6aa:	2101      	movs	r1, #1
 800b6ac:	117b      	asrs	r3, r7, #5
 800b6ae:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b6b2:	f007 071f 	and.w	r7, r7, #31
 800b6b6:	fa01 f707 	lsl.w	r7, r1, r7
 800b6ba:	421f      	tst	r7, r3
 800b6bc:	f04f 0702 	mov.w	r7, #2
 800b6c0:	4629      	mov	r1, r5
 800b6c2:	4620      	mov	r0, r4
 800b6c4:	bf18      	it	ne
 800b6c6:	f04a 0a02 	orrne.w	sl, sl, #2
 800b6ca:	1b76      	subs	r6, r6, r5
 800b6cc:	f7ff fdf4 	bl	800b2b8 <rshift>
 800b6d0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b6d4:	f1ba 0f00 	cmp.w	sl, #0
 800b6d8:	d048      	beq.n	800b76c <__gethex+0x3e4>
 800b6da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b6de:	2b02      	cmp	r3, #2
 800b6e0:	d015      	beq.n	800b70e <__gethex+0x386>
 800b6e2:	2b03      	cmp	r3, #3
 800b6e4:	d017      	beq.n	800b716 <__gethex+0x38e>
 800b6e6:	2b01      	cmp	r3, #1
 800b6e8:	d109      	bne.n	800b6fe <__gethex+0x376>
 800b6ea:	f01a 0f02 	tst.w	sl, #2
 800b6ee:	d006      	beq.n	800b6fe <__gethex+0x376>
 800b6f0:	f8d9 0000 	ldr.w	r0, [r9]
 800b6f4:	ea4a 0a00 	orr.w	sl, sl, r0
 800b6f8:	f01a 0f01 	tst.w	sl, #1
 800b6fc:	d10e      	bne.n	800b71c <__gethex+0x394>
 800b6fe:	f047 0710 	orr.w	r7, r7, #16
 800b702:	e033      	b.n	800b76c <__gethex+0x3e4>
 800b704:	f04f 0a01 	mov.w	sl, #1
 800b708:	e7cf      	b.n	800b6aa <__gethex+0x322>
 800b70a:	2701      	movs	r7, #1
 800b70c:	e7e2      	b.n	800b6d4 <__gethex+0x34c>
 800b70e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b710:	f1c3 0301 	rsb	r3, r3, #1
 800b714:	9315      	str	r3, [sp, #84]	; 0x54
 800b716:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d0f0      	beq.n	800b6fe <__gethex+0x376>
 800b71c:	f04f 0c00 	mov.w	ip, #0
 800b720:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b724:	f104 0314 	add.w	r3, r4, #20
 800b728:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b72c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b730:	4618      	mov	r0, r3
 800b732:	f853 2b04 	ldr.w	r2, [r3], #4
 800b736:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800b73a:	d01c      	beq.n	800b776 <__gethex+0x3ee>
 800b73c:	3201      	adds	r2, #1
 800b73e:	6002      	str	r2, [r0, #0]
 800b740:	2f02      	cmp	r7, #2
 800b742:	f104 0314 	add.w	r3, r4, #20
 800b746:	d13d      	bne.n	800b7c4 <__gethex+0x43c>
 800b748:	f8d8 2000 	ldr.w	r2, [r8]
 800b74c:	3a01      	subs	r2, #1
 800b74e:	42b2      	cmp	r2, r6
 800b750:	d10a      	bne.n	800b768 <__gethex+0x3e0>
 800b752:	2201      	movs	r2, #1
 800b754:	1171      	asrs	r1, r6, #5
 800b756:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b75a:	f006 061f 	and.w	r6, r6, #31
 800b75e:	fa02 f606 	lsl.w	r6, r2, r6
 800b762:	421e      	tst	r6, r3
 800b764:	bf18      	it	ne
 800b766:	4617      	movne	r7, r2
 800b768:	f047 0720 	orr.w	r7, r7, #32
 800b76c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b76e:	601c      	str	r4, [r3, #0]
 800b770:	9b05      	ldr	r3, [sp, #20]
 800b772:	601d      	str	r5, [r3, #0]
 800b774:	e69a      	b.n	800b4ac <__gethex+0x124>
 800b776:	4299      	cmp	r1, r3
 800b778:	f843 cc04 	str.w	ip, [r3, #-4]
 800b77c:	d8d8      	bhi.n	800b730 <__gethex+0x3a8>
 800b77e:	68a3      	ldr	r3, [r4, #8]
 800b780:	459b      	cmp	fp, r3
 800b782:	db17      	blt.n	800b7b4 <__gethex+0x42c>
 800b784:	6861      	ldr	r1, [r4, #4]
 800b786:	9802      	ldr	r0, [sp, #8]
 800b788:	3101      	adds	r1, #1
 800b78a:	f000 f935 	bl	800b9f8 <_Balloc>
 800b78e:	4681      	mov	r9, r0
 800b790:	b918      	cbnz	r0, 800b79a <__gethex+0x412>
 800b792:	4602      	mov	r2, r0
 800b794:	2184      	movs	r1, #132	; 0x84
 800b796:	4b19      	ldr	r3, [pc, #100]	; (800b7fc <__gethex+0x474>)
 800b798:	e6ab      	b.n	800b4f2 <__gethex+0x16a>
 800b79a:	6922      	ldr	r2, [r4, #16]
 800b79c:	f104 010c 	add.w	r1, r4, #12
 800b7a0:	3202      	adds	r2, #2
 800b7a2:	0092      	lsls	r2, r2, #2
 800b7a4:	300c      	adds	r0, #12
 800b7a6:	f000 f919 	bl	800b9dc <memcpy>
 800b7aa:	4621      	mov	r1, r4
 800b7ac:	9802      	ldr	r0, [sp, #8]
 800b7ae:	f000 f963 	bl	800ba78 <_Bfree>
 800b7b2:	464c      	mov	r4, r9
 800b7b4:	6923      	ldr	r3, [r4, #16]
 800b7b6:	1c5a      	adds	r2, r3, #1
 800b7b8:	6122      	str	r2, [r4, #16]
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b7c0:	615a      	str	r2, [r3, #20]
 800b7c2:	e7bd      	b.n	800b740 <__gethex+0x3b8>
 800b7c4:	6922      	ldr	r2, [r4, #16]
 800b7c6:	455a      	cmp	r2, fp
 800b7c8:	dd0b      	ble.n	800b7e2 <__gethex+0x45a>
 800b7ca:	2101      	movs	r1, #1
 800b7cc:	4620      	mov	r0, r4
 800b7ce:	f7ff fd73 	bl	800b2b8 <rshift>
 800b7d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b7d6:	3501      	adds	r5, #1
 800b7d8:	42ab      	cmp	r3, r5
 800b7da:	f6ff aed4 	blt.w	800b586 <__gethex+0x1fe>
 800b7de:	2701      	movs	r7, #1
 800b7e0:	e7c2      	b.n	800b768 <__gethex+0x3e0>
 800b7e2:	f016 061f 	ands.w	r6, r6, #31
 800b7e6:	d0fa      	beq.n	800b7de <__gethex+0x456>
 800b7e8:	4453      	add	r3, sl
 800b7ea:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b7ee:	f000 f9f5 	bl	800bbdc <__hi0bits>
 800b7f2:	f1c6 0620 	rsb	r6, r6, #32
 800b7f6:	42b0      	cmp	r0, r6
 800b7f8:	dbe7      	blt.n	800b7ca <__gethex+0x442>
 800b7fa:	e7f0      	b.n	800b7de <__gethex+0x456>
 800b7fc:	0800d6b9 	.word	0x0800d6b9

0800b800 <L_shift>:
 800b800:	f1c2 0208 	rsb	r2, r2, #8
 800b804:	0092      	lsls	r2, r2, #2
 800b806:	b570      	push	{r4, r5, r6, lr}
 800b808:	f1c2 0620 	rsb	r6, r2, #32
 800b80c:	6843      	ldr	r3, [r0, #4]
 800b80e:	6804      	ldr	r4, [r0, #0]
 800b810:	fa03 f506 	lsl.w	r5, r3, r6
 800b814:	432c      	orrs	r4, r5
 800b816:	40d3      	lsrs	r3, r2
 800b818:	6004      	str	r4, [r0, #0]
 800b81a:	f840 3f04 	str.w	r3, [r0, #4]!
 800b81e:	4288      	cmp	r0, r1
 800b820:	d3f4      	bcc.n	800b80c <L_shift+0xc>
 800b822:	bd70      	pop	{r4, r5, r6, pc}

0800b824 <__match>:
 800b824:	b530      	push	{r4, r5, lr}
 800b826:	6803      	ldr	r3, [r0, #0]
 800b828:	3301      	adds	r3, #1
 800b82a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b82e:	b914      	cbnz	r4, 800b836 <__match+0x12>
 800b830:	6003      	str	r3, [r0, #0]
 800b832:	2001      	movs	r0, #1
 800b834:	bd30      	pop	{r4, r5, pc}
 800b836:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b83a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b83e:	2d19      	cmp	r5, #25
 800b840:	bf98      	it	ls
 800b842:	3220      	addls	r2, #32
 800b844:	42a2      	cmp	r2, r4
 800b846:	d0f0      	beq.n	800b82a <__match+0x6>
 800b848:	2000      	movs	r0, #0
 800b84a:	e7f3      	b.n	800b834 <__match+0x10>

0800b84c <__hexnan>:
 800b84c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b850:	2500      	movs	r5, #0
 800b852:	680b      	ldr	r3, [r1, #0]
 800b854:	4682      	mov	sl, r0
 800b856:	115e      	asrs	r6, r3, #5
 800b858:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b85c:	f013 031f 	ands.w	r3, r3, #31
 800b860:	bf18      	it	ne
 800b862:	3604      	addne	r6, #4
 800b864:	1f37      	subs	r7, r6, #4
 800b866:	46b9      	mov	r9, r7
 800b868:	463c      	mov	r4, r7
 800b86a:	46ab      	mov	fp, r5
 800b86c:	b087      	sub	sp, #28
 800b86e:	4690      	mov	r8, r2
 800b870:	6802      	ldr	r2, [r0, #0]
 800b872:	9301      	str	r3, [sp, #4]
 800b874:	f846 5c04 	str.w	r5, [r6, #-4]
 800b878:	9502      	str	r5, [sp, #8]
 800b87a:	7851      	ldrb	r1, [r2, #1]
 800b87c:	1c53      	adds	r3, r2, #1
 800b87e:	9303      	str	r3, [sp, #12]
 800b880:	b341      	cbz	r1, 800b8d4 <__hexnan+0x88>
 800b882:	4608      	mov	r0, r1
 800b884:	9205      	str	r2, [sp, #20]
 800b886:	9104      	str	r1, [sp, #16]
 800b888:	f7ff fd69 	bl	800b35e <__hexdig_fun>
 800b88c:	2800      	cmp	r0, #0
 800b88e:	d14f      	bne.n	800b930 <__hexnan+0xe4>
 800b890:	9904      	ldr	r1, [sp, #16]
 800b892:	9a05      	ldr	r2, [sp, #20]
 800b894:	2920      	cmp	r1, #32
 800b896:	d818      	bhi.n	800b8ca <__hexnan+0x7e>
 800b898:	9b02      	ldr	r3, [sp, #8]
 800b89a:	459b      	cmp	fp, r3
 800b89c:	dd13      	ble.n	800b8c6 <__hexnan+0x7a>
 800b89e:	454c      	cmp	r4, r9
 800b8a0:	d206      	bcs.n	800b8b0 <__hexnan+0x64>
 800b8a2:	2d07      	cmp	r5, #7
 800b8a4:	dc04      	bgt.n	800b8b0 <__hexnan+0x64>
 800b8a6:	462a      	mov	r2, r5
 800b8a8:	4649      	mov	r1, r9
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	f7ff ffa8 	bl	800b800 <L_shift>
 800b8b0:	4544      	cmp	r4, r8
 800b8b2:	d950      	bls.n	800b956 <__hexnan+0x10a>
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	f1a4 0904 	sub.w	r9, r4, #4
 800b8ba:	f844 3c04 	str.w	r3, [r4, #-4]
 800b8be:	461d      	mov	r5, r3
 800b8c0:	464c      	mov	r4, r9
 800b8c2:	f8cd b008 	str.w	fp, [sp, #8]
 800b8c6:	9a03      	ldr	r2, [sp, #12]
 800b8c8:	e7d7      	b.n	800b87a <__hexnan+0x2e>
 800b8ca:	2929      	cmp	r1, #41	; 0x29
 800b8cc:	d156      	bne.n	800b97c <__hexnan+0x130>
 800b8ce:	3202      	adds	r2, #2
 800b8d0:	f8ca 2000 	str.w	r2, [sl]
 800b8d4:	f1bb 0f00 	cmp.w	fp, #0
 800b8d8:	d050      	beq.n	800b97c <__hexnan+0x130>
 800b8da:	454c      	cmp	r4, r9
 800b8dc:	d206      	bcs.n	800b8ec <__hexnan+0xa0>
 800b8de:	2d07      	cmp	r5, #7
 800b8e0:	dc04      	bgt.n	800b8ec <__hexnan+0xa0>
 800b8e2:	462a      	mov	r2, r5
 800b8e4:	4649      	mov	r1, r9
 800b8e6:	4620      	mov	r0, r4
 800b8e8:	f7ff ff8a 	bl	800b800 <L_shift>
 800b8ec:	4544      	cmp	r4, r8
 800b8ee:	d934      	bls.n	800b95a <__hexnan+0x10e>
 800b8f0:	4623      	mov	r3, r4
 800b8f2:	f1a8 0204 	sub.w	r2, r8, #4
 800b8f6:	f853 1b04 	ldr.w	r1, [r3], #4
 800b8fa:	429f      	cmp	r7, r3
 800b8fc:	f842 1f04 	str.w	r1, [r2, #4]!
 800b900:	d2f9      	bcs.n	800b8f6 <__hexnan+0xaa>
 800b902:	1b3b      	subs	r3, r7, r4
 800b904:	f023 0303 	bic.w	r3, r3, #3
 800b908:	3304      	adds	r3, #4
 800b90a:	3401      	adds	r4, #1
 800b90c:	3e03      	subs	r6, #3
 800b90e:	42b4      	cmp	r4, r6
 800b910:	bf88      	it	hi
 800b912:	2304      	movhi	r3, #4
 800b914:	2200      	movs	r2, #0
 800b916:	4443      	add	r3, r8
 800b918:	f843 2b04 	str.w	r2, [r3], #4
 800b91c:	429f      	cmp	r7, r3
 800b91e:	d2fb      	bcs.n	800b918 <__hexnan+0xcc>
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	b91b      	cbnz	r3, 800b92c <__hexnan+0xe0>
 800b924:	4547      	cmp	r7, r8
 800b926:	d127      	bne.n	800b978 <__hexnan+0x12c>
 800b928:	2301      	movs	r3, #1
 800b92a:	603b      	str	r3, [r7, #0]
 800b92c:	2005      	movs	r0, #5
 800b92e:	e026      	b.n	800b97e <__hexnan+0x132>
 800b930:	3501      	adds	r5, #1
 800b932:	2d08      	cmp	r5, #8
 800b934:	f10b 0b01 	add.w	fp, fp, #1
 800b938:	dd06      	ble.n	800b948 <__hexnan+0xfc>
 800b93a:	4544      	cmp	r4, r8
 800b93c:	d9c3      	bls.n	800b8c6 <__hexnan+0x7a>
 800b93e:	2300      	movs	r3, #0
 800b940:	2501      	movs	r5, #1
 800b942:	f844 3c04 	str.w	r3, [r4, #-4]
 800b946:	3c04      	subs	r4, #4
 800b948:	6822      	ldr	r2, [r4, #0]
 800b94a:	f000 000f 	and.w	r0, r0, #15
 800b94e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b952:	6022      	str	r2, [r4, #0]
 800b954:	e7b7      	b.n	800b8c6 <__hexnan+0x7a>
 800b956:	2508      	movs	r5, #8
 800b958:	e7b5      	b.n	800b8c6 <__hexnan+0x7a>
 800b95a:	9b01      	ldr	r3, [sp, #4]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d0df      	beq.n	800b920 <__hexnan+0xd4>
 800b960:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b964:	f1c3 0320 	rsb	r3, r3, #32
 800b968:	fa22 f303 	lsr.w	r3, r2, r3
 800b96c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b970:	401a      	ands	r2, r3
 800b972:	f846 2c04 	str.w	r2, [r6, #-4]
 800b976:	e7d3      	b.n	800b920 <__hexnan+0xd4>
 800b978:	3f04      	subs	r7, #4
 800b97a:	e7d1      	b.n	800b920 <__hexnan+0xd4>
 800b97c:	2004      	movs	r0, #4
 800b97e:	b007      	add	sp, #28
 800b980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b984 <_localeconv_r>:
 800b984:	4800      	ldr	r0, [pc, #0]	; (800b988 <_localeconv_r+0x4>)
 800b986:	4770      	bx	lr
 800b988:	200002d4 	.word	0x200002d4

0800b98c <malloc>:
 800b98c:	4b02      	ldr	r3, [pc, #8]	; (800b998 <malloc+0xc>)
 800b98e:	4601      	mov	r1, r0
 800b990:	6818      	ldr	r0, [r3, #0]
 800b992:	f000 bd65 	b.w	800c460 <_malloc_r>
 800b996:	bf00      	nop
 800b998:	2000017c 	.word	0x2000017c

0800b99c <__ascii_mbtowc>:
 800b99c:	b082      	sub	sp, #8
 800b99e:	b901      	cbnz	r1, 800b9a2 <__ascii_mbtowc+0x6>
 800b9a0:	a901      	add	r1, sp, #4
 800b9a2:	b142      	cbz	r2, 800b9b6 <__ascii_mbtowc+0x1a>
 800b9a4:	b14b      	cbz	r3, 800b9ba <__ascii_mbtowc+0x1e>
 800b9a6:	7813      	ldrb	r3, [r2, #0]
 800b9a8:	600b      	str	r3, [r1, #0]
 800b9aa:	7812      	ldrb	r2, [r2, #0]
 800b9ac:	1e10      	subs	r0, r2, #0
 800b9ae:	bf18      	it	ne
 800b9b0:	2001      	movne	r0, #1
 800b9b2:	b002      	add	sp, #8
 800b9b4:	4770      	bx	lr
 800b9b6:	4610      	mov	r0, r2
 800b9b8:	e7fb      	b.n	800b9b2 <__ascii_mbtowc+0x16>
 800b9ba:	f06f 0001 	mvn.w	r0, #1
 800b9be:	e7f8      	b.n	800b9b2 <__ascii_mbtowc+0x16>

0800b9c0 <memchr>:
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	b510      	push	{r4, lr}
 800b9c4:	b2c9      	uxtb	r1, r1
 800b9c6:	4402      	add	r2, r0
 800b9c8:	4293      	cmp	r3, r2
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	d101      	bne.n	800b9d2 <memchr+0x12>
 800b9ce:	2000      	movs	r0, #0
 800b9d0:	e003      	b.n	800b9da <memchr+0x1a>
 800b9d2:	7804      	ldrb	r4, [r0, #0]
 800b9d4:	3301      	adds	r3, #1
 800b9d6:	428c      	cmp	r4, r1
 800b9d8:	d1f6      	bne.n	800b9c8 <memchr+0x8>
 800b9da:	bd10      	pop	{r4, pc}

0800b9dc <memcpy>:
 800b9dc:	440a      	add	r2, r1
 800b9de:	4291      	cmp	r1, r2
 800b9e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b9e4:	d100      	bne.n	800b9e8 <memcpy+0xc>
 800b9e6:	4770      	bx	lr
 800b9e8:	b510      	push	{r4, lr}
 800b9ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9ee:	4291      	cmp	r1, r2
 800b9f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b9f4:	d1f9      	bne.n	800b9ea <memcpy+0xe>
 800b9f6:	bd10      	pop	{r4, pc}

0800b9f8 <_Balloc>:
 800b9f8:	b570      	push	{r4, r5, r6, lr}
 800b9fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b9fc:	4604      	mov	r4, r0
 800b9fe:	460d      	mov	r5, r1
 800ba00:	b976      	cbnz	r6, 800ba20 <_Balloc+0x28>
 800ba02:	2010      	movs	r0, #16
 800ba04:	f7ff ffc2 	bl	800b98c <malloc>
 800ba08:	4602      	mov	r2, r0
 800ba0a:	6260      	str	r0, [r4, #36]	; 0x24
 800ba0c:	b920      	cbnz	r0, 800ba18 <_Balloc+0x20>
 800ba0e:	2166      	movs	r1, #102	; 0x66
 800ba10:	4b17      	ldr	r3, [pc, #92]	; (800ba70 <_Balloc+0x78>)
 800ba12:	4818      	ldr	r0, [pc, #96]	; (800ba74 <_Balloc+0x7c>)
 800ba14:	f7fe fda4 	bl	800a560 <__assert_func>
 800ba18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba1c:	6006      	str	r6, [r0, #0]
 800ba1e:	60c6      	str	r6, [r0, #12]
 800ba20:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ba22:	68f3      	ldr	r3, [r6, #12]
 800ba24:	b183      	cbz	r3, 800ba48 <_Balloc+0x50>
 800ba26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba28:	68db      	ldr	r3, [r3, #12]
 800ba2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ba2e:	b9b8      	cbnz	r0, 800ba60 <_Balloc+0x68>
 800ba30:	2101      	movs	r1, #1
 800ba32:	fa01 f605 	lsl.w	r6, r1, r5
 800ba36:	1d72      	adds	r2, r6, #5
 800ba38:	4620      	mov	r0, r4
 800ba3a:	0092      	lsls	r2, r2, #2
 800ba3c:	f000 fc94 	bl	800c368 <_calloc_r>
 800ba40:	b160      	cbz	r0, 800ba5c <_Balloc+0x64>
 800ba42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ba46:	e00e      	b.n	800ba66 <_Balloc+0x6e>
 800ba48:	2221      	movs	r2, #33	; 0x21
 800ba4a:	2104      	movs	r1, #4
 800ba4c:	4620      	mov	r0, r4
 800ba4e:	f000 fc8b 	bl	800c368 <_calloc_r>
 800ba52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba54:	60f0      	str	r0, [r6, #12]
 800ba56:	68db      	ldr	r3, [r3, #12]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d1e4      	bne.n	800ba26 <_Balloc+0x2e>
 800ba5c:	2000      	movs	r0, #0
 800ba5e:	bd70      	pop	{r4, r5, r6, pc}
 800ba60:	6802      	ldr	r2, [r0, #0]
 800ba62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ba66:	2300      	movs	r3, #0
 800ba68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ba6c:	e7f7      	b.n	800ba5e <_Balloc+0x66>
 800ba6e:	bf00      	nop
 800ba70:	0800d4a0 	.word	0x0800d4a0
 800ba74:	0800d744 	.word	0x0800d744

0800ba78 <_Bfree>:
 800ba78:	b570      	push	{r4, r5, r6, lr}
 800ba7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ba7c:	4605      	mov	r5, r0
 800ba7e:	460c      	mov	r4, r1
 800ba80:	b976      	cbnz	r6, 800baa0 <_Bfree+0x28>
 800ba82:	2010      	movs	r0, #16
 800ba84:	f7ff ff82 	bl	800b98c <malloc>
 800ba88:	4602      	mov	r2, r0
 800ba8a:	6268      	str	r0, [r5, #36]	; 0x24
 800ba8c:	b920      	cbnz	r0, 800ba98 <_Bfree+0x20>
 800ba8e:	218a      	movs	r1, #138	; 0x8a
 800ba90:	4b08      	ldr	r3, [pc, #32]	; (800bab4 <_Bfree+0x3c>)
 800ba92:	4809      	ldr	r0, [pc, #36]	; (800bab8 <_Bfree+0x40>)
 800ba94:	f7fe fd64 	bl	800a560 <__assert_func>
 800ba98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba9c:	6006      	str	r6, [r0, #0]
 800ba9e:	60c6      	str	r6, [r0, #12]
 800baa0:	b13c      	cbz	r4, 800bab2 <_Bfree+0x3a>
 800baa2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800baa4:	6862      	ldr	r2, [r4, #4]
 800baa6:	68db      	ldr	r3, [r3, #12]
 800baa8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800baac:	6021      	str	r1, [r4, #0]
 800baae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bab2:	bd70      	pop	{r4, r5, r6, pc}
 800bab4:	0800d4a0 	.word	0x0800d4a0
 800bab8:	0800d744 	.word	0x0800d744

0800babc <__multadd>:
 800babc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bac0:	4607      	mov	r7, r0
 800bac2:	460c      	mov	r4, r1
 800bac4:	461e      	mov	r6, r3
 800bac6:	2000      	movs	r0, #0
 800bac8:	690d      	ldr	r5, [r1, #16]
 800baca:	f101 0c14 	add.w	ip, r1, #20
 800bace:	f8dc 3000 	ldr.w	r3, [ip]
 800bad2:	3001      	adds	r0, #1
 800bad4:	b299      	uxth	r1, r3
 800bad6:	fb02 6101 	mla	r1, r2, r1, r6
 800bada:	0c1e      	lsrs	r6, r3, #16
 800badc:	0c0b      	lsrs	r3, r1, #16
 800bade:	fb02 3306 	mla	r3, r2, r6, r3
 800bae2:	b289      	uxth	r1, r1
 800bae4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bae8:	4285      	cmp	r5, r0
 800baea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800baee:	f84c 1b04 	str.w	r1, [ip], #4
 800baf2:	dcec      	bgt.n	800bace <__multadd+0x12>
 800baf4:	b30e      	cbz	r6, 800bb3a <__multadd+0x7e>
 800baf6:	68a3      	ldr	r3, [r4, #8]
 800baf8:	42ab      	cmp	r3, r5
 800bafa:	dc19      	bgt.n	800bb30 <__multadd+0x74>
 800bafc:	6861      	ldr	r1, [r4, #4]
 800bafe:	4638      	mov	r0, r7
 800bb00:	3101      	adds	r1, #1
 800bb02:	f7ff ff79 	bl	800b9f8 <_Balloc>
 800bb06:	4680      	mov	r8, r0
 800bb08:	b928      	cbnz	r0, 800bb16 <__multadd+0x5a>
 800bb0a:	4602      	mov	r2, r0
 800bb0c:	21b5      	movs	r1, #181	; 0xb5
 800bb0e:	4b0c      	ldr	r3, [pc, #48]	; (800bb40 <__multadd+0x84>)
 800bb10:	480c      	ldr	r0, [pc, #48]	; (800bb44 <__multadd+0x88>)
 800bb12:	f7fe fd25 	bl	800a560 <__assert_func>
 800bb16:	6922      	ldr	r2, [r4, #16]
 800bb18:	f104 010c 	add.w	r1, r4, #12
 800bb1c:	3202      	adds	r2, #2
 800bb1e:	0092      	lsls	r2, r2, #2
 800bb20:	300c      	adds	r0, #12
 800bb22:	f7ff ff5b 	bl	800b9dc <memcpy>
 800bb26:	4621      	mov	r1, r4
 800bb28:	4638      	mov	r0, r7
 800bb2a:	f7ff ffa5 	bl	800ba78 <_Bfree>
 800bb2e:	4644      	mov	r4, r8
 800bb30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bb34:	3501      	adds	r5, #1
 800bb36:	615e      	str	r6, [r3, #20]
 800bb38:	6125      	str	r5, [r4, #16]
 800bb3a:	4620      	mov	r0, r4
 800bb3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb40:	0800d6b9 	.word	0x0800d6b9
 800bb44:	0800d744 	.word	0x0800d744

0800bb48 <__s2b>:
 800bb48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb4c:	4615      	mov	r5, r2
 800bb4e:	2209      	movs	r2, #9
 800bb50:	461f      	mov	r7, r3
 800bb52:	3308      	adds	r3, #8
 800bb54:	460c      	mov	r4, r1
 800bb56:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb5a:	4606      	mov	r6, r0
 800bb5c:	2201      	movs	r2, #1
 800bb5e:	2100      	movs	r1, #0
 800bb60:	429a      	cmp	r2, r3
 800bb62:	db09      	blt.n	800bb78 <__s2b+0x30>
 800bb64:	4630      	mov	r0, r6
 800bb66:	f7ff ff47 	bl	800b9f8 <_Balloc>
 800bb6a:	b940      	cbnz	r0, 800bb7e <__s2b+0x36>
 800bb6c:	4602      	mov	r2, r0
 800bb6e:	21ce      	movs	r1, #206	; 0xce
 800bb70:	4b18      	ldr	r3, [pc, #96]	; (800bbd4 <__s2b+0x8c>)
 800bb72:	4819      	ldr	r0, [pc, #100]	; (800bbd8 <__s2b+0x90>)
 800bb74:	f7fe fcf4 	bl	800a560 <__assert_func>
 800bb78:	0052      	lsls	r2, r2, #1
 800bb7a:	3101      	adds	r1, #1
 800bb7c:	e7f0      	b.n	800bb60 <__s2b+0x18>
 800bb7e:	9b08      	ldr	r3, [sp, #32]
 800bb80:	2d09      	cmp	r5, #9
 800bb82:	6143      	str	r3, [r0, #20]
 800bb84:	f04f 0301 	mov.w	r3, #1
 800bb88:	6103      	str	r3, [r0, #16]
 800bb8a:	dd16      	ble.n	800bbba <__s2b+0x72>
 800bb8c:	f104 0909 	add.w	r9, r4, #9
 800bb90:	46c8      	mov	r8, r9
 800bb92:	442c      	add	r4, r5
 800bb94:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bb98:	4601      	mov	r1, r0
 800bb9a:	220a      	movs	r2, #10
 800bb9c:	4630      	mov	r0, r6
 800bb9e:	3b30      	subs	r3, #48	; 0x30
 800bba0:	f7ff ff8c 	bl	800babc <__multadd>
 800bba4:	45a0      	cmp	r8, r4
 800bba6:	d1f5      	bne.n	800bb94 <__s2b+0x4c>
 800bba8:	f1a5 0408 	sub.w	r4, r5, #8
 800bbac:	444c      	add	r4, r9
 800bbae:	1b2d      	subs	r5, r5, r4
 800bbb0:	1963      	adds	r3, r4, r5
 800bbb2:	42bb      	cmp	r3, r7
 800bbb4:	db04      	blt.n	800bbc0 <__s2b+0x78>
 800bbb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbba:	2509      	movs	r5, #9
 800bbbc:	340a      	adds	r4, #10
 800bbbe:	e7f6      	b.n	800bbae <__s2b+0x66>
 800bbc0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bbc4:	4601      	mov	r1, r0
 800bbc6:	220a      	movs	r2, #10
 800bbc8:	4630      	mov	r0, r6
 800bbca:	3b30      	subs	r3, #48	; 0x30
 800bbcc:	f7ff ff76 	bl	800babc <__multadd>
 800bbd0:	e7ee      	b.n	800bbb0 <__s2b+0x68>
 800bbd2:	bf00      	nop
 800bbd4:	0800d6b9 	.word	0x0800d6b9
 800bbd8:	0800d744 	.word	0x0800d744

0800bbdc <__hi0bits>:
 800bbdc:	0c02      	lsrs	r2, r0, #16
 800bbde:	0412      	lsls	r2, r2, #16
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	b9ca      	cbnz	r2, 800bc18 <__hi0bits+0x3c>
 800bbe4:	0403      	lsls	r3, r0, #16
 800bbe6:	2010      	movs	r0, #16
 800bbe8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800bbec:	bf04      	itt	eq
 800bbee:	021b      	lsleq	r3, r3, #8
 800bbf0:	3008      	addeq	r0, #8
 800bbf2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800bbf6:	bf04      	itt	eq
 800bbf8:	011b      	lsleq	r3, r3, #4
 800bbfa:	3004      	addeq	r0, #4
 800bbfc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800bc00:	bf04      	itt	eq
 800bc02:	009b      	lsleq	r3, r3, #2
 800bc04:	3002      	addeq	r0, #2
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	db05      	blt.n	800bc16 <__hi0bits+0x3a>
 800bc0a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800bc0e:	f100 0001 	add.w	r0, r0, #1
 800bc12:	bf08      	it	eq
 800bc14:	2020      	moveq	r0, #32
 800bc16:	4770      	bx	lr
 800bc18:	2000      	movs	r0, #0
 800bc1a:	e7e5      	b.n	800bbe8 <__hi0bits+0xc>

0800bc1c <__lo0bits>:
 800bc1c:	6803      	ldr	r3, [r0, #0]
 800bc1e:	4602      	mov	r2, r0
 800bc20:	f013 0007 	ands.w	r0, r3, #7
 800bc24:	d00b      	beq.n	800bc3e <__lo0bits+0x22>
 800bc26:	07d9      	lsls	r1, r3, #31
 800bc28:	d421      	bmi.n	800bc6e <__lo0bits+0x52>
 800bc2a:	0798      	lsls	r0, r3, #30
 800bc2c:	bf49      	itett	mi
 800bc2e:	085b      	lsrmi	r3, r3, #1
 800bc30:	089b      	lsrpl	r3, r3, #2
 800bc32:	2001      	movmi	r0, #1
 800bc34:	6013      	strmi	r3, [r2, #0]
 800bc36:	bf5c      	itt	pl
 800bc38:	2002      	movpl	r0, #2
 800bc3a:	6013      	strpl	r3, [r2, #0]
 800bc3c:	4770      	bx	lr
 800bc3e:	b299      	uxth	r1, r3
 800bc40:	b909      	cbnz	r1, 800bc46 <__lo0bits+0x2a>
 800bc42:	2010      	movs	r0, #16
 800bc44:	0c1b      	lsrs	r3, r3, #16
 800bc46:	b2d9      	uxtb	r1, r3
 800bc48:	b909      	cbnz	r1, 800bc4e <__lo0bits+0x32>
 800bc4a:	3008      	adds	r0, #8
 800bc4c:	0a1b      	lsrs	r3, r3, #8
 800bc4e:	0719      	lsls	r1, r3, #28
 800bc50:	bf04      	itt	eq
 800bc52:	091b      	lsreq	r3, r3, #4
 800bc54:	3004      	addeq	r0, #4
 800bc56:	0799      	lsls	r1, r3, #30
 800bc58:	bf04      	itt	eq
 800bc5a:	089b      	lsreq	r3, r3, #2
 800bc5c:	3002      	addeq	r0, #2
 800bc5e:	07d9      	lsls	r1, r3, #31
 800bc60:	d403      	bmi.n	800bc6a <__lo0bits+0x4e>
 800bc62:	085b      	lsrs	r3, r3, #1
 800bc64:	f100 0001 	add.w	r0, r0, #1
 800bc68:	d003      	beq.n	800bc72 <__lo0bits+0x56>
 800bc6a:	6013      	str	r3, [r2, #0]
 800bc6c:	4770      	bx	lr
 800bc6e:	2000      	movs	r0, #0
 800bc70:	4770      	bx	lr
 800bc72:	2020      	movs	r0, #32
 800bc74:	4770      	bx	lr
	...

0800bc78 <__i2b>:
 800bc78:	b510      	push	{r4, lr}
 800bc7a:	460c      	mov	r4, r1
 800bc7c:	2101      	movs	r1, #1
 800bc7e:	f7ff febb 	bl	800b9f8 <_Balloc>
 800bc82:	4602      	mov	r2, r0
 800bc84:	b928      	cbnz	r0, 800bc92 <__i2b+0x1a>
 800bc86:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bc8a:	4b04      	ldr	r3, [pc, #16]	; (800bc9c <__i2b+0x24>)
 800bc8c:	4804      	ldr	r0, [pc, #16]	; (800bca0 <__i2b+0x28>)
 800bc8e:	f7fe fc67 	bl	800a560 <__assert_func>
 800bc92:	2301      	movs	r3, #1
 800bc94:	6144      	str	r4, [r0, #20]
 800bc96:	6103      	str	r3, [r0, #16]
 800bc98:	bd10      	pop	{r4, pc}
 800bc9a:	bf00      	nop
 800bc9c:	0800d6b9 	.word	0x0800d6b9
 800bca0:	0800d744 	.word	0x0800d744

0800bca4 <__multiply>:
 800bca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bca8:	4691      	mov	r9, r2
 800bcaa:	690a      	ldr	r2, [r1, #16]
 800bcac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bcb0:	460c      	mov	r4, r1
 800bcb2:	429a      	cmp	r2, r3
 800bcb4:	bfbe      	ittt	lt
 800bcb6:	460b      	movlt	r3, r1
 800bcb8:	464c      	movlt	r4, r9
 800bcba:	4699      	movlt	r9, r3
 800bcbc:	6927      	ldr	r7, [r4, #16]
 800bcbe:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bcc2:	68a3      	ldr	r3, [r4, #8]
 800bcc4:	6861      	ldr	r1, [r4, #4]
 800bcc6:	eb07 060a 	add.w	r6, r7, sl
 800bcca:	42b3      	cmp	r3, r6
 800bccc:	b085      	sub	sp, #20
 800bcce:	bfb8      	it	lt
 800bcd0:	3101      	addlt	r1, #1
 800bcd2:	f7ff fe91 	bl	800b9f8 <_Balloc>
 800bcd6:	b930      	cbnz	r0, 800bce6 <__multiply+0x42>
 800bcd8:	4602      	mov	r2, r0
 800bcda:	f240 115d 	movw	r1, #349	; 0x15d
 800bcde:	4b43      	ldr	r3, [pc, #268]	; (800bdec <__multiply+0x148>)
 800bce0:	4843      	ldr	r0, [pc, #268]	; (800bdf0 <__multiply+0x14c>)
 800bce2:	f7fe fc3d 	bl	800a560 <__assert_func>
 800bce6:	f100 0514 	add.w	r5, r0, #20
 800bcea:	462b      	mov	r3, r5
 800bcec:	2200      	movs	r2, #0
 800bcee:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bcf2:	4543      	cmp	r3, r8
 800bcf4:	d321      	bcc.n	800bd3a <__multiply+0x96>
 800bcf6:	f104 0314 	add.w	r3, r4, #20
 800bcfa:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bcfe:	f109 0314 	add.w	r3, r9, #20
 800bd02:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bd06:	9202      	str	r2, [sp, #8]
 800bd08:	1b3a      	subs	r2, r7, r4
 800bd0a:	3a15      	subs	r2, #21
 800bd0c:	f022 0203 	bic.w	r2, r2, #3
 800bd10:	3204      	adds	r2, #4
 800bd12:	f104 0115 	add.w	r1, r4, #21
 800bd16:	428f      	cmp	r7, r1
 800bd18:	bf38      	it	cc
 800bd1a:	2204      	movcc	r2, #4
 800bd1c:	9201      	str	r2, [sp, #4]
 800bd1e:	9a02      	ldr	r2, [sp, #8]
 800bd20:	9303      	str	r3, [sp, #12]
 800bd22:	429a      	cmp	r2, r3
 800bd24:	d80c      	bhi.n	800bd40 <__multiply+0x9c>
 800bd26:	2e00      	cmp	r6, #0
 800bd28:	dd03      	ble.n	800bd32 <__multiply+0x8e>
 800bd2a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d059      	beq.n	800bde6 <__multiply+0x142>
 800bd32:	6106      	str	r6, [r0, #16]
 800bd34:	b005      	add	sp, #20
 800bd36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd3a:	f843 2b04 	str.w	r2, [r3], #4
 800bd3e:	e7d8      	b.n	800bcf2 <__multiply+0x4e>
 800bd40:	f8b3 a000 	ldrh.w	sl, [r3]
 800bd44:	f1ba 0f00 	cmp.w	sl, #0
 800bd48:	d023      	beq.n	800bd92 <__multiply+0xee>
 800bd4a:	46a9      	mov	r9, r5
 800bd4c:	f04f 0c00 	mov.w	ip, #0
 800bd50:	f104 0e14 	add.w	lr, r4, #20
 800bd54:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bd58:	f8d9 1000 	ldr.w	r1, [r9]
 800bd5c:	fa1f fb82 	uxth.w	fp, r2
 800bd60:	b289      	uxth	r1, r1
 800bd62:	fb0a 110b 	mla	r1, sl, fp, r1
 800bd66:	4461      	add	r1, ip
 800bd68:	f8d9 c000 	ldr.w	ip, [r9]
 800bd6c:	0c12      	lsrs	r2, r2, #16
 800bd6e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800bd72:	fb0a c202 	mla	r2, sl, r2, ip
 800bd76:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bd7a:	b289      	uxth	r1, r1
 800bd7c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bd80:	4577      	cmp	r7, lr
 800bd82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bd86:	f849 1b04 	str.w	r1, [r9], #4
 800bd8a:	d8e3      	bhi.n	800bd54 <__multiply+0xb0>
 800bd8c:	9a01      	ldr	r2, [sp, #4]
 800bd8e:	f845 c002 	str.w	ip, [r5, r2]
 800bd92:	9a03      	ldr	r2, [sp, #12]
 800bd94:	3304      	adds	r3, #4
 800bd96:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bd9a:	f1b9 0f00 	cmp.w	r9, #0
 800bd9e:	d020      	beq.n	800bde2 <__multiply+0x13e>
 800bda0:	46ae      	mov	lr, r5
 800bda2:	f04f 0a00 	mov.w	sl, #0
 800bda6:	6829      	ldr	r1, [r5, #0]
 800bda8:	f104 0c14 	add.w	ip, r4, #20
 800bdac:	f8bc b000 	ldrh.w	fp, [ip]
 800bdb0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bdb4:	b289      	uxth	r1, r1
 800bdb6:	fb09 220b 	mla	r2, r9, fp, r2
 800bdba:	4492      	add	sl, r2
 800bdbc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bdc0:	f84e 1b04 	str.w	r1, [lr], #4
 800bdc4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bdc8:	f8be 1000 	ldrh.w	r1, [lr]
 800bdcc:	0c12      	lsrs	r2, r2, #16
 800bdce:	fb09 1102 	mla	r1, r9, r2, r1
 800bdd2:	4567      	cmp	r7, ip
 800bdd4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bdd8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bddc:	d8e6      	bhi.n	800bdac <__multiply+0x108>
 800bdde:	9a01      	ldr	r2, [sp, #4]
 800bde0:	50a9      	str	r1, [r5, r2]
 800bde2:	3504      	adds	r5, #4
 800bde4:	e79b      	b.n	800bd1e <__multiply+0x7a>
 800bde6:	3e01      	subs	r6, #1
 800bde8:	e79d      	b.n	800bd26 <__multiply+0x82>
 800bdea:	bf00      	nop
 800bdec:	0800d6b9 	.word	0x0800d6b9
 800bdf0:	0800d744 	.word	0x0800d744

0800bdf4 <__pow5mult>:
 800bdf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdf8:	4615      	mov	r5, r2
 800bdfa:	f012 0203 	ands.w	r2, r2, #3
 800bdfe:	4606      	mov	r6, r0
 800be00:	460f      	mov	r7, r1
 800be02:	d007      	beq.n	800be14 <__pow5mult+0x20>
 800be04:	4c25      	ldr	r4, [pc, #148]	; (800be9c <__pow5mult+0xa8>)
 800be06:	3a01      	subs	r2, #1
 800be08:	2300      	movs	r3, #0
 800be0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800be0e:	f7ff fe55 	bl	800babc <__multadd>
 800be12:	4607      	mov	r7, r0
 800be14:	10ad      	asrs	r5, r5, #2
 800be16:	d03d      	beq.n	800be94 <__pow5mult+0xa0>
 800be18:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800be1a:	b97c      	cbnz	r4, 800be3c <__pow5mult+0x48>
 800be1c:	2010      	movs	r0, #16
 800be1e:	f7ff fdb5 	bl	800b98c <malloc>
 800be22:	4602      	mov	r2, r0
 800be24:	6270      	str	r0, [r6, #36]	; 0x24
 800be26:	b928      	cbnz	r0, 800be34 <__pow5mult+0x40>
 800be28:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800be2c:	4b1c      	ldr	r3, [pc, #112]	; (800bea0 <__pow5mult+0xac>)
 800be2e:	481d      	ldr	r0, [pc, #116]	; (800bea4 <__pow5mult+0xb0>)
 800be30:	f7fe fb96 	bl	800a560 <__assert_func>
 800be34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800be38:	6004      	str	r4, [r0, #0]
 800be3a:	60c4      	str	r4, [r0, #12]
 800be3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800be40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800be44:	b94c      	cbnz	r4, 800be5a <__pow5mult+0x66>
 800be46:	f240 2171 	movw	r1, #625	; 0x271
 800be4a:	4630      	mov	r0, r6
 800be4c:	f7ff ff14 	bl	800bc78 <__i2b>
 800be50:	2300      	movs	r3, #0
 800be52:	4604      	mov	r4, r0
 800be54:	f8c8 0008 	str.w	r0, [r8, #8]
 800be58:	6003      	str	r3, [r0, #0]
 800be5a:	f04f 0900 	mov.w	r9, #0
 800be5e:	07eb      	lsls	r3, r5, #31
 800be60:	d50a      	bpl.n	800be78 <__pow5mult+0x84>
 800be62:	4639      	mov	r1, r7
 800be64:	4622      	mov	r2, r4
 800be66:	4630      	mov	r0, r6
 800be68:	f7ff ff1c 	bl	800bca4 <__multiply>
 800be6c:	4680      	mov	r8, r0
 800be6e:	4639      	mov	r1, r7
 800be70:	4630      	mov	r0, r6
 800be72:	f7ff fe01 	bl	800ba78 <_Bfree>
 800be76:	4647      	mov	r7, r8
 800be78:	106d      	asrs	r5, r5, #1
 800be7a:	d00b      	beq.n	800be94 <__pow5mult+0xa0>
 800be7c:	6820      	ldr	r0, [r4, #0]
 800be7e:	b938      	cbnz	r0, 800be90 <__pow5mult+0x9c>
 800be80:	4622      	mov	r2, r4
 800be82:	4621      	mov	r1, r4
 800be84:	4630      	mov	r0, r6
 800be86:	f7ff ff0d 	bl	800bca4 <__multiply>
 800be8a:	6020      	str	r0, [r4, #0]
 800be8c:	f8c0 9000 	str.w	r9, [r0]
 800be90:	4604      	mov	r4, r0
 800be92:	e7e4      	b.n	800be5e <__pow5mult+0x6a>
 800be94:	4638      	mov	r0, r7
 800be96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be9a:	bf00      	nop
 800be9c:	0800d890 	.word	0x0800d890
 800bea0:	0800d4a0 	.word	0x0800d4a0
 800bea4:	0800d744 	.word	0x0800d744

0800bea8 <__lshift>:
 800bea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800beac:	460c      	mov	r4, r1
 800beae:	4607      	mov	r7, r0
 800beb0:	4691      	mov	r9, r2
 800beb2:	6923      	ldr	r3, [r4, #16]
 800beb4:	6849      	ldr	r1, [r1, #4]
 800beb6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800beba:	68a3      	ldr	r3, [r4, #8]
 800bebc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bec0:	f108 0601 	add.w	r6, r8, #1
 800bec4:	42b3      	cmp	r3, r6
 800bec6:	db0b      	blt.n	800bee0 <__lshift+0x38>
 800bec8:	4638      	mov	r0, r7
 800beca:	f7ff fd95 	bl	800b9f8 <_Balloc>
 800bece:	4605      	mov	r5, r0
 800bed0:	b948      	cbnz	r0, 800bee6 <__lshift+0x3e>
 800bed2:	4602      	mov	r2, r0
 800bed4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bed8:	4b29      	ldr	r3, [pc, #164]	; (800bf80 <__lshift+0xd8>)
 800beda:	482a      	ldr	r0, [pc, #168]	; (800bf84 <__lshift+0xdc>)
 800bedc:	f7fe fb40 	bl	800a560 <__assert_func>
 800bee0:	3101      	adds	r1, #1
 800bee2:	005b      	lsls	r3, r3, #1
 800bee4:	e7ee      	b.n	800bec4 <__lshift+0x1c>
 800bee6:	2300      	movs	r3, #0
 800bee8:	f100 0114 	add.w	r1, r0, #20
 800beec:	f100 0210 	add.w	r2, r0, #16
 800bef0:	4618      	mov	r0, r3
 800bef2:	4553      	cmp	r3, sl
 800bef4:	db37      	blt.n	800bf66 <__lshift+0xbe>
 800bef6:	6920      	ldr	r0, [r4, #16]
 800bef8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800befc:	f104 0314 	add.w	r3, r4, #20
 800bf00:	f019 091f 	ands.w	r9, r9, #31
 800bf04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bf08:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bf0c:	d02f      	beq.n	800bf6e <__lshift+0xc6>
 800bf0e:	468a      	mov	sl, r1
 800bf10:	f04f 0c00 	mov.w	ip, #0
 800bf14:	f1c9 0e20 	rsb	lr, r9, #32
 800bf18:	681a      	ldr	r2, [r3, #0]
 800bf1a:	fa02 f209 	lsl.w	r2, r2, r9
 800bf1e:	ea42 020c 	orr.w	r2, r2, ip
 800bf22:	f84a 2b04 	str.w	r2, [sl], #4
 800bf26:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf2a:	4298      	cmp	r0, r3
 800bf2c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bf30:	d8f2      	bhi.n	800bf18 <__lshift+0x70>
 800bf32:	1b03      	subs	r3, r0, r4
 800bf34:	3b15      	subs	r3, #21
 800bf36:	f023 0303 	bic.w	r3, r3, #3
 800bf3a:	3304      	adds	r3, #4
 800bf3c:	f104 0215 	add.w	r2, r4, #21
 800bf40:	4290      	cmp	r0, r2
 800bf42:	bf38      	it	cc
 800bf44:	2304      	movcc	r3, #4
 800bf46:	f841 c003 	str.w	ip, [r1, r3]
 800bf4a:	f1bc 0f00 	cmp.w	ip, #0
 800bf4e:	d001      	beq.n	800bf54 <__lshift+0xac>
 800bf50:	f108 0602 	add.w	r6, r8, #2
 800bf54:	3e01      	subs	r6, #1
 800bf56:	4638      	mov	r0, r7
 800bf58:	4621      	mov	r1, r4
 800bf5a:	612e      	str	r6, [r5, #16]
 800bf5c:	f7ff fd8c 	bl	800ba78 <_Bfree>
 800bf60:	4628      	mov	r0, r5
 800bf62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf66:	f842 0f04 	str.w	r0, [r2, #4]!
 800bf6a:	3301      	adds	r3, #1
 800bf6c:	e7c1      	b.n	800bef2 <__lshift+0x4a>
 800bf6e:	3904      	subs	r1, #4
 800bf70:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf74:	4298      	cmp	r0, r3
 800bf76:	f841 2f04 	str.w	r2, [r1, #4]!
 800bf7a:	d8f9      	bhi.n	800bf70 <__lshift+0xc8>
 800bf7c:	e7ea      	b.n	800bf54 <__lshift+0xac>
 800bf7e:	bf00      	nop
 800bf80:	0800d6b9 	.word	0x0800d6b9
 800bf84:	0800d744 	.word	0x0800d744

0800bf88 <__mcmp>:
 800bf88:	4603      	mov	r3, r0
 800bf8a:	690a      	ldr	r2, [r1, #16]
 800bf8c:	6900      	ldr	r0, [r0, #16]
 800bf8e:	b530      	push	{r4, r5, lr}
 800bf90:	1a80      	subs	r0, r0, r2
 800bf92:	d10d      	bne.n	800bfb0 <__mcmp+0x28>
 800bf94:	3314      	adds	r3, #20
 800bf96:	3114      	adds	r1, #20
 800bf98:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bf9c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bfa0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bfa4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bfa8:	4295      	cmp	r5, r2
 800bfaa:	d002      	beq.n	800bfb2 <__mcmp+0x2a>
 800bfac:	d304      	bcc.n	800bfb8 <__mcmp+0x30>
 800bfae:	2001      	movs	r0, #1
 800bfb0:	bd30      	pop	{r4, r5, pc}
 800bfb2:	42a3      	cmp	r3, r4
 800bfb4:	d3f4      	bcc.n	800bfa0 <__mcmp+0x18>
 800bfb6:	e7fb      	b.n	800bfb0 <__mcmp+0x28>
 800bfb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bfbc:	e7f8      	b.n	800bfb0 <__mcmp+0x28>
	...

0800bfc0 <__mdiff>:
 800bfc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfc4:	460d      	mov	r5, r1
 800bfc6:	4607      	mov	r7, r0
 800bfc8:	4611      	mov	r1, r2
 800bfca:	4628      	mov	r0, r5
 800bfcc:	4614      	mov	r4, r2
 800bfce:	f7ff ffdb 	bl	800bf88 <__mcmp>
 800bfd2:	1e06      	subs	r6, r0, #0
 800bfd4:	d111      	bne.n	800bffa <__mdiff+0x3a>
 800bfd6:	4631      	mov	r1, r6
 800bfd8:	4638      	mov	r0, r7
 800bfda:	f7ff fd0d 	bl	800b9f8 <_Balloc>
 800bfde:	4602      	mov	r2, r0
 800bfe0:	b928      	cbnz	r0, 800bfee <__mdiff+0x2e>
 800bfe2:	f240 2132 	movw	r1, #562	; 0x232
 800bfe6:	4b3a      	ldr	r3, [pc, #232]	; (800c0d0 <__mdiff+0x110>)
 800bfe8:	483a      	ldr	r0, [pc, #232]	; (800c0d4 <__mdiff+0x114>)
 800bfea:	f7fe fab9 	bl	800a560 <__assert_func>
 800bfee:	2301      	movs	r3, #1
 800bff0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800bff4:	4610      	mov	r0, r2
 800bff6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bffa:	bfa4      	itt	ge
 800bffc:	4623      	movge	r3, r4
 800bffe:	462c      	movge	r4, r5
 800c000:	4638      	mov	r0, r7
 800c002:	6861      	ldr	r1, [r4, #4]
 800c004:	bfa6      	itte	ge
 800c006:	461d      	movge	r5, r3
 800c008:	2600      	movge	r6, #0
 800c00a:	2601      	movlt	r6, #1
 800c00c:	f7ff fcf4 	bl	800b9f8 <_Balloc>
 800c010:	4602      	mov	r2, r0
 800c012:	b918      	cbnz	r0, 800c01c <__mdiff+0x5c>
 800c014:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c018:	4b2d      	ldr	r3, [pc, #180]	; (800c0d0 <__mdiff+0x110>)
 800c01a:	e7e5      	b.n	800bfe8 <__mdiff+0x28>
 800c01c:	f102 0814 	add.w	r8, r2, #20
 800c020:	46c2      	mov	sl, r8
 800c022:	f04f 0c00 	mov.w	ip, #0
 800c026:	6927      	ldr	r7, [r4, #16]
 800c028:	60c6      	str	r6, [r0, #12]
 800c02a:	692e      	ldr	r6, [r5, #16]
 800c02c:	f104 0014 	add.w	r0, r4, #20
 800c030:	f105 0914 	add.w	r9, r5, #20
 800c034:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800c038:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c03c:	3410      	adds	r4, #16
 800c03e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800c042:	f859 3b04 	ldr.w	r3, [r9], #4
 800c046:	fa1f f18b 	uxth.w	r1, fp
 800c04a:	448c      	add	ip, r1
 800c04c:	b299      	uxth	r1, r3
 800c04e:	0c1b      	lsrs	r3, r3, #16
 800c050:	ebac 0101 	sub.w	r1, ip, r1
 800c054:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c058:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c05c:	b289      	uxth	r1, r1
 800c05e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800c062:	454e      	cmp	r6, r9
 800c064:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c068:	f84a 3b04 	str.w	r3, [sl], #4
 800c06c:	d8e7      	bhi.n	800c03e <__mdiff+0x7e>
 800c06e:	1b73      	subs	r3, r6, r5
 800c070:	3b15      	subs	r3, #21
 800c072:	f023 0303 	bic.w	r3, r3, #3
 800c076:	3515      	adds	r5, #21
 800c078:	3304      	adds	r3, #4
 800c07a:	42ae      	cmp	r6, r5
 800c07c:	bf38      	it	cc
 800c07e:	2304      	movcc	r3, #4
 800c080:	4418      	add	r0, r3
 800c082:	4443      	add	r3, r8
 800c084:	461e      	mov	r6, r3
 800c086:	4605      	mov	r5, r0
 800c088:	4575      	cmp	r5, lr
 800c08a:	d30e      	bcc.n	800c0aa <__mdiff+0xea>
 800c08c:	f10e 0103 	add.w	r1, lr, #3
 800c090:	1a09      	subs	r1, r1, r0
 800c092:	f021 0103 	bic.w	r1, r1, #3
 800c096:	3803      	subs	r0, #3
 800c098:	4586      	cmp	lr, r0
 800c09a:	bf38      	it	cc
 800c09c:	2100      	movcc	r1, #0
 800c09e:	4419      	add	r1, r3
 800c0a0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800c0a4:	b18b      	cbz	r3, 800c0ca <__mdiff+0x10a>
 800c0a6:	6117      	str	r7, [r2, #16]
 800c0a8:	e7a4      	b.n	800bff4 <__mdiff+0x34>
 800c0aa:	f855 8b04 	ldr.w	r8, [r5], #4
 800c0ae:	fa1f f188 	uxth.w	r1, r8
 800c0b2:	4461      	add	r1, ip
 800c0b4:	140c      	asrs	r4, r1, #16
 800c0b6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c0ba:	b289      	uxth	r1, r1
 800c0bc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c0c0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800c0c4:	f846 1b04 	str.w	r1, [r6], #4
 800c0c8:	e7de      	b.n	800c088 <__mdiff+0xc8>
 800c0ca:	3f01      	subs	r7, #1
 800c0cc:	e7e8      	b.n	800c0a0 <__mdiff+0xe0>
 800c0ce:	bf00      	nop
 800c0d0:	0800d6b9 	.word	0x0800d6b9
 800c0d4:	0800d744 	.word	0x0800d744

0800c0d8 <__ulp>:
 800c0d8:	4b11      	ldr	r3, [pc, #68]	; (800c120 <__ulp+0x48>)
 800c0da:	400b      	ands	r3, r1
 800c0dc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	dd02      	ble.n	800c0ea <__ulp+0x12>
 800c0e4:	2000      	movs	r0, #0
 800c0e6:	4619      	mov	r1, r3
 800c0e8:	4770      	bx	lr
 800c0ea:	425b      	negs	r3, r3
 800c0ec:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c0f0:	f04f 0000 	mov.w	r0, #0
 800c0f4:	f04f 0100 	mov.w	r1, #0
 800c0f8:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c0fc:	da04      	bge.n	800c108 <__ulp+0x30>
 800c0fe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c102:	fa43 f102 	asr.w	r1, r3, r2
 800c106:	4770      	bx	lr
 800c108:	f1a2 0314 	sub.w	r3, r2, #20
 800c10c:	2b1e      	cmp	r3, #30
 800c10e:	bfd6      	itet	le
 800c110:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c114:	2301      	movgt	r3, #1
 800c116:	fa22 f303 	lsrle.w	r3, r2, r3
 800c11a:	4618      	mov	r0, r3
 800c11c:	4770      	bx	lr
 800c11e:	bf00      	nop
 800c120:	7ff00000 	.word	0x7ff00000

0800c124 <__b2d>:
 800c124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c128:	6907      	ldr	r7, [r0, #16]
 800c12a:	f100 0914 	add.w	r9, r0, #20
 800c12e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800c132:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800c136:	f1a7 0804 	sub.w	r8, r7, #4
 800c13a:	4630      	mov	r0, r6
 800c13c:	f7ff fd4e 	bl	800bbdc <__hi0bits>
 800c140:	f1c0 0320 	rsb	r3, r0, #32
 800c144:	280a      	cmp	r0, #10
 800c146:	600b      	str	r3, [r1, #0]
 800c148:	491f      	ldr	r1, [pc, #124]	; (800c1c8 <__b2d+0xa4>)
 800c14a:	dc17      	bgt.n	800c17c <__b2d+0x58>
 800c14c:	45c1      	cmp	r9, r8
 800c14e:	bf28      	it	cs
 800c150:	2200      	movcs	r2, #0
 800c152:	f1c0 0c0b 	rsb	ip, r0, #11
 800c156:	fa26 f30c 	lsr.w	r3, r6, ip
 800c15a:	bf38      	it	cc
 800c15c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c160:	ea43 0501 	orr.w	r5, r3, r1
 800c164:	f100 0315 	add.w	r3, r0, #21
 800c168:	fa06 f303 	lsl.w	r3, r6, r3
 800c16c:	fa22 f20c 	lsr.w	r2, r2, ip
 800c170:	ea43 0402 	orr.w	r4, r3, r2
 800c174:	4620      	mov	r0, r4
 800c176:	4629      	mov	r1, r5
 800c178:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c17c:	45c1      	cmp	r9, r8
 800c17e:	bf2e      	itee	cs
 800c180:	2200      	movcs	r2, #0
 800c182:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c186:	f1a7 0808 	subcc.w	r8, r7, #8
 800c18a:	f1b0 030b 	subs.w	r3, r0, #11
 800c18e:	d016      	beq.n	800c1be <__b2d+0x9a>
 800c190:	f1c3 0720 	rsb	r7, r3, #32
 800c194:	fa22 f107 	lsr.w	r1, r2, r7
 800c198:	45c8      	cmp	r8, r9
 800c19a:	fa06 f603 	lsl.w	r6, r6, r3
 800c19e:	ea46 0601 	orr.w	r6, r6, r1
 800c1a2:	bf94      	ite	ls
 800c1a4:	2100      	movls	r1, #0
 800c1a6:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800c1aa:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800c1ae:	fa02 f003 	lsl.w	r0, r2, r3
 800c1b2:	40f9      	lsrs	r1, r7
 800c1b4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c1b8:	ea40 0401 	orr.w	r4, r0, r1
 800c1bc:	e7da      	b.n	800c174 <__b2d+0x50>
 800c1be:	4614      	mov	r4, r2
 800c1c0:	ea46 0501 	orr.w	r5, r6, r1
 800c1c4:	e7d6      	b.n	800c174 <__b2d+0x50>
 800c1c6:	bf00      	nop
 800c1c8:	3ff00000 	.word	0x3ff00000

0800c1cc <__d2b>:
 800c1cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c1d0:	2101      	movs	r1, #1
 800c1d2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800c1d6:	4690      	mov	r8, r2
 800c1d8:	461d      	mov	r5, r3
 800c1da:	f7ff fc0d 	bl	800b9f8 <_Balloc>
 800c1de:	4604      	mov	r4, r0
 800c1e0:	b930      	cbnz	r0, 800c1f0 <__d2b+0x24>
 800c1e2:	4602      	mov	r2, r0
 800c1e4:	f240 310a 	movw	r1, #778	; 0x30a
 800c1e8:	4b24      	ldr	r3, [pc, #144]	; (800c27c <__d2b+0xb0>)
 800c1ea:	4825      	ldr	r0, [pc, #148]	; (800c280 <__d2b+0xb4>)
 800c1ec:	f7fe f9b8 	bl	800a560 <__assert_func>
 800c1f0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800c1f4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800c1f8:	bb2d      	cbnz	r5, 800c246 <__d2b+0x7a>
 800c1fa:	9301      	str	r3, [sp, #4]
 800c1fc:	f1b8 0300 	subs.w	r3, r8, #0
 800c200:	d026      	beq.n	800c250 <__d2b+0x84>
 800c202:	4668      	mov	r0, sp
 800c204:	9300      	str	r3, [sp, #0]
 800c206:	f7ff fd09 	bl	800bc1c <__lo0bits>
 800c20a:	9900      	ldr	r1, [sp, #0]
 800c20c:	b1f0      	cbz	r0, 800c24c <__d2b+0x80>
 800c20e:	9a01      	ldr	r2, [sp, #4]
 800c210:	f1c0 0320 	rsb	r3, r0, #32
 800c214:	fa02 f303 	lsl.w	r3, r2, r3
 800c218:	430b      	orrs	r3, r1
 800c21a:	40c2      	lsrs	r2, r0
 800c21c:	6163      	str	r3, [r4, #20]
 800c21e:	9201      	str	r2, [sp, #4]
 800c220:	9b01      	ldr	r3, [sp, #4]
 800c222:	2b00      	cmp	r3, #0
 800c224:	bf14      	ite	ne
 800c226:	2102      	movne	r1, #2
 800c228:	2101      	moveq	r1, #1
 800c22a:	61a3      	str	r3, [r4, #24]
 800c22c:	6121      	str	r1, [r4, #16]
 800c22e:	b1c5      	cbz	r5, 800c262 <__d2b+0x96>
 800c230:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c234:	4405      	add	r5, r0
 800c236:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c23a:	603d      	str	r5, [r7, #0]
 800c23c:	6030      	str	r0, [r6, #0]
 800c23e:	4620      	mov	r0, r4
 800c240:	b002      	add	sp, #8
 800c242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c246:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c24a:	e7d6      	b.n	800c1fa <__d2b+0x2e>
 800c24c:	6161      	str	r1, [r4, #20]
 800c24e:	e7e7      	b.n	800c220 <__d2b+0x54>
 800c250:	a801      	add	r0, sp, #4
 800c252:	f7ff fce3 	bl	800bc1c <__lo0bits>
 800c256:	2101      	movs	r1, #1
 800c258:	9b01      	ldr	r3, [sp, #4]
 800c25a:	6121      	str	r1, [r4, #16]
 800c25c:	6163      	str	r3, [r4, #20]
 800c25e:	3020      	adds	r0, #32
 800c260:	e7e5      	b.n	800c22e <__d2b+0x62>
 800c262:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800c266:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c26a:	6038      	str	r0, [r7, #0]
 800c26c:	6918      	ldr	r0, [r3, #16]
 800c26e:	f7ff fcb5 	bl	800bbdc <__hi0bits>
 800c272:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800c276:	6031      	str	r1, [r6, #0]
 800c278:	e7e1      	b.n	800c23e <__d2b+0x72>
 800c27a:	bf00      	nop
 800c27c:	0800d6b9 	.word	0x0800d6b9
 800c280:	0800d744 	.word	0x0800d744

0800c284 <__ratio>:
 800c284:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c288:	4688      	mov	r8, r1
 800c28a:	4669      	mov	r1, sp
 800c28c:	4681      	mov	r9, r0
 800c28e:	f7ff ff49 	bl	800c124 <__b2d>
 800c292:	460f      	mov	r7, r1
 800c294:	4604      	mov	r4, r0
 800c296:	460d      	mov	r5, r1
 800c298:	4640      	mov	r0, r8
 800c29a:	a901      	add	r1, sp, #4
 800c29c:	f7ff ff42 	bl	800c124 <__b2d>
 800c2a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c2a4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c2a8:	468b      	mov	fp, r1
 800c2aa:	eba3 0c02 	sub.w	ip, r3, r2
 800c2ae:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c2b2:	1a9b      	subs	r3, r3, r2
 800c2b4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	bfd5      	itete	le
 800c2bc:	460a      	movle	r2, r1
 800c2be:	462a      	movgt	r2, r5
 800c2c0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c2c4:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c2c8:	bfd8      	it	le
 800c2ca:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c2ce:	465b      	mov	r3, fp
 800c2d0:	4602      	mov	r2, r0
 800c2d2:	4639      	mov	r1, r7
 800c2d4:	4620      	mov	r0, r4
 800c2d6:	f7f4 fa29 	bl	800072c <__aeabi_ddiv>
 800c2da:	b003      	add	sp, #12
 800c2dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c2e0 <__copybits>:
 800c2e0:	3901      	subs	r1, #1
 800c2e2:	b570      	push	{r4, r5, r6, lr}
 800c2e4:	1149      	asrs	r1, r1, #5
 800c2e6:	6914      	ldr	r4, [r2, #16]
 800c2e8:	3101      	adds	r1, #1
 800c2ea:	f102 0314 	add.w	r3, r2, #20
 800c2ee:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c2f2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c2f6:	1f05      	subs	r5, r0, #4
 800c2f8:	42a3      	cmp	r3, r4
 800c2fa:	d30c      	bcc.n	800c316 <__copybits+0x36>
 800c2fc:	1aa3      	subs	r3, r4, r2
 800c2fe:	3b11      	subs	r3, #17
 800c300:	f023 0303 	bic.w	r3, r3, #3
 800c304:	3211      	adds	r2, #17
 800c306:	42a2      	cmp	r2, r4
 800c308:	bf88      	it	hi
 800c30a:	2300      	movhi	r3, #0
 800c30c:	4418      	add	r0, r3
 800c30e:	2300      	movs	r3, #0
 800c310:	4288      	cmp	r0, r1
 800c312:	d305      	bcc.n	800c320 <__copybits+0x40>
 800c314:	bd70      	pop	{r4, r5, r6, pc}
 800c316:	f853 6b04 	ldr.w	r6, [r3], #4
 800c31a:	f845 6f04 	str.w	r6, [r5, #4]!
 800c31e:	e7eb      	b.n	800c2f8 <__copybits+0x18>
 800c320:	f840 3b04 	str.w	r3, [r0], #4
 800c324:	e7f4      	b.n	800c310 <__copybits+0x30>

0800c326 <__any_on>:
 800c326:	f100 0214 	add.w	r2, r0, #20
 800c32a:	6900      	ldr	r0, [r0, #16]
 800c32c:	114b      	asrs	r3, r1, #5
 800c32e:	4298      	cmp	r0, r3
 800c330:	b510      	push	{r4, lr}
 800c332:	db11      	blt.n	800c358 <__any_on+0x32>
 800c334:	dd0a      	ble.n	800c34c <__any_on+0x26>
 800c336:	f011 011f 	ands.w	r1, r1, #31
 800c33a:	d007      	beq.n	800c34c <__any_on+0x26>
 800c33c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c340:	fa24 f001 	lsr.w	r0, r4, r1
 800c344:	fa00 f101 	lsl.w	r1, r0, r1
 800c348:	428c      	cmp	r4, r1
 800c34a:	d10b      	bne.n	800c364 <__any_on+0x3e>
 800c34c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c350:	4293      	cmp	r3, r2
 800c352:	d803      	bhi.n	800c35c <__any_on+0x36>
 800c354:	2000      	movs	r0, #0
 800c356:	bd10      	pop	{r4, pc}
 800c358:	4603      	mov	r3, r0
 800c35a:	e7f7      	b.n	800c34c <__any_on+0x26>
 800c35c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c360:	2900      	cmp	r1, #0
 800c362:	d0f5      	beq.n	800c350 <__any_on+0x2a>
 800c364:	2001      	movs	r0, #1
 800c366:	e7f6      	b.n	800c356 <__any_on+0x30>

0800c368 <_calloc_r>:
 800c368:	b570      	push	{r4, r5, r6, lr}
 800c36a:	fba1 5402 	umull	r5, r4, r1, r2
 800c36e:	b934      	cbnz	r4, 800c37e <_calloc_r+0x16>
 800c370:	4629      	mov	r1, r5
 800c372:	f000 f875 	bl	800c460 <_malloc_r>
 800c376:	4606      	mov	r6, r0
 800c378:	b928      	cbnz	r0, 800c386 <_calloc_r+0x1e>
 800c37a:	4630      	mov	r0, r6
 800c37c:	bd70      	pop	{r4, r5, r6, pc}
 800c37e:	220c      	movs	r2, #12
 800c380:	2600      	movs	r6, #0
 800c382:	6002      	str	r2, [r0, #0]
 800c384:	e7f9      	b.n	800c37a <_calloc_r+0x12>
 800c386:	462a      	mov	r2, r5
 800c388:	4621      	mov	r1, r4
 800c38a:	f7fc fb5b 	bl	8008a44 <memset>
 800c38e:	e7f4      	b.n	800c37a <_calloc_r+0x12>

0800c390 <_free_r>:
 800c390:	b538      	push	{r3, r4, r5, lr}
 800c392:	4605      	mov	r5, r0
 800c394:	2900      	cmp	r1, #0
 800c396:	d040      	beq.n	800c41a <_free_r+0x8a>
 800c398:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c39c:	1f0c      	subs	r4, r1, #4
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	bfb8      	it	lt
 800c3a2:	18e4      	addlt	r4, r4, r3
 800c3a4:	f000 feba 	bl	800d11c <__malloc_lock>
 800c3a8:	4a1c      	ldr	r2, [pc, #112]	; (800c41c <_free_r+0x8c>)
 800c3aa:	6813      	ldr	r3, [r2, #0]
 800c3ac:	b933      	cbnz	r3, 800c3bc <_free_r+0x2c>
 800c3ae:	6063      	str	r3, [r4, #4]
 800c3b0:	6014      	str	r4, [r2, #0]
 800c3b2:	4628      	mov	r0, r5
 800c3b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3b8:	f000 beb6 	b.w	800d128 <__malloc_unlock>
 800c3bc:	42a3      	cmp	r3, r4
 800c3be:	d908      	bls.n	800c3d2 <_free_r+0x42>
 800c3c0:	6820      	ldr	r0, [r4, #0]
 800c3c2:	1821      	adds	r1, r4, r0
 800c3c4:	428b      	cmp	r3, r1
 800c3c6:	bf01      	itttt	eq
 800c3c8:	6819      	ldreq	r1, [r3, #0]
 800c3ca:	685b      	ldreq	r3, [r3, #4]
 800c3cc:	1809      	addeq	r1, r1, r0
 800c3ce:	6021      	streq	r1, [r4, #0]
 800c3d0:	e7ed      	b.n	800c3ae <_free_r+0x1e>
 800c3d2:	461a      	mov	r2, r3
 800c3d4:	685b      	ldr	r3, [r3, #4]
 800c3d6:	b10b      	cbz	r3, 800c3dc <_free_r+0x4c>
 800c3d8:	42a3      	cmp	r3, r4
 800c3da:	d9fa      	bls.n	800c3d2 <_free_r+0x42>
 800c3dc:	6811      	ldr	r1, [r2, #0]
 800c3de:	1850      	adds	r0, r2, r1
 800c3e0:	42a0      	cmp	r0, r4
 800c3e2:	d10b      	bne.n	800c3fc <_free_r+0x6c>
 800c3e4:	6820      	ldr	r0, [r4, #0]
 800c3e6:	4401      	add	r1, r0
 800c3e8:	1850      	adds	r0, r2, r1
 800c3ea:	4283      	cmp	r3, r0
 800c3ec:	6011      	str	r1, [r2, #0]
 800c3ee:	d1e0      	bne.n	800c3b2 <_free_r+0x22>
 800c3f0:	6818      	ldr	r0, [r3, #0]
 800c3f2:	685b      	ldr	r3, [r3, #4]
 800c3f4:	4401      	add	r1, r0
 800c3f6:	6011      	str	r1, [r2, #0]
 800c3f8:	6053      	str	r3, [r2, #4]
 800c3fa:	e7da      	b.n	800c3b2 <_free_r+0x22>
 800c3fc:	d902      	bls.n	800c404 <_free_r+0x74>
 800c3fe:	230c      	movs	r3, #12
 800c400:	602b      	str	r3, [r5, #0]
 800c402:	e7d6      	b.n	800c3b2 <_free_r+0x22>
 800c404:	6820      	ldr	r0, [r4, #0]
 800c406:	1821      	adds	r1, r4, r0
 800c408:	428b      	cmp	r3, r1
 800c40a:	bf01      	itttt	eq
 800c40c:	6819      	ldreq	r1, [r3, #0]
 800c40e:	685b      	ldreq	r3, [r3, #4]
 800c410:	1809      	addeq	r1, r1, r0
 800c412:	6021      	streq	r1, [r4, #0]
 800c414:	6063      	str	r3, [r4, #4]
 800c416:	6054      	str	r4, [r2, #4]
 800c418:	e7cb      	b.n	800c3b2 <_free_r+0x22>
 800c41a:	bd38      	pop	{r3, r4, r5, pc}
 800c41c:	2000155c 	.word	0x2000155c

0800c420 <sbrk_aligned>:
 800c420:	b570      	push	{r4, r5, r6, lr}
 800c422:	4e0e      	ldr	r6, [pc, #56]	; (800c45c <sbrk_aligned+0x3c>)
 800c424:	460c      	mov	r4, r1
 800c426:	6831      	ldr	r1, [r6, #0]
 800c428:	4605      	mov	r5, r0
 800c42a:	b911      	cbnz	r1, 800c432 <sbrk_aligned+0x12>
 800c42c:	f000 fb46 	bl	800cabc <_sbrk_r>
 800c430:	6030      	str	r0, [r6, #0]
 800c432:	4621      	mov	r1, r4
 800c434:	4628      	mov	r0, r5
 800c436:	f000 fb41 	bl	800cabc <_sbrk_r>
 800c43a:	1c43      	adds	r3, r0, #1
 800c43c:	d00a      	beq.n	800c454 <sbrk_aligned+0x34>
 800c43e:	1cc4      	adds	r4, r0, #3
 800c440:	f024 0403 	bic.w	r4, r4, #3
 800c444:	42a0      	cmp	r0, r4
 800c446:	d007      	beq.n	800c458 <sbrk_aligned+0x38>
 800c448:	1a21      	subs	r1, r4, r0
 800c44a:	4628      	mov	r0, r5
 800c44c:	f000 fb36 	bl	800cabc <_sbrk_r>
 800c450:	3001      	adds	r0, #1
 800c452:	d101      	bne.n	800c458 <sbrk_aligned+0x38>
 800c454:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c458:	4620      	mov	r0, r4
 800c45a:	bd70      	pop	{r4, r5, r6, pc}
 800c45c:	20001560 	.word	0x20001560

0800c460 <_malloc_r>:
 800c460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c464:	1ccd      	adds	r5, r1, #3
 800c466:	f025 0503 	bic.w	r5, r5, #3
 800c46a:	3508      	adds	r5, #8
 800c46c:	2d0c      	cmp	r5, #12
 800c46e:	bf38      	it	cc
 800c470:	250c      	movcc	r5, #12
 800c472:	2d00      	cmp	r5, #0
 800c474:	4607      	mov	r7, r0
 800c476:	db01      	blt.n	800c47c <_malloc_r+0x1c>
 800c478:	42a9      	cmp	r1, r5
 800c47a:	d905      	bls.n	800c488 <_malloc_r+0x28>
 800c47c:	230c      	movs	r3, #12
 800c47e:	2600      	movs	r6, #0
 800c480:	603b      	str	r3, [r7, #0]
 800c482:	4630      	mov	r0, r6
 800c484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c488:	4e2e      	ldr	r6, [pc, #184]	; (800c544 <_malloc_r+0xe4>)
 800c48a:	f000 fe47 	bl	800d11c <__malloc_lock>
 800c48e:	6833      	ldr	r3, [r6, #0]
 800c490:	461c      	mov	r4, r3
 800c492:	bb34      	cbnz	r4, 800c4e2 <_malloc_r+0x82>
 800c494:	4629      	mov	r1, r5
 800c496:	4638      	mov	r0, r7
 800c498:	f7ff ffc2 	bl	800c420 <sbrk_aligned>
 800c49c:	1c43      	adds	r3, r0, #1
 800c49e:	4604      	mov	r4, r0
 800c4a0:	d14d      	bne.n	800c53e <_malloc_r+0xde>
 800c4a2:	6834      	ldr	r4, [r6, #0]
 800c4a4:	4626      	mov	r6, r4
 800c4a6:	2e00      	cmp	r6, #0
 800c4a8:	d140      	bne.n	800c52c <_malloc_r+0xcc>
 800c4aa:	6823      	ldr	r3, [r4, #0]
 800c4ac:	4631      	mov	r1, r6
 800c4ae:	4638      	mov	r0, r7
 800c4b0:	eb04 0803 	add.w	r8, r4, r3
 800c4b4:	f000 fb02 	bl	800cabc <_sbrk_r>
 800c4b8:	4580      	cmp	r8, r0
 800c4ba:	d13a      	bne.n	800c532 <_malloc_r+0xd2>
 800c4bc:	6821      	ldr	r1, [r4, #0]
 800c4be:	3503      	adds	r5, #3
 800c4c0:	1a6d      	subs	r5, r5, r1
 800c4c2:	f025 0503 	bic.w	r5, r5, #3
 800c4c6:	3508      	adds	r5, #8
 800c4c8:	2d0c      	cmp	r5, #12
 800c4ca:	bf38      	it	cc
 800c4cc:	250c      	movcc	r5, #12
 800c4ce:	4638      	mov	r0, r7
 800c4d0:	4629      	mov	r1, r5
 800c4d2:	f7ff ffa5 	bl	800c420 <sbrk_aligned>
 800c4d6:	3001      	adds	r0, #1
 800c4d8:	d02b      	beq.n	800c532 <_malloc_r+0xd2>
 800c4da:	6823      	ldr	r3, [r4, #0]
 800c4dc:	442b      	add	r3, r5
 800c4de:	6023      	str	r3, [r4, #0]
 800c4e0:	e00e      	b.n	800c500 <_malloc_r+0xa0>
 800c4e2:	6822      	ldr	r2, [r4, #0]
 800c4e4:	1b52      	subs	r2, r2, r5
 800c4e6:	d41e      	bmi.n	800c526 <_malloc_r+0xc6>
 800c4e8:	2a0b      	cmp	r2, #11
 800c4ea:	d916      	bls.n	800c51a <_malloc_r+0xba>
 800c4ec:	1961      	adds	r1, r4, r5
 800c4ee:	42a3      	cmp	r3, r4
 800c4f0:	6025      	str	r5, [r4, #0]
 800c4f2:	bf18      	it	ne
 800c4f4:	6059      	strne	r1, [r3, #4]
 800c4f6:	6863      	ldr	r3, [r4, #4]
 800c4f8:	bf08      	it	eq
 800c4fa:	6031      	streq	r1, [r6, #0]
 800c4fc:	5162      	str	r2, [r4, r5]
 800c4fe:	604b      	str	r3, [r1, #4]
 800c500:	4638      	mov	r0, r7
 800c502:	f104 060b 	add.w	r6, r4, #11
 800c506:	f000 fe0f 	bl	800d128 <__malloc_unlock>
 800c50a:	f026 0607 	bic.w	r6, r6, #7
 800c50e:	1d23      	adds	r3, r4, #4
 800c510:	1af2      	subs	r2, r6, r3
 800c512:	d0b6      	beq.n	800c482 <_malloc_r+0x22>
 800c514:	1b9b      	subs	r3, r3, r6
 800c516:	50a3      	str	r3, [r4, r2]
 800c518:	e7b3      	b.n	800c482 <_malloc_r+0x22>
 800c51a:	6862      	ldr	r2, [r4, #4]
 800c51c:	42a3      	cmp	r3, r4
 800c51e:	bf0c      	ite	eq
 800c520:	6032      	streq	r2, [r6, #0]
 800c522:	605a      	strne	r2, [r3, #4]
 800c524:	e7ec      	b.n	800c500 <_malloc_r+0xa0>
 800c526:	4623      	mov	r3, r4
 800c528:	6864      	ldr	r4, [r4, #4]
 800c52a:	e7b2      	b.n	800c492 <_malloc_r+0x32>
 800c52c:	4634      	mov	r4, r6
 800c52e:	6876      	ldr	r6, [r6, #4]
 800c530:	e7b9      	b.n	800c4a6 <_malloc_r+0x46>
 800c532:	230c      	movs	r3, #12
 800c534:	4638      	mov	r0, r7
 800c536:	603b      	str	r3, [r7, #0]
 800c538:	f000 fdf6 	bl	800d128 <__malloc_unlock>
 800c53c:	e7a1      	b.n	800c482 <_malloc_r+0x22>
 800c53e:	6025      	str	r5, [r4, #0]
 800c540:	e7de      	b.n	800c500 <_malloc_r+0xa0>
 800c542:	bf00      	nop
 800c544:	2000155c 	.word	0x2000155c

0800c548 <__ssputs_r>:
 800c548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c54c:	688e      	ldr	r6, [r1, #8]
 800c54e:	4682      	mov	sl, r0
 800c550:	429e      	cmp	r6, r3
 800c552:	460c      	mov	r4, r1
 800c554:	4690      	mov	r8, r2
 800c556:	461f      	mov	r7, r3
 800c558:	d838      	bhi.n	800c5cc <__ssputs_r+0x84>
 800c55a:	898a      	ldrh	r2, [r1, #12]
 800c55c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c560:	d032      	beq.n	800c5c8 <__ssputs_r+0x80>
 800c562:	6825      	ldr	r5, [r4, #0]
 800c564:	6909      	ldr	r1, [r1, #16]
 800c566:	3301      	adds	r3, #1
 800c568:	eba5 0901 	sub.w	r9, r5, r1
 800c56c:	6965      	ldr	r5, [r4, #20]
 800c56e:	444b      	add	r3, r9
 800c570:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c574:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c578:	106d      	asrs	r5, r5, #1
 800c57a:	429d      	cmp	r5, r3
 800c57c:	bf38      	it	cc
 800c57e:	461d      	movcc	r5, r3
 800c580:	0553      	lsls	r3, r2, #21
 800c582:	d531      	bpl.n	800c5e8 <__ssputs_r+0xa0>
 800c584:	4629      	mov	r1, r5
 800c586:	f7ff ff6b 	bl	800c460 <_malloc_r>
 800c58a:	4606      	mov	r6, r0
 800c58c:	b950      	cbnz	r0, 800c5a4 <__ssputs_r+0x5c>
 800c58e:	230c      	movs	r3, #12
 800c590:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c594:	f8ca 3000 	str.w	r3, [sl]
 800c598:	89a3      	ldrh	r3, [r4, #12]
 800c59a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c59e:	81a3      	strh	r3, [r4, #12]
 800c5a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5a4:	464a      	mov	r2, r9
 800c5a6:	6921      	ldr	r1, [r4, #16]
 800c5a8:	f7ff fa18 	bl	800b9dc <memcpy>
 800c5ac:	89a3      	ldrh	r3, [r4, #12]
 800c5ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c5b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5b6:	81a3      	strh	r3, [r4, #12]
 800c5b8:	6126      	str	r6, [r4, #16]
 800c5ba:	444e      	add	r6, r9
 800c5bc:	6026      	str	r6, [r4, #0]
 800c5be:	463e      	mov	r6, r7
 800c5c0:	6165      	str	r5, [r4, #20]
 800c5c2:	eba5 0509 	sub.w	r5, r5, r9
 800c5c6:	60a5      	str	r5, [r4, #8]
 800c5c8:	42be      	cmp	r6, r7
 800c5ca:	d900      	bls.n	800c5ce <__ssputs_r+0x86>
 800c5cc:	463e      	mov	r6, r7
 800c5ce:	4632      	mov	r2, r6
 800c5d0:	4641      	mov	r1, r8
 800c5d2:	6820      	ldr	r0, [r4, #0]
 800c5d4:	f000 fd88 	bl	800d0e8 <memmove>
 800c5d8:	68a3      	ldr	r3, [r4, #8]
 800c5da:	2000      	movs	r0, #0
 800c5dc:	1b9b      	subs	r3, r3, r6
 800c5de:	60a3      	str	r3, [r4, #8]
 800c5e0:	6823      	ldr	r3, [r4, #0]
 800c5e2:	4433      	add	r3, r6
 800c5e4:	6023      	str	r3, [r4, #0]
 800c5e6:	e7db      	b.n	800c5a0 <__ssputs_r+0x58>
 800c5e8:	462a      	mov	r2, r5
 800c5ea:	f000 fda3 	bl	800d134 <_realloc_r>
 800c5ee:	4606      	mov	r6, r0
 800c5f0:	2800      	cmp	r0, #0
 800c5f2:	d1e1      	bne.n	800c5b8 <__ssputs_r+0x70>
 800c5f4:	4650      	mov	r0, sl
 800c5f6:	6921      	ldr	r1, [r4, #16]
 800c5f8:	f7ff feca 	bl	800c390 <_free_r>
 800c5fc:	e7c7      	b.n	800c58e <__ssputs_r+0x46>
	...

0800c600 <_svfiprintf_r>:
 800c600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c604:	4698      	mov	r8, r3
 800c606:	898b      	ldrh	r3, [r1, #12]
 800c608:	4607      	mov	r7, r0
 800c60a:	061b      	lsls	r3, r3, #24
 800c60c:	460d      	mov	r5, r1
 800c60e:	4614      	mov	r4, r2
 800c610:	b09d      	sub	sp, #116	; 0x74
 800c612:	d50e      	bpl.n	800c632 <_svfiprintf_r+0x32>
 800c614:	690b      	ldr	r3, [r1, #16]
 800c616:	b963      	cbnz	r3, 800c632 <_svfiprintf_r+0x32>
 800c618:	2140      	movs	r1, #64	; 0x40
 800c61a:	f7ff ff21 	bl	800c460 <_malloc_r>
 800c61e:	6028      	str	r0, [r5, #0]
 800c620:	6128      	str	r0, [r5, #16]
 800c622:	b920      	cbnz	r0, 800c62e <_svfiprintf_r+0x2e>
 800c624:	230c      	movs	r3, #12
 800c626:	603b      	str	r3, [r7, #0]
 800c628:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c62c:	e0d1      	b.n	800c7d2 <_svfiprintf_r+0x1d2>
 800c62e:	2340      	movs	r3, #64	; 0x40
 800c630:	616b      	str	r3, [r5, #20]
 800c632:	2300      	movs	r3, #0
 800c634:	9309      	str	r3, [sp, #36]	; 0x24
 800c636:	2320      	movs	r3, #32
 800c638:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c63c:	2330      	movs	r3, #48	; 0x30
 800c63e:	f04f 0901 	mov.w	r9, #1
 800c642:	f8cd 800c 	str.w	r8, [sp, #12]
 800c646:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c7ec <_svfiprintf_r+0x1ec>
 800c64a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c64e:	4623      	mov	r3, r4
 800c650:	469a      	mov	sl, r3
 800c652:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c656:	b10a      	cbz	r2, 800c65c <_svfiprintf_r+0x5c>
 800c658:	2a25      	cmp	r2, #37	; 0x25
 800c65a:	d1f9      	bne.n	800c650 <_svfiprintf_r+0x50>
 800c65c:	ebba 0b04 	subs.w	fp, sl, r4
 800c660:	d00b      	beq.n	800c67a <_svfiprintf_r+0x7a>
 800c662:	465b      	mov	r3, fp
 800c664:	4622      	mov	r2, r4
 800c666:	4629      	mov	r1, r5
 800c668:	4638      	mov	r0, r7
 800c66a:	f7ff ff6d 	bl	800c548 <__ssputs_r>
 800c66e:	3001      	adds	r0, #1
 800c670:	f000 80aa 	beq.w	800c7c8 <_svfiprintf_r+0x1c8>
 800c674:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c676:	445a      	add	r2, fp
 800c678:	9209      	str	r2, [sp, #36]	; 0x24
 800c67a:	f89a 3000 	ldrb.w	r3, [sl]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	f000 80a2 	beq.w	800c7c8 <_svfiprintf_r+0x1c8>
 800c684:	2300      	movs	r3, #0
 800c686:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c68a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c68e:	f10a 0a01 	add.w	sl, sl, #1
 800c692:	9304      	str	r3, [sp, #16]
 800c694:	9307      	str	r3, [sp, #28]
 800c696:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c69a:	931a      	str	r3, [sp, #104]	; 0x68
 800c69c:	4654      	mov	r4, sl
 800c69e:	2205      	movs	r2, #5
 800c6a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6a4:	4851      	ldr	r0, [pc, #324]	; (800c7ec <_svfiprintf_r+0x1ec>)
 800c6a6:	f7ff f98b 	bl	800b9c0 <memchr>
 800c6aa:	9a04      	ldr	r2, [sp, #16]
 800c6ac:	b9d8      	cbnz	r0, 800c6e6 <_svfiprintf_r+0xe6>
 800c6ae:	06d0      	lsls	r0, r2, #27
 800c6b0:	bf44      	itt	mi
 800c6b2:	2320      	movmi	r3, #32
 800c6b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6b8:	0711      	lsls	r1, r2, #28
 800c6ba:	bf44      	itt	mi
 800c6bc:	232b      	movmi	r3, #43	; 0x2b
 800c6be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6c2:	f89a 3000 	ldrb.w	r3, [sl]
 800c6c6:	2b2a      	cmp	r3, #42	; 0x2a
 800c6c8:	d015      	beq.n	800c6f6 <_svfiprintf_r+0xf6>
 800c6ca:	4654      	mov	r4, sl
 800c6cc:	2000      	movs	r0, #0
 800c6ce:	f04f 0c0a 	mov.w	ip, #10
 800c6d2:	9a07      	ldr	r2, [sp, #28]
 800c6d4:	4621      	mov	r1, r4
 800c6d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6da:	3b30      	subs	r3, #48	; 0x30
 800c6dc:	2b09      	cmp	r3, #9
 800c6de:	d94e      	bls.n	800c77e <_svfiprintf_r+0x17e>
 800c6e0:	b1b0      	cbz	r0, 800c710 <_svfiprintf_r+0x110>
 800c6e2:	9207      	str	r2, [sp, #28]
 800c6e4:	e014      	b.n	800c710 <_svfiprintf_r+0x110>
 800c6e6:	eba0 0308 	sub.w	r3, r0, r8
 800c6ea:	fa09 f303 	lsl.w	r3, r9, r3
 800c6ee:	4313      	orrs	r3, r2
 800c6f0:	46a2      	mov	sl, r4
 800c6f2:	9304      	str	r3, [sp, #16]
 800c6f4:	e7d2      	b.n	800c69c <_svfiprintf_r+0x9c>
 800c6f6:	9b03      	ldr	r3, [sp, #12]
 800c6f8:	1d19      	adds	r1, r3, #4
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	9103      	str	r1, [sp, #12]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	bfbb      	ittet	lt
 800c702:	425b      	neglt	r3, r3
 800c704:	f042 0202 	orrlt.w	r2, r2, #2
 800c708:	9307      	strge	r3, [sp, #28]
 800c70a:	9307      	strlt	r3, [sp, #28]
 800c70c:	bfb8      	it	lt
 800c70e:	9204      	strlt	r2, [sp, #16]
 800c710:	7823      	ldrb	r3, [r4, #0]
 800c712:	2b2e      	cmp	r3, #46	; 0x2e
 800c714:	d10c      	bne.n	800c730 <_svfiprintf_r+0x130>
 800c716:	7863      	ldrb	r3, [r4, #1]
 800c718:	2b2a      	cmp	r3, #42	; 0x2a
 800c71a:	d135      	bne.n	800c788 <_svfiprintf_r+0x188>
 800c71c:	9b03      	ldr	r3, [sp, #12]
 800c71e:	3402      	adds	r4, #2
 800c720:	1d1a      	adds	r2, r3, #4
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	9203      	str	r2, [sp, #12]
 800c726:	2b00      	cmp	r3, #0
 800c728:	bfb8      	it	lt
 800c72a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c72e:	9305      	str	r3, [sp, #20]
 800c730:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800c7f0 <_svfiprintf_r+0x1f0>
 800c734:	2203      	movs	r2, #3
 800c736:	4650      	mov	r0, sl
 800c738:	7821      	ldrb	r1, [r4, #0]
 800c73a:	f7ff f941 	bl	800b9c0 <memchr>
 800c73e:	b140      	cbz	r0, 800c752 <_svfiprintf_r+0x152>
 800c740:	2340      	movs	r3, #64	; 0x40
 800c742:	eba0 000a 	sub.w	r0, r0, sl
 800c746:	fa03 f000 	lsl.w	r0, r3, r0
 800c74a:	9b04      	ldr	r3, [sp, #16]
 800c74c:	3401      	adds	r4, #1
 800c74e:	4303      	orrs	r3, r0
 800c750:	9304      	str	r3, [sp, #16]
 800c752:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c756:	2206      	movs	r2, #6
 800c758:	4826      	ldr	r0, [pc, #152]	; (800c7f4 <_svfiprintf_r+0x1f4>)
 800c75a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c75e:	f7ff f92f 	bl	800b9c0 <memchr>
 800c762:	2800      	cmp	r0, #0
 800c764:	d038      	beq.n	800c7d8 <_svfiprintf_r+0x1d8>
 800c766:	4b24      	ldr	r3, [pc, #144]	; (800c7f8 <_svfiprintf_r+0x1f8>)
 800c768:	bb1b      	cbnz	r3, 800c7b2 <_svfiprintf_r+0x1b2>
 800c76a:	9b03      	ldr	r3, [sp, #12]
 800c76c:	3307      	adds	r3, #7
 800c76e:	f023 0307 	bic.w	r3, r3, #7
 800c772:	3308      	adds	r3, #8
 800c774:	9303      	str	r3, [sp, #12]
 800c776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c778:	4433      	add	r3, r6
 800c77a:	9309      	str	r3, [sp, #36]	; 0x24
 800c77c:	e767      	b.n	800c64e <_svfiprintf_r+0x4e>
 800c77e:	460c      	mov	r4, r1
 800c780:	2001      	movs	r0, #1
 800c782:	fb0c 3202 	mla	r2, ip, r2, r3
 800c786:	e7a5      	b.n	800c6d4 <_svfiprintf_r+0xd4>
 800c788:	2300      	movs	r3, #0
 800c78a:	f04f 0c0a 	mov.w	ip, #10
 800c78e:	4619      	mov	r1, r3
 800c790:	3401      	adds	r4, #1
 800c792:	9305      	str	r3, [sp, #20]
 800c794:	4620      	mov	r0, r4
 800c796:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c79a:	3a30      	subs	r2, #48	; 0x30
 800c79c:	2a09      	cmp	r2, #9
 800c79e:	d903      	bls.n	800c7a8 <_svfiprintf_r+0x1a8>
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d0c5      	beq.n	800c730 <_svfiprintf_r+0x130>
 800c7a4:	9105      	str	r1, [sp, #20]
 800c7a6:	e7c3      	b.n	800c730 <_svfiprintf_r+0x130>
 800c7a8:	4604      	mov	r4, r0
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7b0:	e7f0      	b.n	800c794 <_svfiprintf_r+0x194>
 800c7b2:	ab03      	add	r3, sp, #12
 800c7b4:	9300      	str	r3, [sp, #0]
 800c7b6:	462a      	mov	r2, r5
 800c7b8:	4638      	mov	r0, r7
 800c7ba:	4b10      	ldr	r3, [pc, #64]	; (800c7fc <_svfiprintf_r+0x1fc>)
 800c7bc:	a904      	add	r1, sp, #16
 800c7be:	f7fc f9e7 	bl	8008b90 <_printf_float>
 800c7c2:	1c42      	adds	r2, r0, #1
 800c7c4:	4606      	mov	r6, r0
 800c7c6:	d1d6      	bne.n	800c776 <_svfiprintf_r+0x176>
 800c7c8:	89ab      	ldrh	r3, [r5, #12]
 800c7ca:	065b      	lsls	r3, r3, #25
 800c7cc:	f53f af2c 	bmi.w	800c628 <_svfiprintf_r+0x28>
 800c7d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7d2:	b01d      	add	sp, #116	; 0x74
 800c7d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7d8:	ab03      	add	r3, sp, #12
 800c7da:	9300      	str	r3, [sp, #0]
 800c7dc:	462a      	mov	r2, r5
 800c7de:	4638      	mov	r0, r7
 800c7e0:	4b06      	ldr	r3, [pc, #24]	; (800c7fc <_svfiprintf_r+0x1fc>)
 800c7e2:	a904      	add	r1, sp, #16
 800c7e4:	f7fc fc70 	bl	80090c8 <_printf_i>
 800c7e8:	e7eb      	b.n	800c7c2 <_svfiprintf_r+0x1c2>
 800c7ea:	bf00      	nop
 800c7ec:	0800d89c 	.word	0x0800d89c
 800c7f0:	0800d8a2 	.word	0x0800d8a2
 800c7f4:	0800d8a6 	.word	0x0800d8a6
 800c7f8:	08008b91 	.word	0x08008b91
 800c7fc:	0800c549 	.word	0x0800c549

0800c800 <__sfputc_r>:
 800c800:	6893      	ldr	r3, [r2, #8]
 800c802:	b410      	push	{r4}
 800c804:	3b01      	subs	r3, #1
 800c806:	2b00      	cmp	r3, #0
 800c808:	6093      	str	r3, [r2, #8]
 800c80a:	da07      	bge.n	800c81c <__sfputc_r+0x1c>
 800c80c:	6994      	ldr	r4, [r2, #24]
 800c80e:	42a3      	cmp	r3, r4
 800c810:	db01      	blt.n	800c816 <__sfputc_r+0x16>
 800c812:	290a      	cmp	r1, #10
 800c814:	d102      	bne.n	800c81c <__sfputc_r+0x1c>
 800c816:	bc10      	pop	{r4}
 800c818:	f000 b974 	b.w	800cb04 <__swbuf_r>
 800c81c:	6813      	ldr	r3, [r2, #0]
 800c81e:	1c58      	adds	r0, r3, #1
 800c820:	6010      	str	r0, [r2, #0]
 800c822:	7019      	strb	r1, [r3, #0]
 800c824:	4608      	mov	r0, r1
 800c826:	bc10      	pop	{r4}
 800c828:	4770      	bx	lr

0800c82a <__sfputs_r>:
 800c82a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c82c:	4606      	mov	r6, r0
 800c82e:	460f      	mov	r7, r1
 800c830:	4614      	mov	r4, r2
 800c832:	18d5      	adds	r5, r2, r3
 800c834:	42ac      	cmp	r4, r5
 800c836:	d101      	bne.n	800c83c <__sfputs_r+0x12>
 800c838:	2000      	movs	r0, #0
 800c83a:	e007      	b.n	800c84c <__sfputs_r+0x22>
 800c83c:	463a      	mov	r2, r7
 800c83e:	4630      	mov	r0, r6
 800c840:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c844:	f7ff ffdc 	bl	800c800 <__sfputc_r>
 800c848:	1c43      	adds	r3, r0, #1
 800c84a:	d1f3      	bne.n	800c834 <__sfputs_r+0xa>
 800c84c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c850 <_vfiprintf_r>:
 800c850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c854:	460d      	mov	r5, r1
 800c856:	4614      	mov	r4, r2
 800c858:	4698      	mov	r8, r3
 800c85a:	4606      	mov	r6, r0
 800c85c:	b09d      	sub	sp, #116	; 0x74
 800c85e:	b118      	cbz	r0, 800c868 <_vfiprintf_r+0x18>
 800c860:	6983      	ldr	r3, [r0, #24]
 800c862:	b90b      	cbnz	r3, 800c868 <_vfiprintf_r+0x18>
 800c864:	f000 fb3a 	bl	800cedc <__sinit>
 800c868:	4b89      	ldr	r3, [pc, #548]	; (800ca90 <_vfiprintf_r+0x240>)
 800c86a:	429d      	cmp	r5, r3
 800c86c:	d11b      	bne.n	800c8a6 <_vfiprintf_r+0x56>
 800c86e:	6875      	ldr	r5, [r6, #4]
 800c870:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c872:	07d9      	lsls	r1, r3, #31
 800c874:	d405      	bmi.n	800c882 <_vfiprintf_r+0x32>
 800c876:	89ab      	ldrh	r3, [r5, #12]
 800c878:	059a      	lsls	r2, r3, #22
 800c87a:	d402      	bmi.n	800c882 <_vfiprintf_r+0x32>
 800c87c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c87e:	f000 fbcb 	bl	800d018 <__retarget_lock_acquire_recursive>
 800c882:	89ab      	ldrh	r3, [r5, #12]
 800c884:	071b      	lsls	r3, r3, #28
 800c886:	d501      	bpl.n	800c88c <_vfiprintf_r+0x3c>
 800c888:	692b      	ldr	r3, [r5, #16]
 800c88a:	b9eb      	cbnz	r3, 800c8c8 <_vfiprintf_r+0x78>
 800c88c:	4629      	mov	r1, r5
 800c88e:	4630      	mov	r0, r6
 800c890:	f000 f998 	bl	800cbc4 <__swsetup_r>
 800c894:	b1c0      	cbz	r0, 800c8c8 <_vfiprintf_r+0x78>
 800c896:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c898:	07dc      	lsls	r4, r3, #31
 800c89a:	d50e      	bpl.n	800c8ba <_vfiprintf_r+0x6a>
 800c89c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c8a0:	b01d      	add	sp, #116	; 0x74
 800c8a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8a6:	4b7b      	ldr	r3, [pc, #492]	; (800ca94 <_vfiprintf_r+0x244>)
 800c8a8:	429d      	cmp	r5, r3
 800c8aa:	d101      	bne.n	800c8b0 <_vfiprintf_r+0x60>
 800c8ac:	68b5      	ldr	r5, [r6, #8]
 800c8ae:	e7df      	b.n	800c870 <_vfiprintf_r+0x20>
 800c8b0:	4b79      	ldr	r3, [pc, #484]	; (800ca98 <_vfiprintf_r+0x248>)
 800c8b2:	429d      	cmp	r5, r3
 800c8b4:	bf08      	it	eq
 800c8b6:	68f5      	ldreq	r5, [r6, #12]
 800c8b8:	e7da      	b.n	800c870 <_vfiprintf_r+0x20>
 800c8ba:	89ab      	ldrh	r3, [r5, #12]
 800c8bc:	0598      	lsls	r0, r3, #22
 800c8be:	d4ed      	bmi.n	800c89c <_vfiprintf_r+0x4c>
 800c8c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c8c2:	f000 fbaa 	bl	800d01a <__retarget_lock_release_recursive>
 800c8c6:	e7e9      	b.n	800c89c <_vfiprintf_r+0x4c>
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	9309      	str	r3, [sp, #36]	; 0x24
 800c8cc:	2320      	movs	r3, #32
 800c8ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c8d2:	2330      	movs	r3, #48	; 0x30
 800c8d4:	f04f 0901 	mov.w	r9, #1
 800c8d8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8dc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800ca9c <_vfiprintf_r+0x24c>
 800c8e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c8e4:	4623      	mov	r3, r4
 800c8e6:	469a      	mov	sl, r3
 800c8e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8ec:	b10a      	cbz	r2, 800c8f2 <_vfiprintf_r+0xa2>
 800c8ee:	2a25      	cmp	r2, #37	; 0x25
 800c8f0:	d1f9      	bne.n	800c8e6 <_vfiprintf_r+0x96>
 800c8f2:	ebba 0b04 	subs.w	fp, sl, r4
 800c8f6:	d00b      	beq.n	800c910 <_vfiprintf_r+0xc0>
 800c8f8:	465b      	mov	r3, fp
 800c8fa:	4622      	mov	r2, r4
 800c8fc:	4629      	mov	r1, r5
 800c8fe:	4630      	mov	r0, r6
 800c900:	f7ff ff93 	bl	800c82a <__sfputs_r>
 800c904:	3001      	adds	r0, #1
 800c906:	f000 80aa 	beq.w	800ca5e <_vfiprintf_r+0x20e>
 800c90a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c90c:	445a      	add	r2, fp
 800c90e:	9209      	str	r2, [sp, #36]	; 0x24
 800c910:	f89a 3000 	ldrb.w	r3, [sl]
 800c914:	2b00      	cmp	r3, #0
 800c916:	f000 80a2 	beq.w	800ca5e <_vfiprintf_r+0x20e>
 800c91a:	2300      	movs	r3, #0
 800c91c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c920:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c924:	f10a 0a01 	add.w	sl, sl, #1
 800c928:	9304      	str	r3, [sp, #16]
 800c92a:	9307      	str	r3, [sp, #28]
 800c92c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c930:	931a      	str	r3, [sp, #104]	; 0x68
 800c932:	4654      	mov	r4, sl
 800c934:	2205      	movs	r2, #5
 800c936:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c93a:	4858      	ldr	r0, [pc, #352]	; (800ca9c <_vfiprintf_r+0x24c>)
 800c93c:	f7ff f840 	bl	800b9c0 <memchr>
 800c940:	9a04      	ldr	r2, [sp, #16]
 800c942:	b9d8      	cbnz	r0, 800c97c <_vfiprintf_r+0x12c>
 800c944:	06d1      	lsls	r1, r2, #27
 800c946:	bf44      	itt	mi
 800c948:	2320      	movmi	r3, #32
 800c94a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c94e:	0713      	lsls	r3, r2, #28
 800c950:	bf44      	itt	mi
 800c952:	232b      	movmi	r3, #43	; 0x2b
 800c954:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c958:	f89a 3000 	ldrb.w	r3, [sl]
 800c95c:	2b2a      	cmp	r3, #42	; 0x2a
 800c95e:	d015      	beq.n	800c98c <_vfiprintf_r+0x13c>
 800c960:	4654      	mov	r4, sl
 800c962:	2000      	movs	r0, #0
 800c964:	f04f 0c0a 	mov.w	ip, #10
 800c968:	9a07      	ldr	r2, [sp, #28]
 800c96a:	4621      	mov	r1, r4
 800c96c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c970:	3b30      	subs	r3, #48	; 0x30
 800c972:	2b09      	cmp	r3, #9
 800c974:	d94e      	bls.n	800ca14 <_vfiprintf_r+0x1c4>
 800c976:	b1b0      	cbz	r0, 800c9a6 <_vfiprintf_r+0x156>
 800c978:	9207      	str	r2, [sp, #28]
 800c97a:	e014      	b.n	800c9a6 <_vfiprintf_r+0x156>
 800c97c:	eba0 0308 	sub.w	r3, r0, r8
 800c980:	fa09 f303 	lsl.w	r3, r9, r3
 800c984:	4313      	orrs	r3, r2
 800c986:	46a2      	mov	sl, r4
 800c988:	9304      	str	r3, [sp, #16]
 800c98a:	e7d2      	b.n	800c932 <_vfiprintf_r+0xe2>
 800c98c:	9b03      	ldr	r3, [sp, #12]
 800c98e:	1d19      	adds	r1, r3, #4
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	9103      	str	r1, [sp, #12]
 800c994:	2b00      	cmp	r3, #0
 800c996:	bfbb      	ittet	lt
 800c998:	425b      	neglt	r3, r3
 800c99a:	f042 0202 	orrlt.w	r2, r2, #2
 800c99e:	9307      	strge	r3, [sp, #28]
 800c9a0:	9307      	strlt	r3, [sp, #28]
 800c9a2:	bfb8      	it	lt
 800c9a4:	9204      	strlt	r2, [sp, #16]
 800c9a6:	7823      	ldrb	r3, [r4, #0]
 800c9a8:	2b2e      	cmp	r3, #46	; 0x2e
 800c9aa:	d10c      	bne.n	800c9c6 <_vfiprintf_r+0x176>
 800c9ac:	7863      	ldrb	r3, [r4, #1]
 800c9ae:	2b2a      	cmp	r3, #42	; 0x2a
 800c9b0:	d135      	bne.n	800ca1e <_vfiprintf_r+0x1ce>
 800c9b2:	9b03      	ldr	r3, [sp, #12]
 800c9b4:	3402      	adds	r4, #2
 800c9b6:	1d1a      	adds	r2, r3, #4
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	9203      	str	r2, [sp, #12]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	bfb8      	it	lt
 800c9c0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c9c4:	9305      	str	r3, [sp, #20]
 800c9c6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800caa0 <_vfiprintf_r+0x250>
 800c9ca:	2203      	movs	r2, #3
 800c9cc:	4650      	mov	r0, sl
 800c9ce:	7821      	ldrb	r1, [r4, #0]
 800c9d0:	f7fe fff6 	bl	800b9c0 <memchr>
 800c9d4:	b140      	cbz	r0, 800c9e8 <_vfiprintf_r+0x198>
 800c9d6:	2340      	movs	r3, #64	; 0x40
 800c9d8:	eba0 000a 	sub.w	r0, r0, sl
 800c9dc:	fa03 f000 	lsl.w	r0, r3, r0
 800c9e0:	9b04      	ldr	r3, [sp, #16]
 800c9e2:	3401      	adds	r4, #1
 800c9e4:	4303      	orrs	r3, r0
 800c9e6:	9304      	str	r3, [sp, #16]
 800c9e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9ec:	2206      	movs	r2, #6
 800c9ee:	482d      	ldr	r0, [pc, #180]	; (800caa4 <_vfiprintf_r+0x254>)
 800c9f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c9f4:	f7fe ffe4 	bl	800b9c0 <memchr>
 800c9f8:	2800      	cmp	r0, #0
 800c9fa:	d03f      	beq.n	800ca7c <_vfiprintf_r+0x22c>
 800c9fc:	4b2a      	ldr	r3, [pc, #168]	; (800caa8 <_vfiprintf_r+0x258>)
 800c9fe:	bb1b      	cbnz	r3, 800ca48 <_vfiprintf_r+0x1f8>
 800ca00:	9b03      	ldr	r3, [sp, #12]
 800ca02:	3307      	adds	r3, #7
 800ca04:	f023 0307 	bic.w	r3, r3, #7
 800ca08:	3308      	adds	r3, #8
 800ca0a:	9303      	str	r3, [sp, #12]
 800ca0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca0e:	443b      	add	r3, r7
 800ca10:	9309      	str	r3, [sp, #36]	; 0x24
 800ca12:	e767      	b.n	800c8e4 <_vfiprintf_r+0x94>
 800ca14:	460c      	mov	r4, r1
 800ca16:	2001      	movs	r0, #1
 800ca18:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca1c:	e7a5      	b.n	800c96a <_vfiprintf_r+0x11a>
 800ca1e:	2300      	movs	r3, #0
 800ca20:	f04f 0c0a 	mov.w	ip, #10
 800ca24:	4619      	mov	r1, r3
 800ca26:	3401      	adds	r4, #1
 800ca28:	9305      	str	r3, [sp, #20]
 800ca2a:	4620      	mov	r0, r4
 800ca2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca30:	3a30      	subs	r2, #48	; 0x30
 800ca32:	2a09      	cmp	r2, #9
 800ca34:	d903      	bls.n	800ca3e <_vfiprintf_r+0x1ee>
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d0c5      	beq.n	800c9c6 <_vfiprintf_r+0x176>
 800ca3a:	9105      	str	r1, [sp, #20]
 800ca3c:	e7c3      	b.n	800c9c6 <_vfiprintf_r+0x176>
 800ca3e:	4604      	mov	r4, r0
 800ca40:	2301      	movs	r3, #1
 800ca42:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca46:	e7f0      	b.n	800ca2a <_vfiprintf_r+0x1da>
 800ca48:	ab03      	add	r3, sp, #12
 800ca4a:	9300      	str	r3, [sp, #0]
 800ca4c:	462a      	mov	r2, r5
 800ca4e:	4630      	mov	r0, r6
 800ca50:	4b16      	ldr	r3, [pc, #88]	; (800caac <_vfiprintf_r+0x25c>)
 800ca52:	a904      	add	r1, sp, #16
 800ca54:	f7fc f89c 	bl	8008b90 <_printf_float>
 800ca58:	4607      	mov	r7, r0
 800ca5a:	1c78      	adds	r0, r7, #1
 800ca5c:	d1d6      	bne.n	800ca0c <_vfiprintf_r+0x1bc>
 800ca5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca60:	07d9      	lsls	r1, r3, #31
 800ca62:	d405      	bmi.n	800ca70 <_vfiprintf_r+0x220>
 800ca64:	89ab      	ldrh	r3, [r5, #12]
 800ca66:	059a      	lsls	r2, r3, #22
 800ca68:	d402      	bmi.n	800ca70 <_vfiprintf_r+0x220>
 800ca6a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca6c:	f000 fad5 	bl	800d01a <__retarget_lock_release_recursive>
 800ca70:	89ab      	ldrh	r3, [r5, #12]
 800ca72:	065b      	lsls	r3, r3, #25
 800ca74:	f53f af12 	bmi.w	800c89c <_vfiprintf_r+0x4c>
 800ca78:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca7a:	e711      	b.n	800c8a0 <_vfiprintf_r+0x50>
 800ca7c:	ab03      	add	r3, sp, #12
 800ca7e:	9300      	str	r3, [sp, #0]
 800ca80:	462a      	mov	r2, r5
 800ca82:	4630      	mov	r0, r6
 800ca84:	4b09      	ldr	r3, [pc, #36]	; (800caac <_vfiprintf_r+0x25c>)
 800ca86:	a904      	add	r1, sp, #16
 800ca88:	f7fc fb1e 	bl	80090c8 <_printf_i>
 800ca8c:	e7e4      	b.n	800ca58 <_vfiprintf_r+0x208>
 800ca8e:	bf00      	nop
 800ca90:	0800d8d0 	.word	0x0800d8d0
 800ca94:	0800d8f0 	.word	0x0800d8f0
 800ca98:	0800d8b0 	.word	0x0800d8b0
 800ca9c:	0800d89c 	.word	0x0800d89c
 800caa0:	0800d8a2 	.word	0x0800d8a2
 800caa4:	0800d8a6 	.word	0x0800d8a6
 800caa8:	08008b91 	.word	0x08008b91
 800caac:	0800c82b 	.word	0x0800c82b

0800cab0 <nan>:
 800cab0:	2000      	movs	r0, #0
 800cab2:	4901      	ldr	r1, [pc, #4]	; (800cab8 <nan+0x8>)
 800cab4:	4770      	bx	lr
 800cab6:	bf00      	nop
 800cab8:	7ff80000 	.word	0x7ff80000

0800cabc <_sbrk_r>:
 800cabc:	b538      	push	{r3, r4, r5, lr}
 800cabe:	2300      	movs	r3, #0
 800cac0:	4d05      	ldr	r5, [pc, #20]	; (800cad8 <_sbrk_r+0x1c>)
 800cac2:	4604      	mov	r4, r0
 800cac4:	4608      	mov	r0, r1
 800cac6:	602b      	str	r3, [r5, #0]
 800cac8:	f7f4 faf0 	bl	80010ac <_sbrk>
 800cacc:	1c43      	adds	r3, r0, #1
 800cace:	d102      	bne.n	800cad6 <_sbrk_r+0x1a>
 800cad0:	682b      	ldr	r3, [r5, #0]
 800cad2:	b103      	cbz	r3, 800cad6 <_sbrk_r+0x1a>
 800cad4:	6023      	str	r3, [r4, #0]
 800cad6:	bd38      	pop	{r3, r4, r5, pc}
 800cad8:	20001568 	.word	0x20001568

0800cadc <strncmp>:
 800cadc:	4603      	mov	r3, r0
 800cade:	b510      	push	{r4, lr}
 800cae0:	b172      	cbz	r2, 800cb00 <strncmp+0x24>
 800cae2:	3901      	subs	r1, #1
 800cae4:	1884      	adds	r4, r0, r2
 800cae6:	f813 0b01 	ldrb.w	r0, [r3], #1
 800caea:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800caee:	4290      	cmp	r0, r2
 800caf0:	d101      	bne.n	800caf6 <strncmp+0x1a>
 800caf2:	42a3      	cmp	r3, r4
 800caf4:	d101      	bne.n	800cafa <strncmp+0x1e>
 800caf6:	1a80      	subs	r0, r0, r2
 800caf8:	bd10      	pop	{r4, pc}
 800cafa:	2800      	cmp	r0, #0
 800cafc:	d1f3      	bne.n	800cae6 <strncmp+0xa>
 800cafe:	e7fa      	b.n	800caf6 <strncmp+0x1a>
 800cb00:	4610      	mov	r0, r2
 800cb02:	e7f9      	b.n	800caf8 <strncmp+0x1c>

0800cb04 <__swbuf_r>:
 800cb04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb06:	460e      	mov	r6, r1
 800cb08:	4614      	mov	r4, r2
 800cb0a:	4605      	mov	r5, r0
 800cb0c:	b118      	cbz	r0, 800cb16 <__swbuf_r+0x12>
 800cb0e:	6983      	ldr	r3, [r0, #24]
 800cb10:	b90b      	cbnz	r3, 800cb16 <__swbuf_r+0x12>
 800cb12:	f000 f9e3 	bl	800cedc <__sinit>
 800cb16:	4b21      	ldr	r3, [pc, #132]	; (800cb9c <__swbuf_r+0x98>)
 800cb18:	429c      	cmp	r4, r3
 800cb1a:	d12b      	bne.n	800cb74 <__swbuf_r+0x70>
 800cb1c:	686c      	ldr	r4, [r5, #4]
 800cb1e:	69a3      	ldr	r3, [r4, #24]
 800cb20:	60a3      	str	r3, [r4, #8]
 800cb22:	89a3      	ldrh	r3, [r4, #12]
 800cb24:	071a      	lsls	r2, r3, #28
 800cb26:	d52f      	bpl.n	800cb88 <__swbuf_r+0x84>
 800cb28:	6923      	ldr	r3, [r4, #16]
 800cb2a:	b36b      	cbz	r3, 800cb88 <__swbuf_r+0x84>
 800cb2c:	6923      	ldr	r3, [r4, #16]
 800cb2e:	6820      	ldr	r0, [r4, #0]
 800cb30:	b2f6      	uxtb	r6, r6
 800cb32:	1ac0      	subs	r0, r0, r3
 800cb34:	6963      	ldr	r3, [r4, #20]
 800cb36:	4637      	mov	r7, r6
 800cb38:	4283      	cmp	r3, r0
 800cb3a:	dc04      	bgt.n	800cb46 <__swbuf_r+0x42>
 800cb3c:	4621      	mov	r1, r4
 800cb3e:	4628      	mov	r0, r5
 800cb40:	f000 f938 	bl	800cdb4 <_fflush_r>
 800cb44:	bb30      	cbnz	r0, 800cb94 <__swbuf_r+0x90>
 800cb46:	68a3      	ldr	r3, [r4, #8]
 800cb48:	3001      	adds	r0, #1
 800cb4a:	3b01      	subs	r3, #1
 800cb4c:	60a3      	str	r3, [r4, #8]
 800cb4e:	6823      	ldr	r3, [r4, #0]
 800cb50:	1c5a      	adds	r2, r3, #1
 800cb52:	6022      	str	r2, [r4, #0]
 800cb54:	701e      	strb	r6, [r3, #0]
 800cb56:	6963      	ldr	r3, [r4, #20]
 800cb58:	4283      	cmp	r3, r0
 800cb5a:	d004      	beq.n	800cb66 <__swbuf_r+0x62>
 800cb5c:	89a3      	ldrh	r3, [r4, #12]
 800cb5e:	07db      	lsls	r3, r3, #31
 800cb60:	d506      	bpl.n	800cb70 <__swbuf_r+0x6c>
 800cb62:	2e0a      	cmp	r6, #10
 800cb64:	d104      	bne.n	800cb70 <__swbuf_r+0x6c>
 800cb66:	4621      	mov	r1, r4
 800cb68:	4628      	mov	r0, r5
 800cb6a:	f000 f923 	bl	800cdb4 <_fflush_r>
 800cb6e:	b988      	cbnz	r0, 800cb94 <__swbuf_r+0x90>
 800cb70:	4638      	mov	r0, r7
 800cb72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb74:	4b0a      	ldr	r3, [pc, #40]	; (800cba0 <__swbuf_r+0x9c>)
 800cb76:	429c      	cmp	r4, r3
 800cb78:	d101      	bne.n	800cb7e <__swbuf_r+0x7a>
 800cb7a:	68ac      	ldr	r4, [r5, #8]
 800cb7c:	e7cf      	b.n	800cb1e <__swbuf_r+0x1a>
 800cb7e:	4b09      	ldr	r3, [pc, #36]	; (800cba4 <__swbuf_r+0xa0>)
 800cb80:	429c      	cmp	r4, r3
 800cb82:	bf08      	it	eq
 800cb84:	68ec      	ldreq	r4, [r5, #12]
 800cb86:	e7ca      	b.n	800cb1e <__swbuf_r+0x1a>
 800cb88:	4621      	mov	r1, r4
 800cb8a:	4628      	mov	r0, r5
 800cb8c:	f000 f81a 	bl	800cbc4 <__swsetup_r>
 800cb90:	2800      	cmp	r0, #0
 800cb92:	d0cb      	beq.n	800cb2c <__swbuf_r+0x28>
 800cb94:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800cb98:	e7ea      	b.n	800cb70 <__swbuf_r+0x6c>
 800cb9a:	bf00      	nop
 800cb9c:	0800d8d0 	.word	0x0800d8d0
 800cba0:	0800d8f0 	.word	0x0800d8f0
 800cba4:	0800d8b0 	.word	0x0800d8b0

0800cba8 <__ascii_wctomb>:
 800cba8:	4603      	mov	r3, r0
 800cbaa:	4608      	mov	r0, r1
 800cbac:	b141      	cbz	r1, 800cbc0 <__ascii_wctomb+0x18>
 800cbae:	2aff      	cmp	r2, #255	; 0xff
 800cbb0:	d904      	bls.n	800cbbc <__ascii_wctomb+0x14>
 800cbb2:	228a      	movs	r2, #138	; 0x8a
 800cbb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cbb8:	601a      	str	r2, [r3, #0]
 800cbba:	4770      	bx	lr
 800cbbc:	2001      	movs	r0, #1
 800cbbe:	700a      	strb	r2, [r1, #0]
 800cbc0:	4770      	bx	lr
	...

0800cbc4 <__swsetup_r>:
 800cbc4:	4b32      	ldr	r3, [pc, #200]	; (800cc90 <__swsetup_r+0xcc>)
 800cbc6:	b570      	push	{r4, r5, r6, lr}
 800cbc8:	681d      	ldr	r5, [r3, #0]
 800cbca:	4606      	mov	r6, r0
 800cbcc:	460c      	mov	r4, r1
 800cbce:	b125      	cbz	r5, 800cbda <__swsetup_r+0x16>
 800cbd0:	69ab      	ldr	r3, [r5, #24]
 800cbd2:	b913      	cbnz	r3, 800cbda <__swsetup_r+0x16>
 800cbd4:	4628      	mov	r0, r5
 800cbd6:	f000 f981 	bl	800cedc <__sinit>
 800cbda:	4b2e      	ldr	r3, [pc, #184]	; (800cc94 <__swsetup_r+0xd0>)
 800cbdc:	429c      	cmp	r4, r3
 800cbde:	d10f      	bne.n	800cc00 <__swsetup_r+0x3c>
 800cbe0:	686c      	ldr	r4, [r5, #4]
 800cbe2:	89a3      	ldrh	r3, [r4, #12]
 800cbe4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cbe8:	0719      	lsls	r1, r3, #28
 800cbea:	d42c      	bmi.n	800cc46 <__swsetup_r+0x82>
 800cbec:	06dd      	lsls	r5, r3, #27
 800cbee:	d411      	bmi.n	800cc14 <__swsetup_r+0x50>
 800cbf0:	2309      	movs	r3, #9
 800cbf2:	6033      	str	r3, [r6, #0]
 800cbf4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cbf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cbfc:	81a3      	strh	r3, [r4, #12]
 800cbfe:	e03e      	b.n	800cc7e <__swsetup_r+0xba>
 800cc00:	4b25      	ldr	r3, [pc, #148]	; (800cc98 <__swsetup_r+0xd4>)
 800cc02:	429c      	cmp	r4, r3
 800cc04:	d101      	bne.n	800cc0a <__swsetup_r+0x46>
 800cc06:	68ac      	ldr	r4, [r5, #8]
 800cc08:	e7eb      	b.n	800cbe2 <__swsetup_r+0x1e>
 800cc0a:	4b24      	ldr	r3, [pc, #144]	; (800cc9c <__swsetup_r+0xd8>)
 800cc0c:	429c      	cmp	r4, r3
 800cc0e:	bf08      	it	eq
 800cc10:	68ec      	ldreq	r4, [r5, #12]
 800cc12:	e7e6      	b.n	800cbe2 <__swsetup_r+0x1e>
 800cc14:	0758      	lsls	r0, r3, #29
 800cc16:	d512      	bpl.n	800cc3e <__swsetup_r+0x7a>
 800cc18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc1a:	b141      	cbz	r1, 800cc2e <__swsetup_r+0x6a>
 800cc1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc20:	4299      	cmp	r1, r3
 800cc22:	d002      	beq.n	800cc2a <__swsetup_r+0x66>
 800cc24:	4630      	mov	r0, r6
 800cc26:	f7ff fbb3 	bl	800c390 <_free_r>
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	6363      	str	r3, [r4, #52]	; 0x34
 800cc2e:	89a3      	ldrh	r3, [r4, #12]
 800cc30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cc34:	81a3      	strh	r3, [r4, #12]
 800cc36:	2300      	movs	r3, #0
 800cc38:	6063      	str	r3, [r4, #4]
 800cc3a:	6923      	ldr	r3, [r4, #16]
 800cc3c:	6023      	str	r3, [r4, #0]
 800cc3e:	89a3      	ldrh	r3, [r4, #12]
 800cc40:	f043 0308 	orr.w	r3, r3, #8
 800cc44:	81a3      	strh	r3, [r4, #12]
 800cc46:	6923      	ldr	r3, [r4, #16]
 800cc48:	b94b      	cbnz	r3, 800cc5e <__swsetup_r+0x9a>
 800cc4a:	89a3      	ldrh	r3, [r4, #12]
 800cc4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cc50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc54:	d003      	beq.n	800cc5e <__swsetup_r+0x9a>
 800cc56:	4621      	mov	r1, r4
 800cc58:	4630      	mov	r0, r6
 800cc5a:	f000 fa05 	bl	800d068 <__smakebuf_r>
 800cc5e:	89a0      	ldrh	r0, [r4, #12]
 800cc60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cc64:	f010 0301 	ands.w	r3, r0, #1
 800cc68:	d00a      	beq.n	800cc80 <__swsetup_r+0xbc>
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	60a3      	str	r3, [r4, #8]
 800cc6e:	6963      	ldr	r3, [r4, #20]
 800cc70:	425b      	negs	r3, r3
 800cc72:	61a3      	str	r3, [r4, #24]
 800cc74:	6923      	ldr	r3, [r4, #16]
 800cc76:	b943      	cbnz	r3, 800cc8a <__swsetup_r+0xc6>
 800cc78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cc7c:	d1ba      	bne.n	800cbf4 <__swsetup_r+0x30>
 800cc7e:	bd70      	pop	{r4, r5, r6, pc}
 800cc80:	0781      	lsls	r1, r0, #30
 800cc82:	bf58      	it	pl
 800cc84:	6963      	ldrpl	r3, [r4, #20]
 800cc86:	60a3      	str	r3, [r4, #8]
 800cc88:	e7f4      	b.n	800cc74 <__swsetup_r+0xb0>
 800cc8a:	2000      	movs	r0, #0
 800cc8c:	e7f7      	b.n	800cc7e <__swsetup_r+0xba>
 800cc8e:	bf00      	nop
 800cc90:	2000017c 	.word	0x2000017c
 800cc94:	0800d8d0 	.word	0x0800d8d0
 800cc98:	0800d8f0 	.word	0x0800d8f0
 800cc9c:	0800d8b0 	.word	0x0800d8b0

0800cca0 <abort>:
 800cca0:	2006      	movs	r0, #6
 800cca2:	b508      	push	{r3, lr}
 800cca4:	f000 fa9e 	bl	800d1e4 <raise>
 800cca8:	2001      	movs	r0, #1
 800ccaa:	f7f4 f98c 	bl	8000fc6 <_exit>
	...

0800ccb0 <__sflush_r>:
 800ccb0:	898a      	ldrh	r2, [r1, #12]
 800ccb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccb4:	4605      	mov	r5, r0
 800ccb6:	0710      	lsls	r0, r2, #28
 800ccb8:	460c      	mov	r4, r1
 800ccba:	d457      	bmi.n	800cd6c <__sflush_r+0xbc>
 800ccbc:	684b      	ldr	r3, [r1, #4]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	dc04      	bgt.n	800cccc <__sflush_r+0x1c>
 800ccc2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	dc01      	bgt.n	800cccc <__sflush_r+0x1c>
 800ccc8:	2000      	movs	r0, #0
 800ccca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cccc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ccce:	2e00      	cmp	r6, #0
 800ccd0:	d0fa      	beq.n	800ccc8 <__sflush_r+0x18>
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ccd8:	682f      	ldr	r7, [r5, #0]
 800ccda:	602b      	str	r3, [r5, #0]
 800ccdc:	d032      	beq.n	800cd44 <__sflush_r+0x94>
 800ccde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cce0:	89a3      	ldrh	r3, [r4, #12]
 800cce2:	075a      	lsls	r2, r3, #29
 800cce4:	d505      	bpl.n	800ccf2 <__sflush_r+0x42>
 800cce6:	6863      	ldr	r3, [r4, #4]
 800cce8:	1ac0      	subs	r0, r0, r3
 800ccea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ccec:	b10b      	cbz	r3, 800ccf2 <__sflush_r+0x42>
 800ccee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ccf0:	1ac0      	subs	r0, r0, r3
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	4602      	mov	r2, r0
 800ccf6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ccf8:	4628      	mov	r0, r5
 800ccfa:	6a21      	ldr	r1, [r4, #32]
 800ccfc:	47b0      	blx	r6
 800ccfe:	1c43      	adds	r3, r0, #1
 800cd00:	89a3      	ldrh	r3, [r4, #12]
 800cd02:	d106      	bne.n	800cd12 <__sflush_r+0x62>
 800cd04:	6829      	ldr	r1, [r5, #0]
 800cd06:	291d      	cmp	r1, #29
 800cd08:	d82c      	bhi.n	800cd64 <__sflush_r+0xb4>
 800cd0a:	4a29      	ldr	r2, [pc, #164]	; (800cdb0 <__sflush_r+0x100>)
 800cd0c:	40ca      	lsrs	r2, r1
 800cd0e:	07d6      	lsls	r6, r2, #31
 800cd10:	d528      	bpl.n	800cd64 <__sflush_r+0xb4>
 800cd12:	2200      	movs	r2, #0
 800cd14:	6062      	str	r2, [r4, #4]
 800cd16:	6922      	ldr	r2, [r4, #16]
 800cd18:	04d9      	lsls	r1, r3, #19
 800cd1a:	6022      	str	r2, [r4, #0]
 800cd1c:	d504      	bpl.n	800cd28 <__sflush_r+0x78>
 800cd1e:	1c42      	adds	r2, r0, #1
 800cd20:	d101      	bne.n	800cd26 <__sflush_r+0x76>
 800cd22:	682b      	ldr	r3, [r5, #0]
 800cd24:	b903      	cbnz	r3, 800cd28 <__sflush_r+0x78>
 800cd26:	6560      	str	r0, [r4, #84]	; 0x54
 800cd28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd2a:	602f      	str	r7, [r5, #0]
 800cd2c:	2900      	cmp	r1, #0
 800cd2e:	d0cb      	beq.n	800ccc8 <__sflush_r+0x18>
 800cd30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd34:	4299      	cmp	r1, r3
 800cd36:	d002      	beq.n	800cd3e <__sflush_r+0x8e>
 800cd38:	4628      	mov	r0, r5
 800cd3a:	f7ff fb29 	bl	800c390 <_free_r>
 800cd3e:	2000      	movs	r0, #0
 800cd40:	6360      	str	r0, [r4, #52]	; 0x34
 800cd42:	e7c2      	b.n	800ccca <__sflush_r+0x1a>
 800cd44:	6a21      	ldr	r1, [r4, #32]
 800cd46:	2301      	movs	r3, #1
 800cd48:	4628      	mov	r0, r5
 800cd4a:	47b0      	blx	r6
 800cd4c:	1c41      	adds	r1, r0, #1
 800cd4e:	d1c7      	bne.n	800cce0 <__sflush_r+0x30>
 800cd50:	682b      	ldr	r3, [r5, #0]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d0c4      	beq.n	800cce0 <__sflush_r+0x30>
 800cd56:	2b1d      	cmp	r3, #29
 800cd58:	d001      	beq.n	800cd5e <__sflush_r+0xae>
 800cd5a:	2b16      	cmp	r3, #22
 800cd5c:	d101      	bne.n	800cd62 <__sflush_r+0xb2>
 800cd5e:	602f      	str	r7, [r5, #0]
 800cd60:	e7b2      	b.n	800ccc8 <__sflush_r+0x18>
 800cd62:	89a3      	ldrh	r3, [r4, #12]
 800cd64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd68:	81a3      	strh	r3, [r4, #12]
 800cd6a:	e7ae      	b.n	800ccca <__sflush_r+0x1a>
 800cd6c:	690f      	ldr	r7, [r1, #16]
 800cd6e:	2f00      	cmp	r7, #0
 800cd70:	d0aa      	beq.n	800ccc8 <__sflush_r+0x18>
 800cd72:	0793      	lsls	r3, r2, #30
 800cd74:	bf18      	it	ne
 800cd76:	2300      	movne	r3, #0
 800cd78:	680e      	ldr	r6, [r1, #0]
 800cd7a:	bf08      	it	eq
 800cd7c:	694b      	ldreq	r3, [r1, #20]
 800cd7e:	1bf6      	subs	r6, r6, r7
 800cd80:	600f      	str	r7, [r1, #0]
 800cd82:	608b      	str	r3, [r1, #8]
 800cd84:	2e00      	cmp	r6, #0
 800cd86:	dd9f      	ble.n	800ccc8 <__sflush_r+0x18>
 800cd88:	4633      	mov	r3, r6
 800cd8a:	463a      	mov	r2, r7
 800cd8c:	4628      	mov	r0, r5
 800cd8e:	6a21      	ldr	r1, [r4, #32]
 800cd90:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800cd94:	47e0      	blx	ip
 800cd96:	2800      	cmp	r0, #0
 800cd98:	dc06      	bgt.n	800cda8 <__sflush_r+0xf8>
 800cd9a:	89a3      	ldrh	r3, [r4, #12]
 800cd9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cda0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cda4:	81a3      	strh	r3, [r4, #12]
 800cda6:	e790      	b.n	800ccca <__sflush_r+0x1a>
 800cda8:	4407      	add	r7, r0
 800cdaa:	1a36      	subs	r6, r6, r0
 800cdac:	e7ea      	b.n	800cd84 <__sflush_r+0xd4>
 800cdae:	bf00      	nop
 800cdb0:	20400001 	.word	0x20400001

0800cdb4 <_fflush_r>:
 800cdb4:	b538      	push	{r3, r4, r5, lr}
 800cdb6:	690b      	ldr	r3, [r1, #16]
 800cdb8:	4605      	mov	r5, r0
 800cdba:	460c      	mov	r4, r1
 800cdbc:	b913      	cbnz	r3, 800cdc4 <_fflush_r+0x10>
 800cdbe:	2500      	movs	r5, #0
 800cdc0:	4628      	mov	r0, r5
 800cdc2:	bd38      	pop	{r3, r4, r5, pc}
 800cdc4:	b118      	cbz	r0, 800cdce <_fflush_r+0x1a>
 800cdc6:	6983      	ldr	r3, [r0, #24]
 800cdc8:	b90b      	cbnz	r3, 800cdce <_fflush_r+0x1a>
 800cdca:	f000 f887 	bl	800cedc <__sinit>
 800cdce:	4b14      	ldr	r3, [pc, #80]	; (800ce20 <_fflush_r+0x6c>)
 800cdd0:	429c      	cmp	r4, r3
 800cdd2:	d11b      	bne.n	800ce0c <_fflush_r+0x58>
 800cdd4:	686c      	ldr	r4, [r5, #4]
 800cdd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d0ef      	beq.n	800cdbe <_fflush_r+0xa>
 800cdde:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cde0:	07d0      	lsls	r0, r2, #31
 800cde2:	d404      	bmi.n	800cdee <_fflush_r+0x3a>
 800cde4:	0599      	lsls	r1, r3, #22
 800cde6:	d402      	bmi.n	800cdee <_fflush_r+0x3a>
 800cde8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cdea:	f000 f915 	bl	800d018 <__retarget_lock_acquire_recursive>
 800cdee:	4628      	mov	r0, r5
 800cdf0:	4621      	mov	r1, r4
 800cdf2:	f7ff ff5d 	bl	800ccb0 <__sflush_r>
 800cdf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cdf8:	4605      	mov	r5, r0
 800cdfa:	07da      	lsls	r2, r3, #31
 800cdfc:	d4e0      	bmi.n	800cdc0 <_fflush_r+0xc>
 800cdfe:	89a3      	ldrh	r3, [r4, #12]
 800ce00:	059b      	lsls	r3, r3, #22
 800ce02:	d4dd      	bmi.n	800cdc0 <_fflush_r+0xc>
 800ce04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce06:	f000 f908 	bl	800d01a <__retarget_lock_release_recursive>
 800ce0a:	e7d9      	b.n	800cdc0 <_fflush_r+0xc>
 800ce0c:	4b05      	ldr	r3, [pc, #20]	; (800ce24 <_fflush_r+0x70>)
 800ce0e:	429c      	cmp	r4, r3
 800ce10:	d101      	bne.n	800ce16 <_fflush_r+0x62>
 800ce12:	68ac      	ldr	r4, [r5, #8]
 800ce14:	e7df      	b.n	800cdd6 <_fflush_r+0x22>
 800ce16:	4b04      	ldr	r3, [pc, #16]	; (800ce28 <_fflush_r+0x74>)
 800ce18:	429c      	cmp	r4, r3
 800ce1a:	bf08      	it	eq
 800ce1c:	68ec      	ldreq	r4, [r5, #12]
 800ce1e:	e7da      	b.n	800cdd6 <_fflush_r+0x22>
 800ce20:	0800d8d0 	.word	0x0800d8d0
 800ce24:	0800d8f0 	.word	0x0800d8f0
 800ce28:	0800d8b0 	.word	0x0800d8b0

0800ce2c <std>:
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	b510      	push	{r4, lr}
 800ce30:	4604      	mov	r4, r0
 800ce32:	e9c0 3300 	strd	r3, r3, [r0]
 800ce36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ce3a:	6083      	str	r3, [r0, #8]
 800ce3c:	8181      	strh	r1, [r0, #12]
 800ce3e:	6643      	str	r3, [r0, #100]	; 0x64
 800ce40:	81c2      	strh	r2, [r0, #14]
 800ce42:	6183      	str	r3, [r0, #24]
 800ce44:	4619      	mov	r1, r3
 800ce46:	2208      	movs	r2, #8
 800ce48:	305c      	adds	r0, #92	; 0x5c
 800ce4a:	f7fb fdfb 	bl	8008a44 <memset>
 800ce4e:	4b05      	ldr	r3, [pc, #20]	; (800ce64 <std+0x38>)
 800ce50:	6224      	str	r4, [r4, #32]
 800ce52:	6263      	str	r3, [r4, #36]	; 0x24
 800ce54:	4b04      	ldr	r3, [pc, #16]	; (800ce68 <std+0x3c>)
 800ce56:	62a3      	str	r3, [r4, #40]	; 0x28
 800ce58:	4b04      	ldr	r3, [pc, #16]	; (800ce6c <std+0x40>)
 800ce5a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ce5c:	4b04      	ldr	r3, [pc, #16]	; (800ce70 <std+0x44>)
 800ce5e:	6323      	str	r3, [r4, #48]	; 0x30
 800ce60:	bd10      	pop	{r4, pc}
 800ce62:	bf00      	nop
 800ce64:	0800d21d 	.word	0x0800d21d
 800ce68:	0800d23f 	.word	0x0800d23f
 800ce6c:	0800d277 	.word	0x0800d277
 800ce70:	0800d29b 	.word	0x0800d29b

0800ce74 <_cleanup_r>:
 800ce74:	4901      	ldr	r1, [pc, #4]	; (800ce7c <_cleanup_r+0x8>)
 800ce76:	f000 b8af 	b.w	800cfd8 <_fwalk_reent>
 800ce7a:	bf00      	nop
 800ce7c:	0800cdb5 	.word	0x0800cdb5

0800ce80 <__sfmoreglue>:
 800ce80:	2268      	movs	r2, #104	; 0x68
 800ce82:	b570      	push	{r4, r5, r6, lr}
 800ce84:	1e4d      	subs	r5, r1, #1
 800ce86:	4355      	muls	r5, r2
 800ce88:	460e      	mov	r6, r1
 800ce8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ce8e:	f7ff fae7 	bl	800c460 <_malloc_r>
 800ce92:	4604      	mov	r4, r0
 800ce94:	b140      	cbz	r0, 800cea8 <__sfmoreglue+0x28>
 800ce96:	2100      	movs	r1, #0
 800ce98:	e9c0 1600 	strd	r1, r6, [r0]
 800ce9c:	300c      	adds	r0, #12
 800ce9e:	60a0      	str	r0, [r4, #8]
 800cea0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cea4:	f7fb fdce 	bl	8008a44 <memset>
 800cea8:	4620      	mov	r0, r4
 800ceaa:	bd70      	pop	{r4, r5, r6, pc}

0800ceac <__sfp_lock_acquire>:
 800ceac:	4801      	ldr	r0, [pc, #4]	; (800ceb4 <__sfp_lock_acquire+0x8>)
 800ceae:	f000 b8b3 	b.w	800d018 <__retarget_lock_acquire_recursive>
 800ceb2:	bf00      	nop
 800ceb4:	20001565 	.word	0x20001565

0800ceb8 <__sfp_lock_release>:
 800ceb8:	4801      	ldr	r0, [pc, #4]	; (800cec0 <__sfp_lock_release+0x8>)
 800ceba:	f000 b8ae 	b.w	800d01a <__retarget_lock_release_recursive>
 800cebe:	bf00      	nop
 800cec0:	20001565 	.word	0x20001565

0800cec4 <__sinit_lock_acquire>:
 800cec4:	4801      	ldr	r0, [pc, #4]	; (800cecc <__sinit_lock_acquire+0x8>)
 800cec6:	f000 b8a7 	b.w	800d018 <__retarget_lock_acquire_recursive>
 800ceca:	bf00      	nop
 800cecc:	20001566 	.word	0x20001566

0800ced0 <__sinit_lock_release>:
 800ced0:	4801      	ldr	r0, [pc, #4]	; (800ced8 <__sinit_lock_release+0x8>)
 800ced2:	f000 b8a2 	b.w	800d01a <__retarget_lock_release_recursive>
 800ced6:	bf00      	nop
 800ced8:	20001566 	.word	0x20001566

0800cedc <__sinit>:
 800cedc:	b510      	push	{r4, lr}
 800cede:	4604      	mov	r4, r0
 800cee0:	f7ff fff0 	bl	800cec4 <__sinit_lock_acquire>
 800cee4:	69a3      	ldr	r3, [r4, #24]
 800cee6:	b11b      	cbz	r3, 800cef0 <__sinit+0x14>
 800cee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ceec:	f7ff bff0 	b.w	800ced0 <__sinit_lock_release>
 800cef0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cef4:	6523      	str	r3, [r4, #80]	; 0x50
 800cef6:	4b13      	ldr	r3, [pc, #76]	; (800cf44 <__sinit+0x68>)
 800cef8:	4a13      	ldr	r2, [pc, #76]	; (800cf48 <__sinit+0x6c>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	62a2      	str	r2, [r4, #40]	; 0x28
 800cefe:	42a3      	cmp	r3, r4
 800cf00:	bf08      	it	eq
 800cf02:	2301      	moveq	r3, #1
 800cf04:	4620      	mov	r0, r4
 800cf06:	bf08      	it	eq
 800cf08:	61a3      	streq	r3, [r4, #24]
 800cf0a:	f000 f81f 	bl	800cf4c <__sfp>
 800cf0e:	6060      	str	r0, [r4, #4]
 800cf10:	4620      	mov	r0, r4
 800cf12:	f000 f81b 	bl	800cf4c <__sfp>
 800cf16:	60a0      	str	r0, [r4, #8]
 800cf18:	4620      	mov	r0, r4
 800cf1a:	f000 f817 	bl	800cf4c <__sfp>
 800cf1e:	2200      	movs	r2, #0
 800cf20:	2104      	movs	r1, #4
 800cf22:	60e0      	str	r0, [r4, #12]
 800cf24:	6860      	ldr	r0, [r4, #4]
 800cf26:	f7ff ff81 	bl	800ce2c <std>
 800cf2a:	2201      	movs	r2, #1
 800cf2c:	2109      	movs	r1, #9
 800cf2e:	68a0      	ldr	r0, [r4, #8]
 800cf30:	f7ff ff7c 	bl	800ce2c <std>
 800cf34:	2202      	movs	r2, #2
 800cf36:	2112      	movs	r1, #18
 800cf38:	68e0      	ldr	r0, [r4, #12]
 800cf3a:	f7ff ff77 	bl	800ce2c <std>
 800cf3e:	2301      	movs	r3, #1
 800cf40:	61a3      	str	r3, [r4, #24]
 800cf42:	e7d1      	b.n	800cee8 <__sinit+0xc>
 800cf44:	0800d410 	.word	0x0800d410
 800cf48:	0800ce75 	.word	0x0800ce75

0800cf4c <__sfp>:
 800cf4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf4e:	4607      	mov	r7, r0
 800cf50:	f7ff ffac 	bl	800ceac <__sfp_lock_acquire>
 800cf54:	4b1e      	ldr	r3, [pc, #120]	; (800cfd0 <__sfp+0x84>)
 800cf56:	681e      	ldr	r6, [r3, #0]
 800cf58:	69b3      	ldr	r3, [r6, #24]
 800cf5a:	b913      	cbnz	r3, 800cf62 <__sfp+0x16>
 800cf5c:	4630      	mov	r0, r6
 800cf5e:	f7ff ffbd 	bl	800cedc <__sinit>
 800cf62:	3648      	adds	r6, #72	; 0x48
 800cf64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cf68:	3b01      	subs	r3, #1
 800cf6a:	d503      	bpl.n	800cf74 <__sfp+0x28>
 800cf6c:	6833      	ldr	r3, [r6, #0]
 800cf6e:	b30b      	cbz	r3, 800cfb4 <__sfp+0x68>
 800cf70:	6836      	ldr	r6, [r6, #0]
 800cf72:	e7f7      	b.n	800cf64 <__sfp+0x18>
 800cf74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cf78:	b9d5      	cbnz	r5, 800cfb0 <__sfp+0x64>
 800cf7a:	4b16      	ldr	r3, [pc, #88]	; (800cfd4 <__sfp+0x88>)
 800cf7c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cf80:	60e3      	str	r3, [r4, #12]
 800cf82:	6665      	str	r5, [r4, #100]	; 0x64
 800cf84:	f000 f847 	bl	800d016 <__retarget_lock_init_recursive>
 800cf88:	f7ff ff96 	bl	800ceb8 <__sfp_lock_release>
 800cf8c:	2208      	movs	r2, #8
 800cf8e:	4629      	mov	r1, r5
 800cf90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cf94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cf98:	6025      	str	r5, [r4, #0]
 800cf9a:	61a5      	str	r5, [r4, #24]
 800cf9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cfa0:	f7fb fd50 	bl	8008a44 <memset>
 800cfa4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cfa8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cfac:	4620      	mov	r0, r4
 800cfae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cfb0:	3468      	adds	r4, #104	; 0x68
 800cfb2:	e7d9      	b.n	800cf68 <__sfp+0x1c>
 800cfb4:	2104      	movs	r1, #4
 800cfb6:	4638      	mov	r0, r7
 800cfb8:	f7ff ff62 	bl	800ce80 <__sfmoreglue>
 800cfbc:	4604      	mov	r4, r0
 800cfbe:	6030      	str	r0, [r6, #0]
 800cfc0:	2800      	cmp	r0, #0
 800cfc2:	d1d5      	bne.n	800cf70 <__sfp+0x24>
 800cfc4:	f7ff ff78 	bl	800ceb8 <__sfp_lock_release>
 800cfc8:	230c      	movs	r3, #12
 800cfca:	603b      	str	r3, [r7, #0]
 800cfcc:	e7ee      	b.n	800cfac <__sfp+0x60>
 800cfce:	bf00      	nop
 800cfd0:	0800d410 	.word	0x0800d410
 800cfd4:	ffff0001 	.word	0xffff0001

0800cfd8 <_fwalk_reent>:
 800cfd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfdc:	4606      	mov	r6, r0
 800cfde:	4688      	mov	r8, r1
 800cfe0:	2700      	movs	r7, #0
 800cfe2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cfe6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cfea:	f1b9 0901 	subs.w	r9, r9, #1
 800cfee:	d505      	bpl.n	800cffc <_fwalk_reent+0x24>
 800cff0:	6824      	ldr	r4, [r4, #0]
 800cff2:	2c00      	cmp	r4, #0
 800cff4:	d1f7      	bne.n	800cfe6 <_fwalk_reent+0xe>
 800cff6:	4638      	mov	r0, r7
 800cff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cffc:	89ab      	ldrh	r3, [r5, #12]
 800cffe:	2b01      	cmp	r3, #1
 800d000:	d907      	bls.n	800d012 <_fwalk_reent+0x3a>
 800d002:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d006:	3301      	adds	r3, #1
 800d008:	d003      	beq.n	800d012 <_fwalk_reent+0x3a>
 800d00a:	4629      	mov	r1, r5
 800d00c:	4630      	mov	r0, r6
 800d00e:	47c0      	blx	r8
 800d010:	4307      	orrs	r7, r0
 800d012:	3568      	adds	r5, #104	; 0x68
 800d014:	e7e9      	b.n	800cfea <_fwalk_reent+0x12>

0800d016 <__retarget_lock_init_recursive>:
 800d016:	4770      	bx	lr

0800d018 <__retarget_lock_acquire_recursive>:
 800d018:	4770      	bx	lr

0800d01a <__retarget_lock_release_recursive>:
 800d01a:	4770      	bx	lr

0800d01c <__swhatbuf_r>:
 800d01c:	b570      	push	{r4, r5, r6, lr}
 800d01e:	460e      	mov	r6, r1
 800d020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d024:	4614      	mov	r4, r2
 800d026:	2900      	cmp	r1, #0
 800d028:	461d      	mov	r5, r3
 800d02a:	b096      	sub	sp, #88	; 0x58
 800d02c:	da08      	bge.n	800d040 <__swhatbuf_r+0x24>
 800d02e:	2200      	movs	r2, #0
 800d030:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d034:	602a      	str	r2, [r5, #0]
 800d036:	061a      	lsls	r2, r3, #24
 800d038:	d410      	bmi.n	800d05c <__swhatbuf_r+0x40>
 800d03a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d03e:	e00e      	b.n	800d05e <__swhatbuf_r+0x42>
 800d040:	466a      	mov	r2, sp
 800d042:	f000 f951 	bl	800d2e8 <_fstat_r>
 800d046:	2800      	cmp	r0, #0
 800d048:	dbf1      	blt.n	800d02e <__swhatbuf_r+0x12>
 800d04a:	9a01      	ldr	r2, [sp, #4]
 800d04c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d050:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d054:	425a      	negs	r2, r3
 800d056:	415a      	adcs	r2, r3
 800d058:	602a      	str	r2, [r5, #0]
 800d05a:	e7ee      	b.n	800d03a <__swhatbuf_r+0x1e>
 800d05c:	2340      	movs	r3, #64	; 0x40
 800d05e:	2000      	movs	r0, #0
 800d060:	6023      	str	r3, [r4, #0]
 800d062:	b016      	add	sp, #88	; 0x58
 800d064:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d068 <__smakebuf_r>:
 800d068:	898b      	ldrh	r3, [r1, #12]
 800d06a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d06c:	079d      	lsls	r5, r3, #30
 800d06e:	4606      	mov	r6, r0
 800d070:	460c      	mov	r4, r1
 800d072:	d507      	bpl.n	800d084 <__smakebuf_r+0x1c>
 800d074:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d078:	6023      	str	r3, [r4, #0]
 800d07a:	6123      	str	r3, [r4, #16]
 800d07c:	2301      	movs	r3, #1
 800d07e:	6163      	str	r3, [r4, #20]
 800d080:	b002      	add	sp, #8
 800d082:	bd70      	pop	{r4, r5, r6, pc}
 800d084:	466a      	mov	r2, sp
 800d086:	ab01      	add	r3, sp, #4
 800d088:	f7ff ffc8 	bl	800d01c <__swhatbuf_r>
 800d08c:	9900      	ldr	r1, [sp, #0]
 800d08e:	4605      	mov	r5, r0
 800d090:	4630      	mov	r0, r6
 800d092:	f7ff f9e5 	bl	800c460 <_malloc_r>
 800d096:	b948      	cbnz	r0, 800d0ac <__smakebuf_r+0x44>
 800d098:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d09c:	059a      	lsls	r2, r3, #22
 800d09e:	d4ef      	bmi.n	800d080 <__smakebuf_r+0x18>
 800d0a0:	f023 0303 	bic.w	r3, r3, #3
 800d0a4:	f043 0302 	orr.w	r3, r3, #2
 800d0a8:	81a3      	strh	r3, [r4, #12]
 800d0aa:	e7e3      	b.n	800d074 <__smakebuf_r+0xc>
 800d0ac:	4b0d      	ldr	r3, [pc, #52]	; (800d0e4 <__smakebuf_r+0x7c>)
 800d0ae:	62b3      	str	r3, [r6, #40]	; 0x28
 800d0b0:	89a3      	ldrh	r3, [r4, #12]
 800d0b2:	6020      	str	r0, [r4, #0]
 800d0b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0b8:	81a3      	strh	r3, [r4, #12]
 800d0ba:	9b00      	ldr	r3, [sp, #0]
 800d0bc:	6120      	str	r0, [r4, #16]
 800d0be:	6163      	str	r3, [r4, #20]
 800d0c0:	9b01      	ldr	r3, [sp, #4]
 800d0c2:	b15b      	cbz	r3, 800d0dc <__smakebuf_r+0x74>
 800d0c4:	4630      	mov	r0, r6
 800d0c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0ca:	f000 f91f 	bl	800d30c <_isatty_r>
 800d0ce:	b128      	cbz	r0, 800d0dc <__smakebuf_r+0x74>
 800d0d0:	89a3      	ldrh	r3, [r4, #12]
 800d0d2:	f023 0303 	bic.w	r3, r3, #3
 800d0d6:	f043 0301 	orr.w	r3, r3, #1
 800d0da:	81a3      	strh	r3, [r4, #12]
 800d0dc:	89a0      	ldrh	r0, [r4, #12]
 800d0de:	4305      	orrs	r5, r0
 800d0e0:	81a5      	strh	r5, [r4, #12]
 800d0e2:	e7cd      	b.n	800d080 <__smakebuf_r+0x18>
 800d0e4:	0800ce75 	.word	0x0800ce75

0800d0e8 <memmove>:
 800d0e8:	4288      	cmp	r0, r1
 800d0ea:	b510      	push	{r4, lr}
 800d0ec:	eb01 0402 	add.w	r4, r1, r2
 800d0f0:	d902      	bls.n	800d0f8 <memmove+0x10>
 800d0f2:	4284      	cmp	r4, r0
 800d0f4:	4623      	mov	r3, r4
 800d0f6:	d807      	bhi.n	800d108 <memmove+0x20>
 800d0f8:	1e43      	subs	r3, r0, #1
 800d0fa:	42a1      	cmp	r1, r4
 800d0fc:	d008      	beq.n	800d110 <memmove+0x28>
 800d0fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d102:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d106:	e7f8      	b.n	800d0fa <memmove+0x12>
 800d108:	4601      	mov	r1, r0
 800d10a:	4402      	add	r2, r0
 800d10c:	428a      	cmp	r2, r1
 800d10e:	d100      	bne.n	800d112 <memmove+0x2a>
 800d110:	bd10      	pop	{r4, pc}
 800d112:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d116:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d11a:	e7f7      	b.n	800d10c <memmove+0x24>

0800d11c <__malloc_lock>:
 800d11c:	4801      	ldr	r0, [pc, #4]	; (800d124 <__malloc_lock+0x8>)
 800d11e:	f7ff bf7b 	b.w	800d018 <__retarget_lock_acquire_recursive>
 800d122:	bf00      	nop
 800d124:	20001564 	.word	0x20001564

0800d128 <__malloc_unlock>:
 800d128:	4801      	ldr	r0, [pc, #4]	; (800d130 <__malloc_unlock+0x8>)
 800d12a:	f7ff bf76 	b.w	800d01a <__retarget_lock_release_recursive>
 800d12e:	bf00      	nop
 800d130:	20001564 	.word	0x20001564

0800d134 <_realloc_r>:
 800d134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d138:	4680      	mov	r8, r0
 800d13a:	4614      	mov	r4, r2
 800d13c:	460e      	mov	r6, r1
 800d13e:	b921      	cbnz	r1, 800d14a <_realloc_r+0x16>
 800d140:	4611      	mov	r1, r2
 800d142:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d146:	f7ff b98b 	b.w	800c460 <_malloc_r>
 800d14a:	b92a      	cbnz	r2, 800d158 <_realloc_r+0x24>
 800d14c:	f7ff f920 	bl	800c390 <_free_r>
 800d150:	4625      	mov	r5, r4
 800d152:	4628      	mov	r0, r5
 800d154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d158:	f000 f8fa 	bl	800d350 <_malloc_usable_size_r>
 800d15c:	4284      	cmp	r4, r0
 800d15e:	4607      	mov	r7, r0
 800d160:	d802      	bhi.n	800d168 <_realloc_r+0x34>
 800d162:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d166:	d812      	bhi.n	800d18e <_realloc_r+0x5a>
 800d168:	4621      	mov	r1, r4
 800d16a:	4640      	mov	r0, r8
 800d16c:	f7ff f978 	bl	800c460 <_malloc_r>
 800d170:	4605      	mov	r5, r0
 800d172:	2800      	cmp	r0, #0
 800d174:	d0ed      	beq.n	800d152 <_realloc_r+0x1e>
 800d176:	42bc      	cmp	r4, r7
 800d178:	4622      	mov	r2, r4
 800d17a:	4631      	mov	r1, r6
 800d17c:	bf28      	it	cs
 800d17e:	463a      	movcs	r2, r7
 800d180:	f7fe fc2c 	bl	800b9dc <memcpy>
 800d184:	4631      	mov	r1, r6
 800d186:	4640      	mov	r0, r8
 800d188:	f7ff f902 	bl	800c390 <_free_r>
 800d18c:	e7e1      	b.n	800d152 <_realloc_r+0x1e>
 800d18e:	4635      	mov	r5, r6
 800d190:	e7df      	b.n	800d152 <_realloc_r+0x1e>

0800d192 <_raise_r>:
 800d192:	291f      	cmp	r1, #31
 800d194:	b538      	push	{r3, r4, r5, lr}
 800d196:	4604      	mov	r4, r0
 800d198:	460d      	mov	r5, r1
 800d19a:	d904      	bls.n	800d1a6 <_raise_r+0x14>
 800d19c:	2316      	movs	r3, #22
 800d19e:	6003      	str	r3, [r0, #0]
 800d1a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d1a4:	bd38      	pop	{r3, r4, r5, pc}
 800d1a6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d1a8:	b112      	cbz	r2, 800d1b0 <_raise_r+0x1e>
 800d1aa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d1ae:	b94b      	cbnz	r3, 800d1c4 <_raise_r+0x32>
 800d1b0:	4620      	mov	r0, r4
 800d1b2:	f000 f831 	bl	800d218 <_getpid_r>
 800d1b6:	462a      	mov	r2, r5
 800d1b8:	4601      	mov	r1, r0
 800d1ba:	4620      	mov	r0, r4
 800d1bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1c0:	f000 b818 	b.w	800d1f4 <_kill_r>
 800d1c4:	2b01      	cmp	r3, #1
 800d1c6:	d00a      	beq.n	800d1de <_raise_r+0x4c>
 800d1c8:	1c59      	adds	r1, r3, #1
 800d1ca:	d103      	bne.n	800d1d4 <_raise_r+0x42>
 800d1cc:	2316      	movs	r3, #22
 800d1ce:	6003      	str	r3, [r0, #0]
 800d1d0:	2001      	movs	r0, #1
 800d1d2:	e7e7      	b.n	800d1a4 <_raise_r+0x12>
 800d1d4:	2400      	movs	r4, #0
 800d1d6:	4628      	mov	r0, r5
 800d1d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d1dc:	4798      	blx	r3
 800d1de:	2000      	movs	r0, #0
 800d1e0:	e7e0      	b.n	800d1a4 <_raise_r+0x12>
	...

0800d1e4 <raise>:
 800d1e4:	4b02      	ldr	r3, [pc, #8]	; (800d1f0 <raise+0xc>)
 800d1e6:	4601      	mov	r1, r0
 800d1e8:	6818      	ldr	r0, [r3, #0]
 800d1ea:	f7ff bfd2 	b.w	800d192 <_raise_r>
 800d1ee:	bf00      	nop
 800d1f0:	2000017c 	.word	0x2000017c

0800d1f4 <_kill_r>:
 800d1f4:	b538      	push	{r3, r4, r5, lr}
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	4d06      	ldr	r5, [pc, #24]	; (800d214 <_kill_r+0x20>)
 800d1fa:	4604      	mov	r4, r0
 800d1fc:	4608      	mov	r0, r1
 800d1fe:	4611      	mov	r1, r2
 800d200:	602b      	str	r3, [r5, #0]
 800d202:	f7f3 fed0 	bl	8000fa6 <_kill>
 800d206:	1c43      	adds	r3, r0, #1
 800d208:	d102      	bne.n	800d210 <_kill_r+0x1c>
 800d20a:	682b      	ldr	r3, [r5, #0]
 800d20c:	b103      	cbz	r3, 800d210 <_kill_r+0x1c>
 800d20e:	6023      	str	r3, [r4, #0]
 800d210:	bd38      	pop	{r3, r4, r5, pc}
 800d212:	bf00      	nop
 800d214:	20001568 	.word	0x20001568

0800d218 <_getpid_r>:
 800d218:	f7f3 bebe 	b.w	8000f98 <_getpid>

0800d21c <__sread>:
 800d21c:	b510      	push	{r4, lr}
 800d21e:	460c      	mov	r4, r1
 800d220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d224:	f000 f89c 	bl	800d360 <_read_r>
 800d228:	2800      	cmp	r0, #0
 800d22a:	bfab      	itete	ge
 800d22c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d22e:	89a3      	ldrhlt	r3, [r4, #12]
 800d230:	181b      	addge	r3, r3, r0
 800d232:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d236:	bfac      	ite	ge
 800d238:	6563      	strge	r3, [r4, #84]	; 0x54
 800d23a:	81a3      	strhlt	r3, [r4, #12]
 800d23c:	bd10      	pop	{r4, pc}

0800d23e <__swrite>:
 800d23e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d242:	461f      	mov	r7, r3
 800d244:	898b      	ldrh	r3, [r1, #12]
 800d246:	4605      	mov	r5, r0
 800d248:	05db      	lsls	r3, r3, #23
 800d24a:	460c      	mov	r4, r1
 800d24c:	4616      	mov	r6, r2
 800d24e:	d505      	bpl.n	800d25c <__swrite+0x1e>
 800d250:	2302      	movs	r3, #2
 800d252:	2200      	movs	r2, #0
 800d254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d258:	f000 f868 	bl	800d32c <_lseek_r>
 800d25c:	89a3      	ldrh	r3, [r4, #12]
 800d25e:	4632      	mov	r2, r6
 800d260:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d264:	81a3      	strh	r3, [r4, #12]
 800d266:	4628      	mov	r0, r5
 800d268:	463b      	mov	r3, r7
 800d26a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d26e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d272:	f000 b817 	b.w	800d2a4 <_write_r>

0800d276 <__sseek>:
 800d276:	b510      	push	{r4, lr}
 800d278:	460c      	mov	r4, r1
 800d27a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d27e:	f000 f855 	bl	800d32c <_lseek_r>
 800d282:	1c43      	adds	r3, r0, #1
 800d284:	89a3      	ldrh	r3, [r4, #12]
 800d286:	bf15      	itete	ne
 800d288:	6560      	strne	r0, [r4, #84]	; 0x54
 800d28a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d28e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d292:	81a3      	strheq	r3, [r4, #12]
 800d294:	bf18      	it	ne
 800d296:	81a3      	strhne	r3, [r4, #12]
 800d298:	bd10      	pop	{r4, pc}

0800d29a <__sclose>:
 800d29a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d29e:	f000 b813 	b.w	800d2c8 <_close_r>
	...

0800d2a4 <_write_r>:
 800d2a4:	b538      	push	{r3, r4, r5, lr}
 800d2a6:	4604      	mov	r4, r0
 800d2a8:	4608      	mov	r0, r1
 800d2aa:	4611      	mov	r1, r2
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	4d05      	ldr	r5, [pc, #20]	; (800d2c4 <_write_r+0x20>)
 800d2b0:	602a      	str	r2, [r5, #0]
 800d2b2:	461a      	mov	r2, r3
 800d2b4:	f7f3 feae 	bl	8001014 <_write>
 800d2b8:	1c43      	adds	r3, r0, #1
 800d2ba:	d102      	bne.n	800d2c2 <_write_r+0x1e>
 800d2bc:	682b      	ldr	r3, [r5, #0]
 800d2be:	b103      	cbz	r3, 800d2c2 <_write_r+0x1e>
 800d2c0:	6023      	str	r3, [r4, #0]
 800d2c2:	bd38      	pop	{r3, r4, r5, pc}
 800d2c4:	20001568 	.word	0x20001568

0800d2c8 <_close_r>:
 800d2c8:	b538      	push	{r3, r4, r5, lr}
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	4d05      	ldr	r5, [pc, #20]	; (800d2e4 <_close_r+0x1c>)
 800d2ce:	4604      	mov	r4, r0
 800d2d0:	4608      	mov	r0, r1
 800d2d2:	602b      	str	r3, [r5, #0]
 800d2d4:	f7f3 feba 	bl	800104c <_close>
 800d2d8:	1c43      	adds	r3, r0, #1
 800d2da:	d102      	bne.n	800d2e2 <_close_r+0x1a>
 800d2dc:	682b      	ldr	r3, [r5, #0]
 800d2de:	b103      	cbz	r3, 800d2e2 <_close_r+0x1a>
 800d2e0:	6023      	str	r3, [r4, #0]
 800d2e2:	bd38      	pop	{r3, r4, r5, pc}
 800d2e4:	20001568 	.word	0x20001568

0800d2e8 <_fstat_r>:
 800d2e8:	b538      	push	{r3, r4, r5, lr}
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	4d06      	ldr	r5, [pc, #24]	; (800d308 <_fstat_r+0x20>)
 800d2ee:	4604      	mov	r4, r0
 800d2f0:	4608      	mov	r0, r1
 800d2f2:	4611      	mov	r1, r2
 800d2f4:	602b      	str	r3, [r5, #0]
 800d2f6:	f7f3 feb4 	bl	8001062 <_fstat>
 800d2fa:	1c43      	adds	r3, r0, #1
 800d2fc:	d102      	bne.n	800d304 <_fstat_r+0x1c>
 800d2fe:	682b      	ldr	r3, [r5, #0]
 800d300:	b103      	cbz	r3, 800d304 <_fstat_r+0x1c>
 800d302:	6023      	str	r3, [r4, #0]
 800d304:	bd38      	pop	{r3, r4, r5, pc}
 800d306:	bf00      	nop
 800d308:	20001568 	.word	0x20001568

0800d30c <_isatty_r>:
 800d30c:	b538      	push	{r3, r4, r5, lr}
 800d30e:	2300      	movs	r3, #0
 800d310:	4d05      	ldr	r5, [pc, #20]	; (800d328 <_isatty_r+0x1c>)
 800d312:	4604      	mov	r4, r0
 800d314:	4608      	mov	r0, r1
 800d316:	602b      	str	r3, [r5, #0]
 800d318:	f7f3 feb2 	bl	8001080 <_isatty>
 800d31c:	1c43      	adds	r3, r0, #1
 800d31e:	d102      	bne.n	800d326 <_isatty_r+0x1a>
 800d320:	682b      	ldr	r3, [r5, #0]
 800d322:	b103      	cbz	r3, 800d326 <_isatty_r+0x1a>
 800d324:	6023      	str	r3, [r4, #0]
 800d326:	bd38      	pop	{r3, r4, r5, pc}
 800d328:	20001568 	.word	0x20001568

0800d32c <_lseek_r>:
 800d32c:	b538      	push	{r3, r4, r5, lr}
 800d32e:	4604      	mov	r4, r0
 800d330:	4608      	mov	r0, r1
 800d332:	4611      	mov	r1, r2
 800d334:	2200      	movs	r2, #0
 800d336:	4d05      	ldr	r5, [pc, #20]	; (800d34c <_lseek_r+0x20>)
 800d338:	602a      	str	r2, [r5, #0]
 800d33a:	461a      	mov	r2, r3
 800d33c:	f7f3 feaa 	bl	8001094 <_lseek>
 800d340:	1c43      	adds	r3, r0, #1
 800d342:	d102      	bne.n	800d34a <_lseek_r+0x1e>
 800d344:	682b      	ldr	r3, [r5, #0]
 800d346:	b103      	cbz	r3, 800d34a <_lseek_r+0x1e>
 800d348:	6023      	str	r3, [r4, #0]
 800d34a:	bd38      	pop	{r3, r4, r5, pc}
 800d34c:	20001568 	.word	0x20001568

0800d350 <_malloc_usable_size_r>:
 800d350:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d354:	1f18      	subs	r0, r3, #4
 800d356:	2b00      	cmp	r3, #0
 800d358:	bfbc      	itt	lt
 800d35a:	580b      	ldrlt	r3, [r1, r0]
 800d35c:	18c0      	addlt	r0, r0, r3
 800d35e:	4770      	bx	lr

0800d360 <_read_r>:
 800d360:	b538      	push	{r3, r4, r5, lr}
 800d362:	4604      	mov	r4, r0
 800d364:	4608      	mov	r0, r1
 800d366:	4611      	mov	r1, r2
 800d368:	2200      	movs	r2, #0
 800d36a:	4d05      	ldr	r5, [pc, #20]	; (800d380 <_read_r+0x20>)
 800d36c:	602a      	str	r2, [r5, #0]
 800d36e:	461a      	mov	r2, r3
 800d370:	f7f3 fe33 	bl	8000fda <_read>
 800d374:	1c43      	adds	r3, r0, #1
 800d376:	d102      	bne.n	800d37e <_read_r+0x1e>
 800d378:	682b      	ldr	r3, [r5, #0]
 800d37a:	b103      	cbz	r3, 800d37e <_read_r+0x1e>
 800d37c:	6023      	str	r3, [r4, #0]
 800d37e:	bd38      	pop	{r3, r4, r5, pc}
 800d380:	20001568 	.word	0x20001568

0800d384 <_init>:
 800d384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d386:	bf00      	nop
 800d388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d38a:	bc08      	pop	{r3}
 800d38c:	469e      	mov	lr, r3
 800d38e:	4770      	bx	lr

0800d390 <_fini>:
 800d390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d392:	bf00      	nop
 800d394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d396:	bc08      	pop	{r3}
 800d398:	469e      	mov	lr, r3
 800d39a:	4770      	bx	lr
